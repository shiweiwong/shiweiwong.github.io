<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Linux 运维和使用入门</title>
    <url>/Linux%E7%A7%8D%E7%A7%8D/Linux%E8%BF%90%E7%BB%B4%E5%92%8C%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8.html</url>
    <content><![CDATA[<blockquote>
<p>写在最前面：<br>使用 Linux 系统是个长期的过程，学习曲线比较陡峭，本文只能对 Linux 系统做一个简单介绍。<br><strong>个人感觉</strong> Linux 最好用的地方在于双手不离开主键区即可做大部分的事情，以及开发环境配置起来非常简单。  </p>
</blockquote>
<h1 id="0-WSL-安装"><a href="#0-WSL-安装" class="headerlink" title="0 WSL 安装"></a>0 WSL 安装</h1><blockquote>
<p>安装步骤请参考 <a href="https://zhuanlan.zhihu.com/p/348813745">https://zhuanlan.zhihu.com/p/348813745</a><br>简单来说，微软在 WSL2.0 版本开始可以将 <code>Linux</code> 内核置于 <code>Windows</code> 系统中，可以使用大部分功能（甚至是图形界面）。</p>
</blockquote>
<h2 id="0-1-安装-Zsh"><a href="#0-1-安装-Zsh" class="headerlink" title="0.1 安装 Zsh"></a>0.1 安装 Zsh</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install zsh</span><br><span class="line">sudo git <span class="built_in">clone</span> https://gitee.com/mirrors/oh-my-zsh.git</span><br><span class="line">sh ./oh-my-zsh/tools/install.sh</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="0-2-VSCode-WSL-插件"><a href="#0-2-VSCode-WSL-插件" class="headerlink" title="0.2 VSCode WSL 插件"></a>0.2 VSCode WSL 插件</h2><p>一款可以直接让 VSCode 连接到 WSL 的插件  </p>
<blockquote>
<p><a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-wsl">https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-wsl</a>  </p>
</blockquote>
<p><img src="https://microsoft.github.io/vscode-remote-release/images/remote-wsl-open-code.gif" alt="demo"></p>
<h1 id="1-Linux-简介"><a href="#1-Linux-简介" class="headerlink" title="1 Linux 简介"></a>1 Linux 简介</h1><h2 id="1-1-Windows-Terminal"><a href="#1-1-Windows-Terminal" class="headerlink" title="1.1 Windows Terminal"></a>1.1 Windows Terminal</h2><p>一款新式、快速、高效、强大且高效的终端应用程序，适用于命令行工具和命令提示符，<code>PowerShell</code> 和 <code>WSL</code> 等 <code>Shell</code> 用户。（<code>Shell</code> 是一种与操作系统内核交互的程序）。<br><img src="/Linux%E7%A7%8D%E7%A7%8D/Linux%E8%BF%90%E7%BB%B4%E5%92%8C%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8.htm/windowsTerminal.gif" alt="Demo"></p>
<blockquote>
<p>详情见微软应用商店: <a href="https://www.microsoft.com/store/productid/9N0DX20HK701?ocid=pdpshare">https://www.microsoft.com/store/productid/9N0DX20HK701?ocid=pdpshare</a></p>
</blockquote>
<h2 id="1-2-系统结构"><a href="#1-2-系统结构" class="headerlink" title="1.2 系统结构"></a>1.2 系统结构</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\\wsl.localhost\kali-linux\</span><br><span class="line">├── home        用户的主目录，在 Linux 中，每个用户都有一个自己的目录。</span><br><span class="line">├── srv     </span><br><span class="line">├── etc         etc 是 Etcetera(等等) 的缩写,这个目录用来存放所有的系统管理所需要的配置文件和子目录。</span><br><span class="line">├── opt         </span><br><span class="line">├── root</span><br><span class="line">├── mnt         用于挂载其他文件系统或者磁盘</span><br><span class="line">├── usr         非常重要的目录，很多应用程序和文件都放在这个目录下，类似于 windows 下的 program files 目录。</span><br><span class="line">├── media</span><br><span class="line">├── sys</span><br><span class="line">├── dev</span><br><span class="line">├── boot</span><br><span class="line">├── run</span><br><span class="line">├── proc</span><br><span class="line">├── tmp</span><br><span class="line">├── bin         Binaries (二进制文件) 的缩写, 这个目录存放着最经常使用的命令。</span><br><span class="line">├── var         </span><br><span class="line">└── lost+found</span><br></pre></td></tr></table></figure>
<h2 id="1-3-用户组-amp-权限问题"><a href="#1-3-用户组-amp-权限问题" class="headerlink" title="1.3 用户组&amp;权限问题"></a>1.3 用户组&amp;权限问题</h2><p>直接拿个例子说明一个常见场景<br><img src="/Linux%E7%A7%8D%E7%A7%8D/Linux%E8%BF%90%E7%BB%B4%E5%92%8C%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8.htm/%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90.png" alt="权限场景"><br>第一列表示 文件类型(1位), 文件所有者权限(3位), 文件所有者同组用户权限（3位），其他用户权限（3位）<br>第三列表示<strong>文件所有者</strong>，第四列表示<strong>文件所有者所在的用户组</strong>。</p>
<h3 id="相关常用命令"><a href="#相关常用命令" class="headerlink" title="相关常用命令"></a>相关常用命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 改变权限</span></span><br><span class="line">chmod a+x aaa</span><br><span class="line">chmod 777 aaa</span><br><span class="line"><span class="meta">#</span><span class="bash"> 改变文件所有者</span></span><br><span class="line">chown user:usergroup bbb</span><br></pre></td></tr></table></figure>


<h2 id="1-4-软件包管理器"><a href="#1-4-软件包管理器" class="headerlink" title="1.4 软件包管理器"></a>1.4 软件包管理器</h2><h3 id="1-4-1-apt"><a href="#1-4-1-apt" class="headerlink" title="1.4.1 apt"></a>1.4.1 apt</h3><p><code>Debian</code>系 Linux 系统提供的软件包管理器(比较知名的有 <code>Ubuntu</code>, <code>Deepin</code>, <code>Kali</code>等)，提供了查找、安装、升级、删除某一个、一组甚至全部软件包的命令。<br>常用命令包括：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 更新软件列表</span></span><br><span class="line">apt update  </span><br><span class="line"><span class="meta">#</span><span class="bash"> 更新软件</span></span><br><span class="line">apt upgrade</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装软件</span></span><br><span class="line">apt install xxxx </span><br><span class="line"><span class="meta">#</span><span class="bash"> 卸载软件</span></span><br><span class="line">apt uninstall</span><br></pre></td></tr></table></figure>
<p>一个好玩的例子：</p>
<h3 id="1-4-2-dpkg"><a href="#1-4-2-dpkg" class="headerlink" title="1.4.2 dpkg"></a>1.4.2 dpkg</h3><p><code>dpkg</code> 即 package manager for Debian， 另一个包管理器，用于安装 <code>.deb</code> 格式的软件包。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dpkg -i xxxx.deb</span><br></pre></td></tr></table></figure>
<h3 id="1-4-3-snap"><a href="#1-4-3-snap" class="headerlink" title="1.4.3 snap"></a>1.4.3 snap</h3><p><code>Ubuntu18.04</code>以后自带的一个包管理器，可以跨 <code>Linux</code> 平台安装软件包。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装软件</span></span><br><span class="line">snap install vlc                    # 默认使用stable channel</span><br><span class="line">snap install vlc --channel=edge     # 指定 channel</span><br><span class="line">snap switch  vlc --channel=stable   # 切换channel</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> snap 安装软件目录在 `/snap/bin`，该目录已加入 `<span class="variable">$PATH</span>`，因此可以直接在命令行运行相应的程序。</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --classic 使用经典Linux命名空间，而不是Snap的沙箱式命名空间</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 经典模式允许应用程序访问系统的底层部分，例如网络或文件系统，而不受Snap沙箱的限制。</span></span></span><br><span class="line">snap install certbot --classic</span><br></pre></td></tr></table></figure>

<h2 id="1-3-终端（Terminal）"><a href="#1-3-终端（Terminal）" class="headerlink" title="1.3 终端（Terminal）"></a>1.3 终端（Terminal）</h2><h3 id="1-3-1-bash"><a href="#1-3-1-bash" class="headerlink" title="1.3.1 bash"></a>1.3.1 bash</h3><p>基本的 <code>Shell</code> 界面，除了 <code>Tab</code> 补全之外几乎不提供任何功能。<br><img src="/Linux%E7%A7%8D%E7%A7%8D/Linux%E8%BF%90%E7%BB%B4%E5%92%8C%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8.htm/Bash.png" alt="bash"></p>
<h3 id="1-3-2-zsh"><a href="#1-3-2-zsh" class="headerlink" title="1.3.2 zsh"></a>1.3.2 zsh</h3><p>一个更好用的 <code>Shell</code> 软件<br><img src="/Linux%E7%A7%8D%E7%A7%8D/Linux%E8%BF%90%E7%BB%B4%E5%92%8C%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8.htm/zsh.png" alt="zsh"></p>
<h1 id="2-常用命令"><a href="#2-常用命令" class="headerlink" title="2 常用命令"></a>2 常用命令</h1><h2 id="2-0-最重要的命令-man"><a href="#2-0-最重要的命令-man" class="headerlink" title="2.0 最重要的命令 man"></a>2.0 最重要的命令 <code>man</code></h2><p>用于查看其他命令的帮助文档<br><img src="/Linux%E7%A7%8D%E7%A7%8D/Linux%E8%BF%90%E7%BB%B4%E5%92%8C%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8.htm/man.png" alt="man"></p>
<h2 id="2-1-ssh-登陆"><a href="#2-1-ssh-登陆" class="headerlink" title="2.1 ssh 登陆"></a>2.1 ssh 登陆</h2><p>使用 <code>ssh user@host</code> 登陆远程服务器，以及用 <code>scp</code> 命令传输文件。<br><code>ssh</code> 用公钥免密码登陆相关<code>ssh-keygen</code> 等命令。</p>
<h2 id="2-2-系统运维常用命令"><a href="#2-2-系统运维常用命令" class="headerlink" title="2.2 系统运维常用命令"></a>2.2 系统运维常用命令</h2><ul>
<li>top 查看当前 CPU 和 内存状态</li>
<li>df 查看硬盘状态</li>
<li>netstat 和 ps 查看系统进程相关</li>
<li>systemctl 和 /etc/init.d/xxx  服务管理相关</li>
<li>后台运行 在某个命令后边加 &amp; </li>
<li>nohup 使得命令输出到某一文件而不是控制台上 <code>nohup xxx &gt; log.txt</code></li>
</ul>
<h2 id="2-3-其他命令"><a href="#2-3-其他命令" class="headerlink" title="2.3 其他命令"></a>2.3 其他命令</h2><ul>
<li>ls 查看文件</li>
<li>cd 进入到目录</li>
<li>rm 删除文件</li>
<li>touch 创建文件</li>
<li>mkdir 创建文件夹</li>
<li>管道 <code>|</code> 将 <code>|</code> 前命令的结果作为<code>|</code>后命令的输入</li>
<li>grep 字符串查询</li>
<li>cat 和 less 查看文件内容相关</li>
</ul>
<h1 id="3-Vim"><a href="#3-Vim" class="headerlink" title="3 Vim"></a>3 Vim</h1><p>一个强大的<strong>文本编辑器</strong>，<strong>文本编辑器</strong>，<strong>文本编辑器</strong>。<br>可以双手不离开主键区进行<strong>任何编辑操作</strong>。<br>不要问为什么不能运行脚本或者代码，那是插件的事情。</p>
<h2 id="3-1-Vim-基本操作"><a href="#3-1-Vim-基本操作" class="headerlink" title="3.1 Vim 基本操作"></a>3.1 Vim 基本操作</h2><p><img src="/Linux%E7%A7%8D%E7%A7%8D/Linux%E8%BF%90%E7%BB%B4%E5%92%8C%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8.htm/Vim.jpg" alt="Vim 键盘图"></p>
<h3 id="3-1-1-命令模式（Command-mode）"><a href="#3-1-1-命令模式（Command-mode）" class="headerlink" title="3.1.1 命令模式（Command mode）"></a>3.1.1 命令模式（Command mode）</h3><p>默认处于命令模式。此模式下，可使用方向键（上、下、左、右键）或 k、j、h、i 移动光标的位置，还可以对文件内容进行复制、粘贴、替换、删除等操作。</p>
<h3 id="3-1-2-输入模式-Insert-mode"><a href="#3-1-2-输入模式-Insert-mode" class="headerlink" title="3.1.2 输入模式 (Insert mode)"></a>3.1.2 输入模式 (Insert mode)</h3><p>在输入模式下，Vim 可以对文件执行写操作，类似于在 Windows 系统的文档中输入内容。</p>
<h3 id="3-1-3-底线命令模式-Last-line-mode"><a href="#3-1-3-底线命令模式-Last-line-mode" class="headerlink" title="3.1.3 底线命令模式 (Last line mode)"></a>3.1.3 底线命令模式 (Last line mode)</h3><p>直接执行各种命令。<br><strong>wq</strong> 保存并退出，其他的用到现场查。</p>
<h2 id="3-2-其他软件的-Vim-插件"><a href="#3-2-其他软件的-Vim-插件" class="headerlink" title="3.2 其他软件的 Vim 插件"></a>3.2 其他软件的 Vim 插件</h2><h3 id="3-2-1-Vimium-C"><a href="#3-2-1-Vimium-C" class="headerlink" title="3.2.1 Vimium C"></a>3.2.1 Vimium C</h3><blockquote>
<p> 仓库地址 <a href="https://github.com/gdh1995/vimium-c">https://github.com/gdh1995/vimium-c</a></p>
</blockquote>
<h3 id="3-2-2-VSCode-的-Vim-mode"><a href="#3-2-2-VSCode-的-Vim-mode" class="headerlink" title="3.2.2 VSCode 的 Vim mode"></a>3.2.2 VSCode 的 Vim mode</h3>]]></content>
      <categories>
        <category>Linux种种</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>WSL 安装</title>
    <url>/Linux%E7%A7%8D%E7%A7%8D/WSL.html</url>
    <content><![CDATA[<h1 id="1-打开系统虚拟功能"><a href="#1-打开系统虚拟功能" class="headerlink" title="1 打开系统虚拟功能"></a>1 打开系统虚拟功能</h1><pre class="mermaid">graph LR
    控制面板 ---> 程序和功能  --->  启动或关闭Windows功能 --->  适用于Linux的Windows子系统</pre>
<p>适用于 Linux 的 Windows 子系统可让开发人员按原样运行 GNU/Linux 环境 - 包括大多数命令行工具、实用工具和应用程序 - 且不会产生传统虚拟机或双启动设置开销。</p>
<p>WSL 2 是适用于 Linux 的 Windows 子系统体系结构的一个新版本，它支持适用于 Linux 的 Windows 子系统在 Windows 上运行 ELF64 Linux 二进制文件。 它的主要目标是提高文件系统性能，以及添加完全的系统调用兼容性。</p>
<h1 id="2-应用商店安装-Ubuntu"><a href="#2-应用商店安装-Ubuntu" class="headerlink" title="2 应用商店安装 Ubuntu"></a>2 应用商店安装 Ubuntu</h1><blockquote>
<p><a href="https://www.microsoft.com/store/productid/9PDXGNCFSCZV?ocid=pdpshare">https://www.microsoft.com/store/productid/9PDXGNCFSCZV?ocid=pdpshare</a></p>
</blockquote>
<h1 id="3-安装-Zsh"><a href="#3-安装-Zsh" class="headerlink" title="3 安装 Zsh"></a>3 安装 Zsh</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install zsh</span><br><span class="line">sudo git <span class="built_in">clone</span> https://gitee.com/mirrors/oh-my-zsh.git</span><br><span class="line">sh ./oh-my-zsh/tools/install.sh</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="4-VSCode-WSL-插件"><a href="#4-VSCode-WSL-插件" class="headerlink" title="4 VSCode WSL 插件"></a>4 VSCode WSL 插件</h1><p>一款可以直接让 VSCode 连接到 WSL 的插件  </p>
<blockquote>
<p><a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-wsl">https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-wsl</a>  </p>
</blockquote>
<p><img src="https://microsoft.github.io/vscode-remote-release/images/remote-wsl-open-code.gif" alt="demo"></p>
]]></content>
      <categories>
        <category>Linux种种</category>
      </categories>
      <tags>
        <tag>wsl</tag>
      </tags>
  </entry>
  <entry>
    <title>多线程下载器 axel</title>
    <url>/Linux%E7%A7%8D%E7%A7%8D/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8B%E8%BD%BD%E5%99%A8axel.html</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Linux种种</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>axel</tag>
      </tags>
  </entry>
  <entry>
    <title>linux 挂载硬盘过程</title>
    <url>/Linux%E7%A7%8D%E7%A7%8D/%E6%8C%82%E8%BD%BD%E7%A1%AC%E7%9B%98%E8%BF%87%E7%A8%8B.html</url>
    <content><![CDATA[<p>从之前写的飞书文档直接复制粘贴过来的，懒得搞图片了。  </p>
<h1 id="0-准备"><a href="#0-准备" class="headerlink" title="0 准备"></a>0 准备</h1><p>先放个vim教程在这里: <a href="https://www.runoob.com/linux/linux-vim.html">https://www.runoob.com/linux/linux-vim.html</a><br>再放个ext4格式百科在这里：<a href="https://baike.baidu.com/item/Ext4/1858450">https://baike.baidu.com/item/Ext4/1858450</a></p>
<h1 id="1-查看系统硬盘情况"><a href="#1-查看系统硬盘情况" class="headerlink" title="1 查看系统硬盘情况"></a>1 查看系统硬盘情况</h1><p>使用 <code>lsblk</code> 命令查看系统目前连接到的硬盘信息 </p>
<h1 id="2-在对应硬盘上创建分区"><a href="#2-在对应硬盘上创建分区" class="headerlink" title="2 在对应硬盘上创建分区"></a>2 在对应硬盘上创建分区</h1><h2 id="2-1-创建分区"><a href="#2-1-创建分区" class="headerlink" title="2.1 创建分区"></a>2.1 创建分区</h2><p>在新硬盘上创建分区，选项依次为</p>
<ol>
<li>n 新建一个分区</li>
<li>p 分区类型为主分区</li>
<li>回车 * 3， 默认值，分区大小为整个磁盘</li>
<li>w 保存退出</li>
</ol>
<h2 id="2-2-将-ext4-文件系统写入磁盘"><a href="#2-2-将-ext4-文件系统写入磁盘" class="headerlink" title="2.2 将 ext4 文件系统写入磁盘"></a>2.2 将 ext4 文件系统写入磁盘</h2><p><code>mkfs.ext4 /dev/vdb</code></p>
<h2 id="2-3-挂载硬盘"><a href="#2-3-挂载硬盘" class="headerlink" title="2.3 挂载硬盘"></a>2.3 挂载硬盘</h2><p><code>ls</code> 命令查看对应目录下的文件<br><code>/mnt</code> 目录为数据盘待挂载目录<br><code>mkdir -p</code> 在 /mnt 目录创建对应挂载目录<br><code>mount</code> 命令挂载硬盘<br><code>df -h</code> 命令可以查看到对应的硬盘挂载到了 /mnt/data 上</p>
<h1 id="3-修改引导区文件使开机自动挂载"><a href="#3-修改引导区文件使开机自动挂载" class="headerlink" title="3 修改引导区文件使开机自动挂载"></a>3 修改引导区文件使开机自动挂载</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">blkid <span class="comment"># 查看对应 uuid</span></span><br><span class="line">vim /etc/fstab 将 uuid 按照启动盘的格式写入引导区</span><br></pre></td></tr></table></figure>
<h1 id="4-解除挂载"><a href="#4-解除挂载" class="headerlink" title="4 解除挂载"></a>4 解除挂载</h1><p><code>umount /mnt/data1</code></p>
]]></content>
      <categories>
        <category>Linux种种</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>硬盘管理</tag>
        <tag>系统运维</tag>
      </tags>
  </entry>
  <entry>
    <title>gitlab 笔记</title>
    <url>/git/gitlab.html</url>
    <content><![CDATA[<h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0 前言"></a>0 前言</h1><p>会一点Git和Github基础<br>但是 gitlab 和 github 构建思路似乎不太一样<br>gitlab 提供 ci 支持  </p>
<p><strong>先放几个文档在这里：</strong></p>
<blockquote>
<p><a href="https://www.yiibai.com/gitlab">易百教程 gitlab</a><br><a href="https://docs.gitlab.cn/ee/">极狐GitLab 文档</a><br><a href="https://zhuanlan.zhihu.com/p/420977457">GitLab CI/CD 自动化部署入门 ，手把手教你搭建 —— 从安装 Linux 到 GitLab 自动化部署（非常详细）</a><br><a href="https://www.cnblogs.com/hallejuayahaha/p/13079698.html">gitlab CI/CD 实战</a></p>
</blockquote>
<h1 id="1-一些基础概念的解释"><a href="#1-一些基础概念的解释" class="headerlink" title="1 一些基础概念的解释"></a>1 一些基础概念的解释</h1><h2 id="1-1-Gitlab-Runner"><a href="#1-1-Gitlab-Runner" class="headerlink" title="1.1 Gitlab Runner"></a>1.1 Gitlab Runner</h2><blockquote>
<p>GitLab Runner is an application that works with GitLab CI/CD to run jobs in a pipeline.<br>–<a href="https://docs.gitlab.com/runner/">Gitlab Runner</a>  </p>
</blockquote>
<p>看了几篇博客，大致上这个东西的作用就是将提交到仓库的代码自动部署到项目服务器上。  </p>
<pre class="mermaid">graph LR
    开发服务器 --gitpush--> gitlab服务器 --gitlab_runner自动化部署-->部署服务器
    gitlab服务器 -.-> .gitlab-ci.yml
    部署服务器 -.-> git&docker</pre>

<h2 id="1-2-CI-DI"><a href="#1-2-CI-DI" class="headerlink" title="1.2 CI/DI"></a>1.2 CI/DI</h2><h3 id="1-2-1-持续集成（Continuous-integration，-CI）"><a href="#1-2-1-持续集成（Continuous-integration，-CI）" class="headerlink" title="1.2.1 持续集成（Continuous integration， CI）"></a>1.2.1 持续集成（Continuous integration， CI）</h3><p>频繁地（一天多次）将代码集成到主干。将软件个人研发的部分向软件整体部分交付，频繁进行集成以便更快地发现其中的错误。</p>
<h3 id="1-2-2-持续部署-Continuous-deployment-DI"><a href="#1-2-2-持续部署-Continuous-deployment-DI" class="headerlink" title="1.2.2 持续部署 (Continuous deployment, DI)"></a>1.2.2 持续部署 (Continuous deployment, DI)</h3><p>代码通过评审以后，自动部署到生产环境。 持续部署的目标是，代码在任何时刻都是可部署的，可以进入生产阶段。 持续部署的前提是能自动化完成测试、构建、部署等步骤。</p>
<h1 id="2-Gitlab-CI-CD"><a href="#2-Gitlab-CI-CD" class="headerlink" title="2 Gitlab CI/CD"></a>2 Gitlab CI/CD</h1><p>git 基础语法和代码管理基础暂时跳过，那是另外的事情。  </p>
<h2 id="2-1-Gitlab-CI-CD-简介"><a href="#2-1-Gitlab-CI-CD-简介" class="headerlink" title="2.1 Gitlab CI/CD 简介"></a>2.1 Gitlab CI/CD 简介</h2><p>GitLab CI(持续集成)服务是GitLab的一部分，它负责管理项目和用户界面，并允许对每次提交进行单元测试，并在构建失败时显示警告消息。<br>GitLab CI(持续集成)服务是GitLab的一部分，每当开发人员将代码推送到应用程序时，它都会构建和测试软件。 GitLab CD(连续部署)是一项软件服务，它将生产中的每一个代码的变化放在每天生产的部署中。</p>
<h1 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h1><p>找个实际项目实战一下</p>
<ul>
<li>epp-cloud  dashboard和门户服务端</li>
<li>epp-framework cs  </li>
<li>epp-frontend-admin 内容管理前端</li>
<li>epp-frontend-kb 前端知识库  </li>
<li>widget-cli  </li>
<li>widget-framwork dashboard和门户前端  </li>
<li>widgets-project 所有元部件的仓库  </li>
</ul>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git ogitlab</tag>
      </tags>
  </entry>
  <entry>
    <title>git 琐碎知识整理</title>
    <url>/git/git%E7%90%90%E7%A2%8E%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86.html</url>
    <content><![CDATA[<h1 id="0"><a href="#0" class="headerlink" title="0"></a>0</h1><p>啊，又开一个新坑。 好消息是反正我也习惯不填。  </p>
<h1 id="1-CRLF-和-LF-自动切换设置"><a href="#1-CRLF-和-LF-自动切换设置" class="headerlink" title="1 CRLF 和 LF 自动切换设置"></a>1 CRLF 和 LF 自动切换设置</h1><p><code>LF</code>是<code>linux</code>和<code>Unix</code>系统的换行符，<code>CRLF</code> 是window 系统的换行符  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config core.autocrlf <span class="literal">false</span> <span class="comment"># 为当前工程取消自动转换</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>jdk12 更新</title>
    <url>/jdk%E5%90%84%E7%89%88%E6%9C%AC%E4%B8%BB%E8%A6%81%E6%9B%B4%E6%96%B0/jdk12.html</url>
    <content><![CDATA[<p>发布时间: 2019/3/19<br>非 LTS </p>
<blockquote>
<p><a href="http://openjdk.java.net/jeps/346">http://openjdk.java.net/jeps/346</a></p>
</blockquote>
<ol>
<li><p>189: Shenandoah: 一种低暂停时间的GC算法（实验）<br>添加一个名为 Shenandoah 的新垃圾收集 (GC) 算法，该算法通过与正在运行的 Java 线程同时进行回收工作来减少 GC 暂停时间。 Shenandoah 的暂停时间与堆大小无关，这意味着无论堆是200MB还是200GB都将拥有相同的相同暂停时间。</p>
</li>
<li><p>230: 微基准套件<br>在 JDK 源代码中添加一套基本的微基准测试，让开发人员可以轻松运行现有的微基准测试并创建新的微基准测试。</p>
</li>
<li><p>325: Switch 表达式（预览）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> days)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 声明变量score，并为其赋值为&#x27;C&#x27;</span></span><br><span class="line">  <span class="keyword">var</span> score = <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">  <span class="comment">// 可以将 switch 作为表达式处理</span></span><br><span class="line">  String result = <span class="keyword">switch</span> (score) &#123;</span><br><span class="line">      <span class="comment">// 不在需要 break</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span> -&gt; <span class="string">&quot;上等&quot;</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;C&#x27;</span> -&gt; <span class="string">&quot;中等&quot;</span>;</span><br><span class="line">      <span class="comment">// 匹配多个值</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span> -&gt; <span class="string">&quot;下等&quot;</span>;</span><br><span class="line">      <span class="keyword">default</span> -&gt; &#123;</span><br><span class="line">          <span class="keyword">if</span> (score &gt; <span class="number">100</span>) &#123;</span><br><span class="line">            yield <span class="string">&quot;数据不能超过100&quot;</span>;</span><br><span class="line">            <span class="comment">// 代码块时使用 yield 返回值</span></span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            yield score + <span class="string">&quot;此分数低于0分&quot;</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>334: JVM 常量 API<br>引入一个 API 来模拟关键类文件和运行时组件的名义描述，特别是可从常量池加载的常量。</p>
</li>
<li><p>340: 一个 AArch64 端口，而不是两个<br>删除所有与 arm64 端口相关的源，同时保留32位 ARM 端口和 64位 aarch64 端口。</p>
</li>
<li><p>341: 默认CDS 归档<br>增强 JDK 构建过程以在64位平台上使用默认类列表生成类数据共享 (CDS) 归档。</p>
</li>
<li><p>344: G1 的可中止混合集合<br>如果 G1 混合收集可能超过暂停目标，则使它们可中止。</p>
</li>
<li><p>346：立即从 G1 返回未使用的已提交内存<br>增强G1垃圾收集器，以便在空闲时自动将Java堆内存返回给操作系统。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>jdk各版本主要更新</category>
      </categories>
  </entry>
  <entry>
    <title>jdk13 更新</title>
    <url>/jdk%E5%90%84%E7%89%88%E6%9C%AC%E4%B8%BB%E8%A6%81%E6%9B%B4%E6%96%B0/jdk13.html</url>
    <content><![CDATA[<p>发布时间：2019/09/17</p>
<blockquote>
<p><a href="https://openjdk.java.net/projects/jdk/13/">https://openjdk.java.net/projects/jdk/13/</a></p>
</blockquote>
<ol>
<li>350: 动态CDS归档。<br>扩展应用程序类 - 数据共享( application class-data sharing)，以允许在Java应用程序执行结束时动态归档类。 归档类将包括默认的基础层CDS存档中不存在的所有已加载的应用程序类和库类。</li>
<li>351: ZGC(一种垃圾回收算法)<br>增强ZGC以将未使用的堆内存返回给操作系统。</li>
<li>353: 重新实现旧版套接字API<br>维护和调试的更简单，新代码替换java.net.Socket和java.net.ServerSocket API的底层实现。 新的实现很容易适应用户模式线程threads。</li>
<li>354: Switch 表达式(预览)  </li>
<li>355: 文本块 (预览)</li>
</ol>
]]></content>
      <categories>
        <category>jdk各版本主要更新</category>
      </categories>
  </entry>
  <entry>
    <title>jdk14 更新</title>
    <url>/jdk%E5%90%84%E7%89%88%E6%9C%AC%E4%B8%BB%E8%A6%81%E6%9B%B4%E6%96%B0/jdk14.html</url>
    <content><![CDATA[<ol>
<li><p>305: instanceof 模式匹配</p>
</li>
<li><p>343：Java打包工具（孵化）<br>这个JEP的目标是创建一个简单的Java打包工具jpackage。相对于第三方工具，jpackage只适用于比较简单的场景，不过对很多应用来说就已经足够好了。</p>
<blockquote>
<p><a href="https://docs.oracle.com/en/java/javase/15/docs/specs/man/jpackage.html">https://docs.oracle.com/en/java/javase/15/docs/specs/man/jpackage.html</a>  </p>
</blockquote>
</li>
<li><p>349：JRF事件流<br>JDK11中的JEP 328增加了Java Flight Recorder来记录各种事件。JEP 328中JFR的使用并不灵活。需要启动JFR之后，通过jcmd或JMX来保存事件到文件，再通过工具来分析保存的文件。该JEP提供了一种使用事件流的方式来处理事件。应用只需要注册处理器到事件流上。当事件发生时，处理器会被调用。</p>
</li>
<li><p>354：G1支持NUMA<br>该JEP优化了G1在使用NUMA（non-uniform memory access）时的内存分配。与硬件相关，不深入讨论了。</p>
</li>
<li><p>358：更有价值的NullPointerException<br>NPE 日志带了更多信息，嗯。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> java.lang.NullPointerException: Cannot invoke <span class="string">&quot;io.vividcode.javafeatures.NPE$A.doSomething()&quot;</span> because <span class="string">&quot;&lt;local1&gt;.a&quot;</span> is <span class="keyword">null</span></span><br><span class="line">        at io.vividcode.javafeatures.NPE.main(NPE.java:<span class="number">14</span>)</span><br></pre></td></tr></table></figure></li>
<li><p>359：记录类型（预览）<br>记录类型的作用类似于Kotlin中的数据类（data class)和Scala中的case class。记录类型的作用是作为不可变数据的封装。类似于枚举类型，记录类型是一种形式受限的类。一个记录类型由名称和状态描述两部分组成。状态描述声明了记录中包含的组件。  </p>
</li>
<li><p>361: switch 表达式（标准）  </p>
</li>
</ol>
<ul>
<li>从Java 5+开始，Java的switch语句可使用枚举了。</li>
<li>从Java 7+开始，Java的switch语句支持使用String类型的变量和表达式了。</li>
<li>从Java 11+开始，Java的switch语句会自动对省略break导致的贯穿提示警告（以前需要使用-X:fallthrough选项才能显示出来) 。<br>但从JDK12开始，Java的switch语句有了很大程度的增强。</li>
<li>JDK 14的该JEP是从JEP 325和JEP 354演变而来的。但是，此JEP 361 Switch表达式 (标准)是独立的，并且不依赖于这两个JEP。  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> days)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 声明变量score，并为其赋值为&#x27;C&#x27;</span></span><br><span class="line">  <span class="keyword">var</span> score = <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">  <span class="comment">// 可以将 switch 作为表达式处理</span></span><br><span class="line">  String result = <span class="keyword">switch</span> (score) &#123;</span><br><span class="line">      <span class="comment">// 不在需要 break</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span> -&gt; <span class="string">&quot;上等&quot;</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;C&#x27;</span> -&gt; <span class="string">&quot;中等&quot;</span>;</span><br><span class="line">      <span class="comment">// 匹配多个值</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span> -&gt; <span class="string">&quot;下等&quot;</span>;</span><br><span class="line">      <span class="keyword">default</span> -&gt; &#123;</span><br><span class="line">          <span class="keyword">if</span> (score &gt; <span class="number">100</span>) &#123;</span><br><span class="line">            yield <span class="string">&quot;数据不能超过100&quot;</span>;</span><br><span class="line">            <span class="comment">// 代码块时使用 yield 返回值</span></span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            yield score + <span class="string">&quot;此分数低于0分&quot;</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="8">
<li><p>362： 废弃Solaris和SPARC移植<br>该JEP把OpenJDK在Solaris/SPARC、Solaris/x64和Linux/SPARC平台上的移植声明为废弃的，并在以后版本移除。<br>JEP</p>
</li>
<li><p>363：删除CMS垃圾回收器<br>Concurrent Mark Sweep（CMS）垃圾回收器在JDK 9中被声明为废弃的。在JDK 14中，CMS被移除。</p>
</li>
<li><p>364：ZGC的macOS支持<br>将ZGC移植到macOS平台。</p>
</li>
<li><p>365：ZGC的Windows支持<br>将ZGC移植到Windows平台。</p>
</li>
<li><p>366：废弃ParallelScavenge + SerialOld的GC组合<br>使用ParallelScavenge加上SerialOld的GC组合已经被声明为废弃的。</p>
</li>
<li><p>367：删除Pack200工具和API<br>Pack200工具和API在Java 11中被声明为废弃的，在JDK 14中被移除。</p>
</li>
<li><p>368: 文本块（预览）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str = <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">select</span></span><br><span class="line"><span class="string">    *</span></span><br><span class="line"><span class="string">from</span></span><br><span class="line"><span class="string">    xx_table</span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>jdk各版本主要更新</category>
      </categories>
  </entry>
  <entry>
    <title>jdk15 更新</title>
    <url>/jdk%E5%90%84%E7%89%88%E6%9C%AC%E4%B8%BB%E8%A6%81%E6%9B%B4%E6%96%B0/jdk15.html</url>
    <content><![CDATA[<p>发布时间：2020/09/15</p>
<ol>
<li>JEP 339:  EdDSA 数字签名算法<br>新加入 Edwards-Curve 数字签名算法（EdDSA）实现加密签名。在许多其它加密库（如 OpenSSL 和 BoringSSL）中得到支持。与 JDK 中的现有签名方案相比，EdDSA 具有更高的安全性和性能。</li>
<li>JEP 360: 密封类（预览）<br>限定超类范围，有了这个特性，意味着以后不是你想继承就继承，想实现就实现了，你得经过允许才行。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> sealed <span class="class"><span class="keyword">class</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">    <span class="title">permits</span> <span class="title">ZhangSan</span>, <span class="title">LiSi</span>, <span class="title">ZhaoLiu</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>JEP 371: 隐藏类  <blockquote>
<p><a href="https://openjdk.java.net/jeps/371">https://openjdk.java.net/jeps/371</a></p>
</blockquote>
</li>
</ol>
<p>（为框架准备的，没搞明白对客户端程序员的影响）<br>此功能可帮助需要在运行时生成类的框架。框架生成类需要动态扩展其行为，但是又希望限制对这些类的访问。隐藏类很有用，因为它们只能通过反射访问，而不能从普通字节码访问。此外，隐藏类可以独立于其他类加载，这可以减少框架的内存占用。</p>
<ol start="4">
<li>JEP 372: 移除了 Nashorn JavaScript 脚本引擎</li>
<li>JEP 373: 重新实现 DatagramSocket</li>
<li>JEP 374: 准备禁用和废除偏向锁</li>
<li>JEP 375: instanceof 模式匹配（第二次预览）  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>( o <span class="keyword">instanceof</span> String)&#123;</span><br><span class="line">    <span class="comment">// 无需再进行向下转型</span></span><br><span class="line">    System.out.println(o)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>JEP 377: ZGC 垃圾回收器转正<br>ZGC是一个可伸缩、低延迟的垃圾回收器。ZGC 已由JEP 333集成到JDK 11 中，其目标是通过减少 GC 停顿时间来提高性能。借助 JEP 377，JDK 15 将 ZGC 垃圾收集器从预览特性变更为正式特性。</li>
<li>JEP 378: 文本块转正<br>在 JDK13 中作为预览特性进行了添加，然后又在 JDK14 中再次预览，在 JDK 15 中转正。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String text = <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">select</span></span><br><span class="line"><span class="string">    *</span></span><br><span class="line"><span class="string">from</span></span><br><span class="line"><span class="string">    aaa</span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure></li>
<li>JEP 379: Shenandoah 垃圾回收算法转正<br>Shenandoah 垃圾回收从实验特性变为产品特性。这是一个从 JDK12 引入的回收算法，该算法通过与正在运行的 Java 线程同时进行疏散工作来减少 GC 暂停时间。Shenandoah 的暂停时间与堆大小无关，无论堆栈是 200 MB 还是 200 GB，都具有相同的一致暂停时间。</li>
<li>JEP 381: 移除了 Solaris 和 SPARC 端口<br>移除了 Solaris/SPARC、Solaris/x64 和 Linux/SPARC 端口的源代码及构建支持。</li>
<li>JEP 383: 外部储存访问 API（第二次孵化）<br>目的是引入一个 API，以允许 Java 程序安全有效地访问 Java 堆之外的外部内存。这同样是 Java 14 的一个预览特性。</li>
<li>JEP 384: 记录类（第二次预览）<br>使用 Record 可以更方便的创建一个常量类。</li>
<li>JEP 385: 废除 RMI 激活，以便在将来进行删除。<br>需要说明的是，RMI 激活是 RMI 中一个过时的组件，自 JDK8 以来一直是可选的。</li>
</ol>
]]></content>
      <categories>
        <category>jdk各版本主要更新</category>
      </categories>
  </entry>
  <entry>
    <title>jdk16 更新</title>
    <url>/jdk%E5%90%84%E7%89%88%E6%9C%AC%E4%B8%BB%E8%A6%81%E6%9B%B4%E6%96%B0/jdk16.html</url>
    <content><![CDATA[<p>发布时间：2021/03/16<br>非长期支持版本，六个月支持</p>
<ol>
<li>JEP 394: 适用于 instanceof 的模式匹配<br> 模式匹配（Pattern Matching）最早在 Java 14 中作为预览特性引入，在 Java 15 中还是预览特性。模式匹配通过对 instacneof 运算符进行模式匹配来增强 Java 编程语言。<br> 模式匹配使程序中的通用逻辑（即从对象中有条件地提取组件）得以更简洁、更安全地表示。</li>
<li>JEP 395: 记录<br> 记录（Records）在 Java 14 和 Java 15 中作为预览特性引入。它提供了一种紧凑的语法来声明类，这些类是浅层不可变数据的透明持有者。这将大大简化这些类，并提高代码的可读性和可维护性。</li>
<li>JEP 376: ZGC 并发线程处理<br> JEP 376 将 ZGC 线程栈处理从安全点转移到一个并发阶段，甚至在大堆上也允许在毫秒内暂停 GC 安全点。消除 ZGC 垃圾收集器中最后一个延迟源可以极大地提高应用程序的性能和效率。</li>
<li>JEP 387: 弹性元空间<br> 此特性可将未使用的 HotSpot 类元数据（即元空间，metaspace）内存更快速地返回到操作系统，从而减少元空间的占用空间。具有大量类加载和卸载活动的应用程序可能会占用大量未使用的空间。新方案将元空间内存按较小的块分配，它将未使用的元空间内存返回给操作系统来提高弹性，从而提高应用程序性能并降低内存占用。  </li>
<li>JEP 380: Unix-Domain 套接字通道<br> Unix-domain 套接字一直是大多数 Unix 平台的一个特性，现在在 Windows 10 和 Windows Server 2019 也提供了支持。此特性为 java.nio.channels 包的套接字通道和服务器套接字通道 API 添加了 Unix-domain（AF_UNIX）套接字支持。它扩展了继承的通道机制以支持 Unix-domain 套接字通道和服务器套接字通道。Unix-domain 套接字用于同一主机上的进程间通信（IPC）。它们在很大程度上类似于 TCP/IP，区别在于套接字是通过文件系统路径名而不是 Internet 协议（IP）地址和端口号寻址的。对于本地进程间通信，Unix-domain 套接字比 TCP/IP 环回连接更安全、更有效。  </li>
<li>JEP 392: 打包工具<br> 此特性最初是作为 Java 14 中的一个孵化器模块引入的，该工具允许打包自包含的 Java 应用程序。它支持原生打包格式，为最终用户提供自然的安装体验，这些格式包括 Windows 上的 msi 和 exe、macOS 上的 pkg 和 dmg，还有 Linux 上的 deb 和 rpm。它还允许在打包时指定启动时参数，并且可以从命令行直接调用，也可以通过 ToolProvider API 以编程方式调用。注意 jpackage 模块名称从 jdk.incubator.jpackage 更改为 jdk.jpackage。这将改善最终用户在安装应用程序时的体验，并简化了“应用商店”模型的部署。</li>
<li>JEP 390: 对基于值的类发出警告<br> 此特性将原始包装器类（java.lang.Integer、java.lang.Double 等）指定为基于值的（类似于 java.util.Optional 和 java.time.LocalDateTime），并在其构造器中添加 forRemoval（自 JDK 9 开始被弃用），这样会提示新的警告。在 Java 平台中尝试在任何基于值的类的实例上进行不正确的同步时，它会发出警告。<br> 许多流行的开源项目已经在其源中删除了包装构造器调用来响应 Java 9 的弃用警告，并且鉴于“弃用移除”警告的紧迫性，我们可以期望更多开源项目跟上这一步伐。  </li>
<li>JEP 396: 默认强封装 JDK 内部元素<br> 此特性会默认强封装 JDK 的所有内部元素，但关键内部 API（例如 sun.misc.Unsafe）除外。默认情况下，使用早期版本成功编译的访问 JDK 内部 API 的代码可能不再起作用。鼓励开发人员从使用内部元素迁移到使用标准 API 的方法上，以便他们及其用户都可以无缝升级到将来的 Java 版本。强封装由 JDK 9 的启动器选项–illegal-access 控制，到 JDK 15 默认改为 warning，从 JDK 16 开始默认为 deny。（目前）仍然可以使用单个命令行选项放宽对所有软件包的封装，将来只有使用–add-opens 打开特定的软件包才行。  </li>
<li>JEP 338: 向量 API（孵化器）<br> 该孵化器 API 提供了一个 API 的初始迭代以表达一些向量计算，这些计算在运行时可靠地编译为支持的 CPU 架构上的最佳向量硬件指令，从而获得优于同等标量计算的性能，充分利用单指令多数据（SIMD）技术（大多数现代 CPU 上都可以使用的一种指令）。尽管 HotSpot 支持自动向量化，但是可转换的标量操作集有限且易受代码更改的影响。该 API 将使开发人员能够轻松地用 Java 编写可移植的高性能向量算法。  </li>
<li>JEP 389: 外部链接器 API（孵化器）<br>该孵化器 API 提供了静态类型、纯 Java 访问原生代码的特性，该 API 将大大简化绑定原生库的原本复杂且容易出错的过程。Java 1.1 就已通过 Java 原生接口（JNI）支持了原生方法调用，但并不好用。Java 开发人员应该能够为特定任务绑定特定的原生库。它还提供了外来函数支持，而无需任何中间的 JNI 粘合代码。  </li>
<li>JEP 393: 外部存储器访问 API（第 3 个孵化器）<br>在 Java 14 和 Java 15 中作为孵化器 API 引入的这个 API 使 Java 程序能够安全有效地对各种外部存储器（例如本机存储器、持久性存储器、托管堆存储器等）进行操作。它提供了外部链接器 API 的基础。  </li>
<li>JEP 397: 密封类（第二预览）<br>这个预览特性可以限制哪些类或接口可以扩展或实现它们；它允许类或接口的作者控制负责实现它的代码；它还提供了比访问修饰符更具声明性的方式来限制对超类的使用。它还通过对模式进行详尽的分析来支持模式匹配的未来发展。  </li>
<li>JEP 347: 启用 C++14 语言特性（在 JDK 源代码中）<br>它允许在 JDK C++ 源代码中使用 C++14 语言特性，并提供在 HotSpot 代码中可以使用哪些特性的具体指导。在 JDK 15 中，JDK 中 C++ 代码使用的语言特性仅限于 C++98/03 语言标准。它要求更新各种平台编译器的最低可接受版本</li>
<li>JEP 357: 从 Mercurial 迁移到 Git；JEP 369，迁移到 GitHub<br>这些 JEP 将 OpenJDK 社区的源代码存储库从 Mercurial（hg）迁移到 Git，并将它们托管在 GitHub 上以供 JDK 11 及更高版本使用，其中包括将 jcheck、webrev 和 defpath 工具等工具更新到 Git。Git 减小了元数据的大小（约 1/4），可节省本地磁盘空间并减少克隆时间。与 Mercurial 相比，现代工具链可以更好地与 Git 集成。  Open JDK Git 存储库现在位于 <a href="https://github.com/openjdk%E3%80%82">https://github.com/openjdk。</a><br>跟 <code>kotlin</code> 一毛一样</li>
<li>JEP 386: AlpineLinux 移植；JEP 388，Windows/AArch64 移植<br>这些 JEP 的重点不是移植工作本身，而是将它们集成到 JDK 主线存储库中；JEP 386 将 JDK 移植到 Alpine Linux 和其他使用 musl 作为 x64 上主要 C 库的发行版上。此外，JEP 388 将 JDK 移植到 Windows AArch64（ARM64）。</li>
</ol>
]]></content>
      <categories>
        <category>jdk各版本主要更新</category>
      </categories>
  </entry>
  <entry>
    <title>jdk17 更新</title>
    <url>/jdk%E5%90%84%E7%89%88%E6%9C%AC%E4%B8%BB%E8%A6%81%E6%9B%B4%E6%96%B0/jdk17.html</url>
    <content><![CDATA[<p>发布时间：2021/9/13<br>LTS 版本，支持至 2029年9月  </p>
<ol>
<li>JEP 306: Restore Always-Strict Floating-Point Semantics<br> 恢复始终执行严格模式 (Always-Strict) 的浮点定义</li>
<li>JEP 356: Enhanced Pseudo-Random Number Generators<br> 添加增强的伪随机数生成器</li>
<li>JEP 382: New macOS Rendering Pipeline<br> 为 macOS 引入新渲染管道</li>
<li>JEP 391: macOS/AArch64 Port<br> 支持将 JDK 移植到 macOS/AArch64 架构</li>
<li>JEP 398: Deprecate the Applet API for Removal<br> 弃用待移除的 Applet API</li>
<li>JEP 403: Strongly Encapsulate JDK Internals<br> 强封装的 JDK 内部 API，默认对 JDK 内部进行强封装</li>
<li>JEP 406: Pattern Matching for switch (Preview)<br> switch 模式匹配进入预览 (Preview) 阶段</li>
<li>JEP 407: Remove RMI Activation<br> 移除 RMI（远程方法调用）激活机制</li>
<li>JEP 409: Sealed Classes<br> 密封类和接口正式可用，用于限制哪些类和接口可以继承或实现它们。</li>
<li>JEP 410: Remove the Experimental AOT and JIT Compiler<br>移除实验性的 AOT 和 JIT 编译器</li>
<li>JEP 411: Deprecate the Security Manager for Removal<br>弃用待移除的安全管理器 (Security Manager)</li>
<li>JEP 412: Foreign Function &amp; Memory API (Incubator)<br>API 进入孵化阶段，Java 应用程序通过该 API 能够与 Java 运行时之外的代码和数据进行互操作。</li>
<li>JEP 414: Vector API (Second Incubator)<br>在 JDK/Java 17 中，Vector API 已进入孵化的第二阶段，Vector API 用于表达可在支持的 CPU 架构上编译为最佳矢量硬件指令的矢量计算，以实现优于等效标量计算的性能。</li>
<li>JEP 415: Context-Specific Deserialization Filters<br>增加面向特定上下文的反序列化过滤器，此特性允许应用程序通过 JVM 的过滤器工厂配置特定于上下文和动态选择的反序列化过滤器。</li>
</ol>
<h3 id="FREE-JAVA-LICENSE"><a href="#FREE-JAVA-LICENSE" class="headerlink" title="FREE JAVA LICENSE"></a>FREE JAVA LICENSE</h3><p>既<code>oracle jdk9</code>收费后，<code>jdk17</code> 开始将回归免费。  </p>
<blockquote>
<p>原文链接： <a href="https://blogs.oracle.com/java/post/free-java-license">https://blogs.oracle.com/java/post/free-java-license</a></p>
</blockquote>
<p>Free Java License 摘要</p>
<ul>
<li>  为 Oracle JDK 免费提供所有季度的安全更新，包括商业和生产用途。</li>
<li>  新的许可证属于“Oracle 免费条款和条件”(NFTC) 许可证。此许可证允许所有用户免费使用，甚至可以用于商业和生产用途。再分发同样不收取费用。</li>
<li>  开发者和组织现可轻松下载、使用、共享和重新分发 Oracle JDK。</li>
<li>  Oracle 将从 Oracle JDK 17 开始提供这些免费版本和更新，并在下一个 LTS 版本发布之后继续提供整整一年。注意以前的版本不受此更改的影响。</li>
<li>  Oracle 将继续按照自 Java 9 以来的相同版本和时间表提供 GPL 下的 Oracle OpenJDK 版本。</li>
</ul>
<h3 id="Springframework6-和-SpringBoot3-都将基于-JAVA17"><a href="#Springframework6-和-SpringBoot3-都将基于-JAVA17" class="headerlink" title="Springframework6 和 SpringBoot3 都将基于 JAVA17"></a>Springframework6 和 SpringBoot3 都将基于 JAVA17</h3>]]></content>
      <categories>
        <category>jdk各版本主要更新</category>
      </categories>
  </entry>
  <entry>
    <title>jdk18 更新</title>
    <url>/jdk%E5%90%84%E7%89%88%E6%9C%AC%E4%B8%BB%E8%A6%81%E6%9B%B4%E6%96%B0/jdk18.html</url>
    <content><![CDATA[<p>稳定版 JDK18 发布时间： 2022/03/22<br>非长期支持版本，六个月支持</p>
<ol>
<li>JEP 400：指定 UTF-8 作为标准 Java API 的默认字符集。<br>通过此更改，依赖于默认字符集的 API 将在所有实现、操作系统、区域设置和配置中保持一致。</li>
<li>JEP 408：引入一个简单的 Web 服务器。<br>提供一个命令行工具，来启动一个只提供静态文件的最小网络服务器，它没有 CGI 或类似 servlet 的功能可用。该工具用于原型设计、临时编码和测试目的，尤其是在教学环境中。</li>
<li>JEP 413：支持在 Java API 文档中加入代码片段。<br>为 JavaDoc 的 Standard Doclet 引入一个 @snippet 标记，以简化 API 文档中嵌入示例源代码的难度。</li>
<li>JEP 416 ：用方法句柄重新实现核心反射。<br>在 java.lang.invoke 的方法句柄之上，重构 java.lang.reflect 的方法、构造函数和字段，使用方法句柄处理反射的底层机制将减少 java.lang.reflect 和 java.lang.invoke 两者的 API 维护和开发成本。</li>
<li>JEP 417：Vector API（第三孵化器）。<br>引入一个 API 来表达向量计算，这些计算在运行时可以编译为支持的 CPU 架构上的最佳向量指令，从而实现优于等效标量计算的性能。</li>
<li>JEP 418：互联网地址解析 SPI。<br>定义用于主机名和地址解析的服务提供者接口 (SPI)，以便java.net.InetAddress可以使用平台内置解析器以外的解析器。</li>
<li>JEP 419：外部函数和内存 API（第二次孵化）<br>引入了一个新 API, Java 程序可以通过它与 Java 运行时之外的代码和数据进行互操作。通过有效地调用外部函数(即 JVM 外的代码)，并安全地访问外部内存(即不由 JVM 管理的内存)，外部函数和内存 API 使 Java 程序能够调用本机库并处理本机数据，而不具有 JNI 的脆弱性和危险。</li>
<li>JEP 420： switch 模式匹配表达式（第二次预览）。<br>使用 switch 表达式和语句的模式匹配以及对模式语言的扩展来增强 Java 编程语言。将模式匹配扩展到 switch 允许针对多个模式测试表达式，每个模式都有特定的操作，可以简洁安全地表达复杂的面向数据的查询。</li>
<li>JEP 421：弃用 Finalization 功能。<br>Java 1.0 中引入的 Finalization 旨在帮助避免资源泄漏问题，然而这个功能存在延迟不可预测、行为不受约束，以及线程无法指定等缺陷，导致其安全性、性能、可靠性和可维护性方面都存在问题，因此将其弃用，用户可选择迁移到其他资源管理技术，例如try-with-resources 语句和清洁器。</li>
</ol>
]]></content>
      <categories>
        <category>jdk各版本主要更新</category>
      </categories>
  </entry>
  <entry>
    <title>112. Path Sum</title>
    <url>/leetcode/112-Path-Sum.html</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasPathSum</span><span class="params">(TreeNode root, <span class="keyword">int</span> targetSum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(targetSum == root.val &amp;&amp; root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> hasPathSum(root.left, targetSum - root.val) || hasPathSum(root.right, targetSum - root.val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>dfs</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/jdk%E5%90%84%E7%89%88%E6%9C%AC%E4%B8%BB%E8%A6%81%E6%9B%B4%E6%96%B0/%E5%90%84%E7%89%88%E6%9C%AC%E5%BC%95%E5%85%A5%E7%9A%84%E6%96%B0%E8%AF%AD%E6%B3%95.html</url>
    <content><![CDATA[<h2 id="jdk12"><a href="#jdk12" class="headerlink" title="jdk12"></a>jdk12</h2><h3 id="switch-表达式"><a href="#switch-表达式" class="headerlink" title="switch 表达式"></a>switch 表达式</h3><ul>
<li>从Java 5+开始，Java的switch语句可使用枚举了。</li>
<li>从Java 7+开始，Java的switch语句支持使用String类型的变量和表达式了。</li>
<li>从Java 11+开始，Java的switch语句会自动对省略break导致的贯穿提示警告（以前需要使用-X:fallthrough选项才能显示出来) 。<br>但从JDK12开始，Java的switch语句有了很大程度的增强。</li>
<li>JDK 14的JEP是从JEP 325和JEP 354演变而来的。但是，此JEP 361 Switch表达式 (标准)是独立的，并且不依赖于这两个JEP。  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> days)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 声明变量score，并为其赋值为&#x27;C&#x27;</span></span><br><span class="line">  <span class="keyword">var</span> score = <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">  <span class="comment">// 可以将 switch 作为表达式处理</span></span><br><span class="line">  String result = <span class="keyword">switch</span> (score) &#123;</span><br><span class="line">      <span class="comment">// 不在需要 break</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span> -&gt; <span class="string">&quot;上等&quot;</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;C&#x27;</span> -&gt; <span class="string">&quot;中等&quot;</span>;</span><br><span class="line">      <span class="comment">// 匹配多个值</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span> -&gt; <span class="string">&quot;下等&quot;</span>;</span><br><span class="line">      <span class="keyword">default</span> -&gt; &#123;</span><br><span class="line">          <span class="keyword">if</span> (score &gt; <span class="number">100</span>) &#123;</span><br><span class="line">            yield <span class="string">&quot;数据不能超过100&quot;</span>;</span><br><span class="line">            <span class="comment">// 代码块时使用 yield 返回值</span></span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            yield score + <span class="string">&quot;此分数低于0分&quot;</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  System.out.println(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="jdk13"><a href="#jdk13" class="headerlink" title="jdk13"></a>jdk13</h2><h3 id="文本块"><a href="#文本块" class="headerlink" title="文本块"></a>文本块</h3>方便输入多行文本<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String sql = <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">select</span></span><br><span class="line"><span class="string">    *</span></span><br><span class="line"><span class="string">from</span></span><br><span class="line"><span class="string">    table</span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="jdk14"><a href="#jdk14" class="headerlink" title="jdk14"></a>jdk14</h2><h3 id="记录（Records）"><a href="#记录（Records）" class="headerlink" title="记录（Records）"></a>记录（Records）</h3><p>感觉像 <code>kotlin</code> 里的 <code>data class</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 有 Record 之前</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">People</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        People people = (People) o;</span><br><span class="line">        <span class="keyword">return</span> age == people.age &amp;&amp;</span><br><span class="line">                Objects.equals(name, people.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(name, age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;People&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有 Record 之后</span></span><br><span class="line"><span class="comment">// 默认属性是 private final</span></span><br><span class="line"><span class="class"><span class="keyword">record</span> <span class="title">People</span><span class="params">(String name, <span class="keyword">int</span> age)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>限制:  </p>
<ol>
<li>records不能扩展任何类，并且不能声明私有字段以外的实例字段。声明的任何其他字段都必须是静态的。</li>
<li>records类都是隐含的final类，并且不能是抽象类。这些限制使得records的API仅由其状态描述定义，并且以后不能被其他类实现或继承。</li>
</ol>
<h3 id="适用于-instanceof-的模式匹配"><a href="#适用于-instanceof-的模式匹配" class="headerlink" title="适用于 instanceof 的模式匹配"></a>适用于 instanceof 的模式匹配</h3><p>跟 <code>kotlin</code> 一毛一样</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(str <span class="keyword">instanceof</span> String s)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;length is &quot;</span>+s.length());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="jdk15"><a href="#jdk15" class="headerlink" title="jdk15"></a>jdk15</h2><h3 id="Sealed-类"><a href="#Sealed-类" class="headerlink" title="Sealed 类"></a>Sealed 类</h3><p>密封类可以对继承或者实现它们的类进行限制。</p>
<p>比如抽象类 <code>Person</code> 只允许 <code>Employee</code> 和 <code>Manager</code> 继承。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> sealed <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">    <span class="title">permits</span> <span class="title">Employee</span>, <span class="title">Manager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>另外，任何扩展密封类的类本身都必须声明为 <code>sealed</code>、<code>non-sealed</code> 或 <code>final</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> non-sealed <span class="class"><span class="keyword">class</span> <span class="title">Manager</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="jdk17"><a href="#jdk17" class="headerlink" title="jdk17"></a>jdk17</h2><h3 id="switch-模式匹配表达式。"><a href="#switch-模式匹配表达式。" class="headerlink" title="switch 模式匹配表达式。"></a>switch 模式匹配表达式。</h3><p>使用 switch 表达式和语句的模式匹配以及对模式语言的扩展来增强 Java 编程语言。将模式匹配扩展到 switch 允许针对多个模式测试表达式，每个模式都有特定的操作，可以简洁安全地表达复杂的面向数据的查询。<br>    可以直接在 case 里写类型，自动完成向上转型，switch 表达式版本。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object o =...</span><br><span class="line"><span class="keyword">switch</span>(o)&#123;</span><br><span class="line">    <span class="keyword">case</span> Character c -&gt;&#123;</span><br><span class="line">        <span class="keyword">if</span> (c.charValue() == <span class="number">7</span>) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;Ding &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> Integer i -&gt; ...;</span><br><span class="line">    <span class="keyword">default</span> -&gt; ... ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="jdk18"><a href="#jdk18" class="headerlink" title="jdk18"></a>jdk18</h2><h3 id="支持在-Java-API-文档中加入代码片段。"><a href="#支持在-Java-API-文档中加入代码片段。" class="headerlink" title="支持在 Java API 文档中加入代码片段。"></a>支持在 Java API 文档中加入代码片段。</h3><p>为 JavaDoc 的 Standard Doclet 引入一个 @snippet 标记，以简化 API 文档中嵌入示例源代码的难度。</p>
<blockquote>
<p>jep 413: <a href="https://openjdk.java.net/jeps/413">https://openjdk.java.net/jeps/413</a></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@snippet</span> :</span></span><br><span class="line"><span class="comment"> *   public static void main(String... args) &#123;</span></span><br><span class="line"><span class="comment"> *       for (var arg : args) &#123;                 // <span class="doctag">@highlight</span> region regex = &quot;\barg\b&quot;</span></span><br><span class="line"><span class="comment"> *           if (!arg.isBlank()) &#123;</span></span><br><span class="line"><span class="comment"> *               System.out.println(arg);</span></span><br><span class="line"><span class="comment"> *           &#125;</span></span><br><span class="line"><span class="comment"> *       &#125;                                      // <span class="doctag">@end</span></span></span><br><span class="line"><span class="comment"> *   &#125;</span></span><br><span class="line"><span class="comment"> *   &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// This will appear in the generated documentation as:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> arg : args) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!arg.isBlank()) &#123;</span><br><span class="line">                System.out.println(arg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>jdk各版本主要更新</category>
      </categories>
  </entry>
  <entry>
    <title>1129. Shortest Path with Alternating Colors</title>
    <url>/leetcode/1129-Shortest-Path-with-Alternating-Colors.html</url>
    <content><![CDATA[<p>bfs 遍历即可，唯一需要注意的地方就是起始路径不仅可以是红，也可以是蓝。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] shortestAlternatingPaths(<span class="keyword">int</span> n, <span class="keyword">int</span>[][] redEdges, <span class="keyword">int</span>[][] blueEdges) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">int</span> level = <span class="number">0</span>;</span><br><span class="line">        Arrays.fill(res, -<span class="number">1</span>);</span><br><span class="line">        res[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">boolean</span>[][] visited = <span class="keyword">new</span> <span class="keyword">boolean</span>[n][<span class="number">2</span>];</span><br><span class="line">        visited[<span class="number">0</span>][<span class="number">0</span>] = <span class="keyword">true</span>; visited[<span class="number">0</span>][<span class="number">1</span>] = <span class="keyword">true</span>;</span><br><span class="line">        LinkedList&lt;<span class="keyword">int</span>[]&gt; que = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        que.add(<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">while</span>(que.size() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> size = que.size();</span><br><span class="line">            <span class="keyword">while</span>(size -- &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">int</span>[] cur = que.removeFirst();</span><br><span class="line">                <span class="keyword">if</span>(res[cur[<span class="number">0</span>]] == -<span class="number">1</span>) res[cur[<span class="number">0</span>]] = level;</span><br><span class="line">                <span class="keyword">if</span>(cur[<span class="number">1</span>] == <span class="number">0</span> || cur[<span class="number">1</span>] == <span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span>[] edge: redEdges)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(edge[<span class="number">0</span>]== cur[<span class="number">0</span>] &amp;&amp; !visited[edge[<span class="number">1</span>]][<span class="number">0</span>])&#123;</span><br><span class="line">                            visited[edge[<span class="number">1</span>]][<span class="number">0</span>] = <span class="keyword">true</span>;</span><br><span class="line">                            que.addLast(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;edge[<span class="number">1</span>], <span class="number">2</span>&#125;);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(cur[<span class="number">1</span>] == <span class="number">0</span> || cur[<span class="number">1</span>] == <span class="number">2</span>)&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span>[] edge: blueEdges)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(edge[<span class="number">0</span>]== cur[<span class="number">0</span>] &amp;&amp; !visited[edge[<span class="number">1</span>]][<span class="number">1</span>])&#123;</span><br><span class="line">                            visited[edge[<span class="number">1</span>]][<span class="number">1</span>] = <span class="keyword">true</span>;</span><br><span class="line">                            que.addLast(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;edge[<span class="number">1</span>], <span class="number">1</span>&#125;);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            level ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>bfs</tag>
      </tags>
  </entry>
  <entry>
    <title>119. Pascal&#39;s Triangle II</title>
    <url>/leetcode/119-Pascal&#39;s-Triangle-II.html</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">getRow</span><span class="params">(<span class="keyword">int</span> rowIndex)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[rowIndex + <span class="number">1</span>];</span><br><span class="line">       res[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= rowIndex; i++)&#123;</span><br><span class="line">           <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &gt; <span class="number">0</span>; j --)&#123;</span><br><span class="line">               res[j] += res[j-<span class="number">1</span>];</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> Arrays.stream(res).boxed().toList();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>12. Integer to Roman</title>
    <url>/leetcode/12-Integer-to-Roman.html</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">intToRoman</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] values = &#123;<span class="number">1000</span>, <span class="number">900</span>, <span class="number">500</span>, <span class="number">400</span>, <span class="number">100</span>, <span class="number">90</span>, <span class="number">50</span>, <span class="number">40</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        String[] strs = &#123;<span class="string">&quot;M&quot;</span>, <span class="string">&quot;CM&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;CD&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;XC&quot;</span>, <span class="string">&quot;L&quot;</span>, <span class="string">&quot;XL&quot;</span>, <span class="string">&quot;X&quot;</span>, <span class="string">&quot;IX&quot;</span>, <span class="string">&quot;V&quot;</span>, <span class="string">&quot;IV&quot;</span>, <span class="string">&quot;I&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; values.length; i++)&#123;</span><br><span class="line">            <span class="keyword">while</span>(num &gt;= values[i])&#123;</span><br><span class="line">                num -= values[i];</span><br><span class="line">                sb.append(strs[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>1318. Minimum Flips to Make a OR b Equal to c</title>
    <url>/leetcode/1318-Minimum-Flips-to-Make-a-OR-b-Equal-to-c.html</url>
    <content><![CDATA[<p>这题真的难度真的是<code>中</code>吗。。。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minFlips</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> a1 = (a&gt;&gt;i) &amp;<span class="number">1</span>, b1 = (b&gt;&gt;i)&amp; <span class="number">1</span>, c1= (c&gt;&gt;i)&amp;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>((a1 | b1) != c1)&#123;</span><br><span class="line">                <span class="keyword">if</span>(c1 == <span class="number">1</span>) res += <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> res += a1 + b1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;            </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>bit</tag>
      </tags>
  </entry>
  <entry>
    <title>1359. Count All Valid Pickup and Delivery Options</title>
    <url>/leetcode/1359-Count-All-Valid-Pickup-and-Delivery-Options.html</url>
    <content><![CDATA[<p>已知 n-1 情况时，供提供了 2*(n-1) + 1 个位置供第 n 个元素插入，选取一个作 P, 另一个只能再其当前及后面位置插入，共 sum(0 … 2*(n-1) +1) = (1 + 2 * (n-1) + 1)*(2*(n-1) + 1) / 2种;</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countOrders</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> cur = <span class="number">1</span>, mod = (<span class="keyword">long</span>)(<span class="number">1e9</span>+<span class="number">7</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            cur = cur * i * (<span class="number">2</span> * i - <span class="number">1</span>) % mod;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>)cur;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>1400. Construct K Palindrome Strings</title>
    <url>/leetcode/1400-Construct-K-Palindrome-Strings.html</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canConstruct</span><span class="params">(String s, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = s.length();</span><br><span class="line">        <span class="keyword">if</span>(k == n) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(k &gt; n) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span>[] map = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c: s.toCharArray())&#123;</span><br><span class="line">            map[c-<span class="string">&#x27;a&#x27;</span>] ^= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i: map)&#123;</span><br><span class="line">            cnt+= i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt &lt;= k ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>hashMap</tag>
        <tag>greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>1402. Reducing Dishes</title>
    <url>/leetcode/1402-Reducing-Dishes.html</url>
    <content><![CDATA[<p>这也能是 <code>hard</code> ？<br>O(n^2):  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSatisfaction</span><span class="params">(<span class="keyword">int</span>[] satisfaction)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>, n = satisfaction.length;</span><br><span class="line">        Arrays.sort(satisfaction);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt; n; j++)&#123;</span><br><span class="line">                tmp += (j-i +<span class="number">1</span>) * satisfaction[j];</span><br><span class="line">            &#125;</span><br><span class="line">            res = Math.max(tmp, res);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>O(nlgn):  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSatisfaction</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">        Arrays.sort(arr);</span><br><span class="line">        <span class="keyword">int</span> n = arr.length, res = <span class="number">0</span>, cur = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span>[] suffix = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n -<span class="number">1</span>; i&gt;=<span class="number">0</span>; i--)&#123;</span><br><span class="line">            suffix[i] = suffix[i+<span class="number">1</span>] + arr[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n; i &gt;=<span class="number">0</span>; i--)&#123;</span><br><span class="line">            cur += suffix[i];</span><br><span class="line">            res = Math.max(res, cur);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>1416. Restore The Array</title>
    <url>/leetcode/1416-Restore-The-Array.html</url>
    <content><![CDATA[<p>2022/03/07 每日一题， <code>hard</code>, <code>dp</code><br>dp[i] 表示到 s[0] -&gt; s[i] 包含的可能的结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numberOfArrays</span><span class="params">(String s, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = s.length(), mod = <span class="number">1_000_000_007</span>;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">char</span>[] cs = s.toCharArray();</span><br><span class="line">        <span class="keyword">if</span>(cs[<span class="number">0</span>] == <span class="string">&#x27;0&#x27;</span> || cs[<span class="number">0</span>] - <span class="string">&#x27;0&#x27;</span> &gt; k) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">long</span> tmp = <span class="number">0</span>, digit = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &gt;= Math.max(<span class="number">0</span>, i - <span class="number">10</span>); j --)&#123;</span><br><span class="line">                tmp += (cs[j] - <span class="string">&#x27;0&#x27;</span>) * digit;</span><br><span class="line">                digit *= <span class="number">10</span>;</span><br><span class="line">                <span class="keyword">if</span>(cs[j] - <span class="string">&#x27;0&#x27;</span> == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span>(tmp &gt; k) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">if</span>(j == <span class="number">0</span>) dp[i] = (dp[i] + <span class="number">1</span>) % mod;</span><br><span class="line">                <span class="keyword">else</span>  dp[i] = (dp[i] +dp[j-<span class="number">1</span>]) % mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/leetcode/1465-Maximum-Area-of-a-Piece-of-Cake-After-Horizontal-and-Vertical-Cuts.html</url>
    <content><![CDATA[<hr>
<p>title: 1465. Maximum Area of a Piece of Cake After Horizontal and Vertical Cuts<br>tags: leetcode</p>
<hr>
<p>分别找两个方向上距离最大的切口</p>
<p>我是猪</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">getMaxDiff</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> ei)</span> </span>&#123;</span><br><span class="line">        Arrays.sort(arr);</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>, st = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : arr) &#123;</span><br><span class="line">            len = Math.max(i - st, len);</span><br><span class="line">            st = i;</span><br><span class="line">        &#125;</span><br><span class="line">        len = Math.max(len, ei - st);</span><br><span class="line">        <span class="keyword">return</span> len;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxArea</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> w, <span class="keyword">int</span>[] horizontalCuts, <span class="keyword">int</span>[] verticalCuts)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> hl = getMaxDiff(horizontalCuts, h);</span><br><span class="line">        <span class="keyword">long</span> vl = getMaxDiff(verticalCuts, w);</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>)((hl * vl) % <span class="number">1000000007</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>173. Binary-Search-Tree-Iterator</title>
    <url>/leetcode/173-Binary-Search-Tree-Iterator.html</url>
    <content><![CDATA[<ul>
<li>解法1 构造中序线索树<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BSTIterator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BSTIterator</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        cur = root;</span><br><span class="line">        <span class="keyword">while</span>(cur.left != <span class="keyword">null</span>)&#123;</span><br><span class="line">            cur = cur.left;</span><br><span class="line">        &#125;</span><br><span class="line">        helper(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    HashMap&lt;TreeNode, TreeNode&gt; next = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    TreeNode pre = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">helper</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        helper(root.left);</span><br><span class="line">        <span class="keyword">if</span>(pre != <span class="keyword">null</span> &amp;&amp; pre.right == <span class="keyword">null</span>)&#123;</span><br><span class="line">            next.put(pre, root);</span><br><span class="line">        &#125;</span><br><span class="line">        pre = root;</span><br><span class="line">        helper(root.right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(cur == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException();;</span><br><span class="line">        <span class="keyword">int</span> res = cur.val;</span><br><span class="line">        <span class="keyword">if</span>(cur.right != <span class="keyword">null</span>)&#123;</span><br><span class="line">            cur = cur.right;</span><br><span class="line">            <span class="keyword">while</span>(cur.left != <span class="keyword">null</span>)&#123;</span><br><span class="line">                cur = cur.left;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            cur = next.get(cur);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cur != <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<ul>
<li>解法2 无耻作弊<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BSTIterator</span> </span>&#123;</span><br><span class="line">    LinkedList&lt;Integer&gt; list = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    Iterator&lt;Integer&gt; it = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BSTIterator</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        helper(root);</span><br><span class="line">        it = list.iterator();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">helper</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        helper(root.left);</span><br><span class="line">        list.add(root.val);</span><br><span class="line">        helper(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> it.next();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> it.hasNext();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>1886. Determine Whether Matrix Can Be Obtained By Rotation</title>
    <url>/leetcode/1886-Determine-Whether-Matrix-Can-Be-Obtained-By-Rotation.html</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">findRotation</span><span class="params">(<span class="keyword">int</span>[][] mat, <span class="keyword">int</span>[][] target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = mat.length, res = <span class="number">15</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; n; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(mat[i][j] != target[j][n-<span class="number">1</span>-i]) res &amp;= <span class="number">2</span> + <span class="number">4</span> + <span class="number">8</span>; <span class="comment">// 90度</span></span><br><span class="line">                <span class="keyword">if</span>(mat[i][j] != target[n-<span class="number">1</span>-i][n-<span class="number">1</span>-j]) res &amp;= <span class="number">1</span> + <span class="number">4</span> + <span class="number">8</span>; <span class="comment">// 180度</span></span><br><span class="line">                <span class="keyword">if</span>(mat[i][j] != target[n-<span class="number">1</span>-j][i]) res &amp;= <span class="number">1</span> + <span class="number">2</span> + <span class="number">8</span>; <span class="comment">// 270 度</span></span><br><span class="line">                <span class="keyword">if</span>(mat[i][j] != target[i][j]) res &amp;= <span class="number">1</span> + <span class="number">2</span> + <span class="number">4</span>;  <span class="comment">// 360 度   </span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>2074. Reverse Nodes in Even Length Groups</title>
    <url>/leetcode/2074-Reverse-Nodes-in-Even-Length-Groups.html</url>
    <content><![CDATA[<p>就硬算</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public ListNode reverseEvenLengthGroups(ListNode head) &#123;</span><br><span class="line">        if(head == null || head.next == null) return head;</span><br><span class="line">        ListNode cur = head.next, prev = head, tmp= null;</span><br><span class="line">        int i = 1, cnt = 0;</span><br><span class="line">        outer: while(true)&#123;</span><br><span class="line">            i++;</span><br><span class="line">            cnt =0;</span><br><span class="line">            while(cnt++ &lt; i)&#123;</span><br><span class="line">                tmp = cur;</span><br><span class="line">                cur = cur.next;</span><br><span class="line">                if(cur == null)&#123;</span><br><span class="line">                    if(cnt % 2 == 0)&#123;</span><br><span class="line">                        reverse(prev, cnt);</span><br><span class="line">                    &#125;</span><br><span class="line">                    break outer;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if(i % 2 == 0)&#123;</span><br><span class="line">                tmp = prev.next;</span><br><span class="line">                reverse(prev, i);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            prev = tmp;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        return head;</span><br><span class="line">    &#125;</span><br><span class="line">    private void reverse(ListNode prev, int k)&#123;</span><br><span class="line">        ListNode cur = prev.next;</span><br><span class="line">        for(int i = 1; i &lt; k; i++)&#123;</span><br><span class="line">            ListNode tmp = cur.next;</span><br><span class="line">            cur.next = tmp.next;</span><br><span class="line">            tmp.next = prev.next;</span><br><span class="line">            prev.next = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>linked-list</tag>
      </tags>
  </entry>
  <entry>
    <title>2178. Maximum Split of Positive Even Integers</title>
    <url>/leetcode/2178-Maximum-Split-of-Positive-Even-Integers.html</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Long&gt; <span class="title">maximumEvenSplit</span><span class="params">(<span class="keyword">long</span> finalSum)</span> </span>&#123;</span><br><span class="line">        Set&lt;Long&gt; res = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(finalSum % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">long</span> i = <span class="number">2</span>; finalSum &gt; <span class="number">0</span>; finalSum -= i, i += <span class="number">2</span>)</span><br><span class="line">                res.add(i);</span><br><span class="line"></span><br><span class="line">            res.remove(Math.abs(finalSum));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;(res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>2197. Replace Non-Coprime Numbers in Array</title>
    <url>/leetcode/2197-Replace-Non-Coprime-Numbers-in-Array.html</url>
    <content><![CDATA[<p>用栈直接遍历。<br>唯一问题是周赛的时候超时，周赛之后换了一种求最大公约数的方法就过了，淦。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(m &lt; n) <span class="keyword">return</span> gcd(n, m);</span><br><span class="line">        <span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (n != <span class="number">0</span>) &#123;</span><br><span class="line">            tmp = m % n;</span><br><span class="line">            m = n;</span><br><span class="line">            n = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> m;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lcm</span><span class="params">(<span class="keyword">int</span> n1, <span class="keyword">int</span> n2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n1 == n2) <span class="keyword">return</span> n1;</span><br><span class="line">        <span class="keyword">return</span> n1 / gcd(n1, n2) * n2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">replaceNonCoprimes</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(stack.empty())&#123;</span><br><span class="line">                stack.push(nums[i]);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">while</span>(stack.size() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">int</span> top = stack.peek();</span><br><span class="line">                     <span class="keyword">if</span>(gcd(top, nums[i]) == <span class="number">1</span>)&#123;</span><br><span class="line">                        <span class="keyword">break</span>;                             </span><br><span class="line">                     &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                         nums[i] = lcm(stack.pop(), nums[i]);</span><br><span class="line">                     &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                stack.push(nums[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stack.stream().toList();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>stack</tag>
      </tags>
  </entry>
  <entry>
    <title>2213. Longest Substring of One Repeating Character</title>
    <url>/leetcode/2213-Longest-Substring-of-One-Repeating-Character.html</url>
    <content><![CDATA[<p>讲道理应该用线段树，但是代码太复杂了，从讨论区拿的 “clean code”:  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">int</span>[] longestRepeating(String s, String queryCharacters, <span class="keyword">int</span>[] queryIndices) &#123;</span><br><span class="line">        <span class="keyword">char</span>[] arr = s.toCharArray();</span><br><span class="line">        <span class="keyword">int</span> m = arr.length, n = queryIndices.length;</span><br><span class="line">        <span class="keyword">int</span>[] output = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        TreeMap&lt;Integer, Integer&gt; lengths = <span class="keyword">new</span> TreeMap&lt;&gt;(), spans = <span class="keyword">new</span> TreeMap&lt;&gt;();</span><br><span class="line">        <span class="comment">// lengths: key 重复字符串长度 value 长度计数</span></span><br><span class="line">        <span class="comment">// spans: key 重复字符串左端点 value  重复字符串右端点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">            <span class="keyword">if</span> (j == m || arr[i] != arr[j]) &#123;</span><br><span class="line">                lengths.put(j - i, lengths.getOrDefault(j - i, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">                spans.put(i, j - <span class="number">1</span>);</span><br><span class="line">                i = j;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; queryIndices.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> j = queryIndices[i];</span><br><span class="line">            <span class="keyword">if</span> (arr[j] != queryCharacters.charAt(i)) &#123;</span><br><span class="line">                <span class="comment">// 更新了某字符，打破了原来的重复序列</span></span><br><span class="line">                <span class="keyword">int</span> l = spans.floorKey(j), r = spans.remove(l), length = r - l + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (lengths.get(length) == <span class="number">1</span>) lengths.remove(length);</span><br><span class="line">                <span class="keyword">else</span> lengths.put(length, lengths.get(length) - <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span> (l &lt; j) &#123;</span><br><span class="line">                    spans.put(l, j - <span class="number">1</span>);</span><br><span class="line">                    lengths.put(j - l, lengths.getOrDefault(j - l, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (r &gt; j) &#123;</span><br><span class="line">                    spans.put(j + <span class="number">1</span>, r);</span><br><span class="line">                    lengths.put(r - j, lengths.getOrDefault(r - j, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 更新字符串</span></span><br><span class="line">                arr[j] = queryCharacters.charAt(i);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 向左扫描重复字符串</span></span><br><span class="line">                l = j;</span><br><span class="line">                <span class="keyword">if</span> (j &gt; <span class="number">0</span> &amp;&amp; arr[j] == arr[j - <span class="number">1</span>]) &#123;</span><br><span class="line">                    l = spans.floorKey(j);</span><br><span class="line">                    length = spans.remove(l) - l + <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">if</span> (lengths.get(length) == <span class="number">1</span>) lengths.remove(length);</span><br><span class="line">                    <span class="keyword">else</span> lengths.put(length, lengths.get(length) - <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 向右扫描重复字符串</span></span><br><span class="line">                r = j;</span><br><span class="line">                <span class="keyword">if</span> (j &lt; m - <span class="number">1</span> &amp;&amp; arr[j] == arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="keyword">int</span> key = spans.ceilingKey(j);</span><br><span class="line">                    r = spans.remove(key);</span><br><span class="line">                    length = r - key + <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">if</span> (lengths.get(length) == <span class="number">1</span>) lengths.remove(length);</span><br><span class="line">                    <span class="keyword">else</span> lengths.put(length, lengths.get(length) - <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 合并扫描结果</span></span><br><span class="line">                spans.put(l, r);</span><br><span class="line">                lengths.put(r - l + <span class="number">1</span>, lengths.getOrDefault(r - l + <span class="number">1</span>, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            output[i] = lengths.lastKey();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> output;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>segment</tag>
      </tags>
  </entry>
  <entry>
    <title>273. Integer to English Words</title>
    <url>/leetcode/273-Integer-to-English-Words.html</url>
    <content><![CDATA[<p>题目忽略了 <code>And</code> 这个词。<br>为什么转罗马数字难度是<code>中</code>，转英语单词是<code>难</code>。似乎并没什么区别</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String[] belowTen = <span class="keyword">new</span> String[] &#123;<span class="string">&quot;&quot;</span>, <span class="string">&quot;One&quot;</span>, <span class="string">&quot;Two&quot;</span>, <span class="string">&quot;Three&quot;</span>, <span class="string">&quot;Four&quot;</span>, <span class="string">&quot;Five&quot;</span>, <span class="string">&quot;Six&quot;</span>, <span class="string">&quot;Seven&quot;</span>, <span class="string">&quot;Eight&quot;</span>, <span class="string">&quot;Nine&quot;</span>&#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String[] belowTwenty = <span class="keyword">new</span> String[] &#123;<span class="string">&quot;Ten&quot;</span>, <span class="string">&quot;Eleven&quot;</span>, <span class="string">&quot;Twelve&quot;</span>, <span class="string">&quot;Thirteen&quot;</span>, <span class="string">&quot;Fourteen&quot;</span>, <span class="string">&quot;Fifteen&quot;</span>, <span class="string">&quot;Sixteen&quot;</span>, <span class="string">&quot;Seventeen&quot;</span>, <span class="string">&quot;Eighteen&quot;</span>, <span class="string">&quot;Nineteen&quot;</span>&#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String[] belowHundred = <span class="keyword">new</span> String[] &#123;<span class="string">&quot;&quot;</span>, <span class="string">&quot;Ten&quot;</span>, <span class="string">&quot;Twenty&quot;</span>, <span class="string">&quot;Thirty&quot;</span>, <span class="string">&quot;Forty&quot;</span>, <span class="string">&quot;Fifty&quot;</span>, <span class="string">&quot;Sixty&quot;</span>, <span class="string">&quot;Seventy&quot;</span>, <span class="string">&quot;Eighty&quot;</span>, <span class="string">&quot;Ninety&quot;</span>&#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String[] unit = <span class="keyword">new</span> String[] &#123;<span class="string">&quot;&quot;</span>, <span class="string">&quot;Thousand&quot;</span>, <span class="string">&quot;Million&quot;</span>, <span class="string">&quot;Billion&quot;</span>&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">numberToWords</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        String res = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(num == <span class="number">0</span>) <span class="keyword">return</span> <span class="string">&quot;Zero&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> cur = num % <span class="number">1000</span>;</span><br><span class="line">            ArrayList&lt;String&gt; tmp = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">if</span>(cur / <span class="number">100</span> &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                tmp.add(belowTen[cur/<span class="number">100</span>]);</span><br><span class="line">                tmp.add(<span class="string">&quot;Hundred&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(cur % <span class="number">100</span> &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(cur % <span class="number">100</span> &lt; <span class="number">10</span>)&#123;</span><br><span class="line">                    tmp.add(belowTen[cur % <span class="number">100</span>]);</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(cur % <span class="number">100</span> &lt; <span class="number">20</span>)&#123;</span><br><span class="line">                    tmp.add(belowTwenty[cur % <span class="number">100</span> - <span class="number">10</span>]);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    tmp.add(belowHundred[(cur % <span class="number">100</span>) / <span class="number">10</span>]);</span><br><span class="line">                    <span class="keyword">if</span>(cur % <span class="number">10</span> &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                        tmp.add(belowTen[cur % <span class="number">10</span>]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(tmp.size() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                tmp.add(unit[i]);</span><br><span class="line">                res =  String.join(<span class="string">&quot; &quot;</span>, tmp) + <span class="string">&quot; &quot;</span> + res;</span><br><span class="line">            &#125;</span><br><span class="line">            num /= <span class="number">1000</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res.trim();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>33. Search in Rotated Sorted Array</title>
    <url>/leetcode/33-Search-in-Rotated-Sorted-Array.html</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>, end = nums.length -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (start + <span class="number">1</span> &lt; end) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = start + (end - start) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target)</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &gt; nums[start])&#123;</span><br><span class="line">                <span class="keyword">if</span> (target &gt;= nums[start] &amp;&amp; target &lt;= nums[mid])</span><br><span class="line">                    end = mid;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    start = mid;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (target &gt;= nums[mid] &amp;&amp; target &lt;= nums[end])</span><br><span class="line">                    start = mid;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    end = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (nums[start] == target)</span><br><span class="line">            <span class="keyword">return</span> start;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (nums[end] == target)</span><br><span class="line">            <span class="keyword">return</span> end;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><del>太棒了，我逐渐理解了一切.jpg</del></p>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>binary-search</tag>
      </tags>
  </entry>
  <entry>
    <title>392. Is Subsequence</title>
    <url>/leetcode/392-Is-Subsequence.html</url>
    <content><![CDATA[<p>双指针遍历</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSubsequence</span><span class="params">(String s, String t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;s.length() &amp;&amp; j &lt; t.length())&#123;</span><br><span class="line">            <span class="keyword">if</span>(s.charAt(i) == t.charAt(j))&#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i == s.length();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>415-Add-Strings</title>
    <url>/leetcode/415-Add-Strings.html</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addStrings</span><span class="params">(String num1, String num2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] n1 = num1.toCharArray(), n2 = num2.toCharArray();</span><br><span class="line">        <span class="keyword">int</span> n = n1.length, m = n2.length, idx = Math.max(m, n), carry = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">char</span>[] res = <span class="keyword">new</span> <span class="keyword">char</span>[idx+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">while</span>(idx &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> a = n &gt; <span class="number">0</span> ? n1[--n] - <span class="string">&#x27;0&#x27;</span> : <span class="number">0</span>, b = m &gt; <span class="number">0</span> ? n2[--m] -<span class="string">&#x27;0&#x27;</span> : <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> sum = a + b + carry;</span><br><span class="line">            res[idx--] = (<span class="keyword">char</span>) ((sum % <span class="number">10</span>) + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            carry = sum / <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(res).substring(res[<span class="number">0</span>] == <span class="string">&#x27;0&#x27;</span> ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>637. Average of Levels in Binary Tree</title>
    <url>/leetcode/637-Average-of-Levels-in-Binary-Tree.html</url>
    <content><![CDATA[<p>层次遍历二叉树</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Double&gt; <span class="title">averageOfLevels</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        LinkedList&lt;TreeNode&gt; que = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        LinkedList&lt;Double&gt; res = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        que.add(root);</span><br><span class="line">        <span class="keyword">while</span>(que.size() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> size = que.size(), cnt = size;</span><br><span class="line">            <span class="keyword">double</span> sum = <span class="number">0.0</span>;</span><br><span class="line">            <span class="keyword">while</span>(size -- &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                TreeNode cur = que.removeFirst();</span><br><span class="line">                sum += cur.val;</span><br><span class="line">                <span class="keyword">if</span>(cur.left != <span class="keyword">null</span>) que.add(cur.left);</span><br><span class="line">                <span class="keyword">if</span>(cur.right != <span class="keyword">null</span>) que.add(cur.right);</span><br><span class="line">            &#125;</span><br><span class="line">            res.add(sum / cnt);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>676. Implement Magic Dictionary</title>
    <url>/leetcode/676-Implement-Magic-Dictionary.html</url>
    <content><![CDATA[<p>字典树</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MagicDictionary</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TrieNode</span></span>&#123;</span><br><span class="line">        TrieNode[] children = <span class="keyword">new</span> TrieNode[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">boolean</span> isWord;</span><br><span class="line">    &#125;</span><br><span class="line">    TrieNode root = <span class="keyword">new</span> TrieNode();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MagicDictionary</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildDict</span><span class="params">(String[] dict)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(String s: dict)&#123;</span><br><span class="line">            TrieNode cur = root;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">char</span> c: s.toCharArray())&#123;</span><br><span class="line">                <span class="keyword">if</span>(cur.children[c-<span class="string">&#x27;a&#x27;</span>] == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    cur.children[c-<span class="string">&#x27;a&#x27;</span>] = <span class="keyword">new</span> TrieNode();</span><br><span class="line">                &#125;</span><br><span class="line">                cur = cur.children[c-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            cur.isWord = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">search</span><span class="params">(String word)</span></span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] arr = word.toCharArray();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">char</span> c= <span class="string">&#x27;a&#x27;</span> ; c&lt;=<span class="string">&#x27;z&#x27;</span>; c++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[i] == c) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">char</span> tmp = arr[i];</span><br><span class="line">                arr[i] = c;</span><br><span class="line">                <span class="keyword">if</span>(contains(arr, root)) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                arr[i] = tmp;</span><br><span class="line">            &#125;          </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(<span class="keyword">char</span>[] cs, TrieNode root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c: cs)&#123;</span><br><span class="line">            <span class="keyword">if</span>(root.children[c-<span class="string">&#x27;a&#x27;</span>] == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            root = root.children[c-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root.isWord;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>trie</tag>
      </tags>
  </entry>
  <entry>
    <title>799. Champagne Tower</title>
    <url>/leetcode/799-Champagne-Tower.html</url>
    <content><![CDATA[<p>变型杨辉三角</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">champagneTower</span><span class="params">(<span class="keyword">int</span> poured, <span class="keyword">int</span> query_row, <span class="keyword">int</span> query_glass)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span>[] row = <span class="keyword">new</span> <span class="keyword">double</span>[query_row+<span class="number">1</span>];</span><br><span class="line">        row[<span class="number">0</span>] = poured;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; query_row; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &gt;= <span class="number">0</span>; j--)&#123;</span><br><span class="line">                row[j] = Math.max(<span class="number">0.0</span>, (row[j] - <span class="number">1</span>) /<span class="number">2</span>);</span><br><span class="line">                row[j+<span class="number">1</span>] += row[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Math.min(<span class="number">1.0</span>, row[query_glass]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>86. Partition List</title>
    <url>/leetcode/86-Partition-List.html</url>
    <content><![CDATA[<p>找到第一个大于等于 <code>x</code> 的元素，把所有小于 <code>x</code> 的元素插到该元素前面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> ListNode <span class="title">partition</span><span class="params">(ListNode head, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        ListNode dummy = <span class="keyword">new</span> ListNode(Integer.MIN_VALUE, head), start = dummy;</span><br><span class="line">        <span class="keyword">while</span>(start.next != <span class="keyword">null</span> &amp;&amp; start.next.val &lt; x) start = start.next;</span><br><span class="line">        ListNode cur = start.next;</span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="keyword">null</span> &amp;&amp; cur.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cur.next.val &lt; x)&#123;</span><br><span class="line">                ListNode tmp = cur.next;</span><br><span class="line">                cur.next = cur.next.next;</span><br><span class="line">                tmp.next = start.next;</span><br><span class="line">                start.next = tmp;</span><br><span class="line">                start = start.next;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            cur = cur.next;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>two-pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>91-Decode-Ways</title>
    <url>/leetcode/91-Decode-Ways.html</url>
    <content><![CDATA[<blockquote>
<p><a href="https://leetcode.com/problems/decode-ways/">https://leetcode.com/problems/decode-ways/</a></p>
</blockquote>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>动态规划问题求解，当前字母能独立解构时 <code>dp[i] += dp[i-1]</code>, 当前字母能与前一个字母解构时 <code>dp[i] += dp[i-2]</code>。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numDecodings</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length() == <span class="number">0</span> || s.charAt(<span class="number">0</span>) == <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> n = s.length();</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> first = Integer.valueOf(s.substring(i - <span class="number">1</span>, i));</span><br><span class="line">            <span class="keyword">int</span> second = Integer.valueOf(s.substring(i - <span class="number">2</span>, i));</span><br><span class="line">            <span class="keyword">if</span> (first &gt;= <span class="number">1</span> &amp;&amp; first &lt;= <span class="number">9</span>) &#123;</span><br><span class="line">                dp[i] += dp[i-<span class="number">1</span>];  </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (second &gt;= <span class="number">10</span> &amp;&amp; second &lt;= <span class="number">26</span>) &#123;</span><br><span class="line">                dp[i] += dp[i-<span class="number">2</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>934-Shortest-Bridge</title>
    <url>/leetcode/934-Shortest-Bridge.html</url>
    <content><![CDATA[<p>先用 dfs 搜索岛屿，将每块陆地加入队列之后使用 bfs 搜索最近道路。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[][] dirs = <span class="keyword">new</span> <span class="keyword">int</span>[][]&#123;&#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;-<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">0</span>, -<span class="number">1</span>&#125;&#125;;</span><br><span class="line">    Queue&lt;<span class="keyword">int</span>[]&gt; que = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">boolean</span>[][] visited;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">shortestBridge</span><span class="params">(<span class="keyword">int</span>[][] grid)</span> </span>&#123;</span><br><span class="line">        n = grid.length;</span><br><span class="line">        visited = <span class="keyword">new</span> <span class="keyword">boolean</span>[n][n];</span><br><span class="line">        OUTER: <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n ; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(grid[i][j] == <span class="number">1</span>)&#123;</span><br><span class="line">                    dfs(grid, i, j);</span><br><span class="line">                    <span class="keyword">break</span> OUTER;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(que.size() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> size = que.size();</span><br><span class="line">            <span class="keyword">while</span>(size -- &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">int</span>[] cur = que.poll();</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span>[] dir: dirs)&#123;</span><br><span class="line">                    <span class="keyword">int</span> x = cur[<span class="number">0</span>] + dir[<span class="number">0</span>], y = cur[<span class="number">1</span>] + dir[<span class="number">1</span>];</span><br><span class="line">                    <span class="keyword">if</span>(x &lt; <span class="number">0</span> || x &gt;= n || y &lt; <span class="number">0</span>|| y&gt;= n) <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">if</span>(visited[x][y]) <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">if</span>(grid[x][y] == <span class="number">1</span>) <span class="keyword">return</span> res;</span><br><span class="line">                    que.offer(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;x, y&#125;);</span><br><span class="line">                    visited[x][y] = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            res ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span>[][] A, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; <span class="number">0</span> || i &gt;= n || j &lt; <span class="number">0</span> || j &gt;= n) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(visited[i][j] || A[i][j] == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">        que.offer(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;i, j&#125;);</span><br><span class="line">        visited[i][j] = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span>[] dir: dirs)&#123;</span><br><span class="line">            dfs(A, i + dir[<span class="number">0</span>], j + dir[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>996. Number of Squareful Arrays</title>
    <url>/leetcode/996-Number-of-Squareful-Arrays.html</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numSquarefulPerms</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i-<span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">            dfs(nums, <span class="number">1</span> &lt;&lt; i, i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> flag, <span class="keyword">int</span> idx)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(flag == (<span class="number">1</span>&lt;&lt; nums.length) - <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.res ++;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i == idx || (flag &amp; ( <span class="number">1</span> &lt;&lt; i)) &gt; <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>] &amp;&amp; (flag &amp; (<span class="number">1</span>&lt;&lt; (i-<span class="number">1</span>)) )== <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(isSquare(nums[idx], nums[i]))&#123;</span><br><span class="line">                dfs(nums, flag | <span class="number">1</span> &lt;&lt; i, i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isSquare</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b == (<span class="keyword">int</span>)Math.pow((<span class="keyword">int</span>)Math.sqrt(a + b), <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我实在没想明白为什么相关标签里会有 <code>DP</code>, <code>bit-manipulation</code>，就是没有 <code>dfs</code>。<br>打开讨论区，找一个 <code>dp</code>，代码如下，用名为 <code>dp</code> 的 map 保存是否访问过，二分查找验证平方数。<br>如果这也算 <code>dp</code> 和 <code>bs</code> 我真的无 fuck 说。  </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment">// binary search</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isPerfectSquare</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;      </span><br><span class="line">        <span class="keyword">long</span> min = <span class="number">0</span>, max = num;</span><br><span class="line">        <span class="keyword">while</span>(min &lt;= max) &#123;</span><br><span class="line">            <span class="keyword">long</span> mid = (min + max) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(mid * mid == num)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(mid * mid &gt; num)</span><br><span class="line">                max = mid - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                min = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">backtrack</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span>&amp; count, map&lt;vector&lt;<span class="keyword">int</span>&gt;, <span class="keyword">bool</span>&gt;&amp; dp, vector&lt;<span class="keyword">int</span>&gt; acc, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// if we reached this part, we&#x27;re done with a valid solution</span></span><br><span class="line">        <span class="keyword">if</span>(acc.<span class="built_in">size</span>() == n) count++;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// keep track of iterator in order to insert in constant time (iterator as &#x27;hint&#x27;)</span></span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt;::iterator it = nums.<span class="built_in">begin</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); ++i, ++it) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(acc.<span class="built_in">empty</span>() <span class="keyword">or</span> <span class="built_in">isPerfectSquare</span>(acc[acc.<span class="built_in">size</span>() - <span class="number">1</span>] + nums[i])) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">int</span> val = nums[i];</span><br><span class="line">                acc.<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// we keep on backtracking only if we haven&#x27;t already started with such an acc</span></span><br><span class="line">                <span class="keyword">if</span>(dp.<span class="built_in">find</span>(acc) == dp.<span class="built_in">end</span>()) &#123;</span><br><span class="line">                    dp[acc] = <span class="literal">true</span>;</span><br><span class="line">                    it = nums.<span class="built_in">erase</span>(it);</span><br><span class="line">                    <span class="built_in">backtrack</span>(nums, count, dp, acc, n);</span><br><span class="line">                    nums.<span class="built_in">insert</span>(it, val);</span><br><span class="line">                &#125;</span><br><span class="line">                acc.<span class="built_in">pop_back</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numSquarefulPerms</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">        map&lt;vector&lt;<span class="keyword">int</span>&gt;, <span class="keyword">bool</span>&gt; dp;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">backtrack</span>(nums, count, dp, vector&lt;<span class="keyword">int</span>&gt;(), n);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>dfs</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/leetcode/%E5%8F%8C%E5%91%A8%E8%B5%9B74.html</url>
    <content><![CDATA[<ul>
<li><ol start="2206">
<li>Divide Array Into Equal Pairs<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">divideArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.length;</span><br><span class="line">        <span class="keyword">int</span>[] cnt = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">501</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num: nums)&#123;</span><br><span class="line">            cnt[num] ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num: cnt)&#123;</span><br><span class="line">            <span class="keyword">if</span>(num % <span class="number">2</span> != <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><ol start="2207">
<li>Maximize Number of Subsequences in a String<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">maximumSubsequenceCount</span><span class="params">(String text, String pattern)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> res1 = <span class="number">0</span>, res2 = <span class="number">0</span>,cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">boolean</span> f = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">char</span>[] p = pattern.toCharArray();</span><br><span class="line">        <span class="keyword">if</span>(p[<span class="number">0</span>] == p[<span class="number">1</span>])&#123;</span><br><span class="line">            cnt ++;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">char</span> c: text.toCharArray())&#123;</span><br><span class="line">                <span class="keyword">if</span>(c == p[<span class="number">0</span>])&#123;</span><br><span class="line">                    res1 += cnt;</span><br><span class="line">                    cnt ++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> res1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c: text.toCharArray())&#123;</span><br><span class="line">            <span class="keyword">if</span>(c == p[<span class="number">0</span>])&#123;</span><br><span class="line">                cnt++;</span><br><span class="line">                f = <span class="keyword">true</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(c == p[<span class="number">1</span>])&#123;</span><br><span class="line">                res1 += (cnt + <span class="number">1</span>);</span><br><span class="line">                res2 += f ? cnt : <span class="number">0</span>;</span><br><span class="line">            &#125;        </span><br><span class="line">        &#125;</span><br><span class="line">        res2 += f? cnt : <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> Math.max(res1, res2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><ol start="2208">
<li>Minimum Operations to Halve Array Sum<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">halveArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        PriorityQueue&lt;Double&gt; que = <span class="keyword">new</span> PriorityQueue&lt;&gt;((a,b) -&gt; -a.compareTo(b));</span><br><span class="line">        <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">double</span> cur = <span class="number">0.0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num: nums)&#123;</span><br><span class="line">            sum += num;</span><br><span class="line">            que.add((<span class="keyword">double</span>) num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">2</span> * cur &lt; sum)&#123;</span><br><span class="line">            res ++;</span><br><span class="line">            <span class="keyword">double</span> tmp = que.poll() / <span class="number">2</span>;</span><br><span class="line">            cur += tmp;</span><br><span class="line">            que.add(tmp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><ol start="2209">
<li>Minimum White Tiles After Covering With Carpets<br>dfs寻找答案 + <strong>memory优化查找</strong></li>
</ol>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    Integer[][] dp;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minimumWhiteTiles</span><span class="params">(String floor, <span class="keyword">int</span> numCarpets, <span class="keyword">int</span> carpetLen)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dp = <span class="keyword">new</span> Integer[numCarpets+<span class="number">1</span>][floor.length()];</span><br><span class="line">        <span class="keyword">return</span> helper(floor, numCarpets, carpetLen, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">helper</span><span class="params">(String str, <span class="keyword">int</span> n, <span class="keyword">int</span> len, <span class="keyword">int</span> idx)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(idx &gt;= str.length()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> ct = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = idx; i &lt; str.length(); i++)&#123;</span><br><span class="line">                ct += str.charAt(i) == <span class="string">&#x27;1&#x27;</span> ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> ct;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(dp[n][idx] != <span class="keyword">null</span>) <span class="keyword">return</span> dp[n][idx];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> a = helper(str, n-<span class="number">1</span>, len, idx + len);</span><br><span class="line">        <span class="keyword">int</span> b = str.charAt(idx) == <span class="string">&#x27;1&#x27;</span> ? <span class="number">1</span> + helper(str, n, len, idx + <span class="number">1</span>) : helper(str, n, len, idx + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        dp[n][idx] = Math.min(a, b);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Math.min(a, b);   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>双周赛75</title>
    <url>/leetcode/%E5%8F%8C%E5%91%A8%E8%B5%9B75.html</url>
    <content><![CDATA[<p>前三题属于白送，第四题想的解法超时了，想用 KMP 算法但是找不到共同处，寄。</p>
<ul>
<li><ol start="2220">
<li>Minimum Bit Flips to Convert Number<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minBitFlips</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> goal)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i ++)&#123;</span><br><span class="line">            <span class="keyword">if</span>((<span class="number">1</span> &lt;&lt; i &amp; start )!= (<span class="number">1</span> &lt;&lt; i &amp; goal)) cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><ol start="2221">
<li>Find Triangular Sum of an Array<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">triangularSum</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n-<span class="number">1</span>; i &gt; <span class="number">0</span>; i--)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i ; j++)&#123;</span><br><span class="line">                nums[j] += nums[j+<span class="number">1</span>];</span><br><span class="line">                nums[j] %= <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><ol start="2222">
<li>Number of Ways to Select Buildings<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">numberOfWays</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = s.length();</span><br><span class="line">        <span class="keyword">long</span>[][][] map = <span class="keyword">new</span> <span class="keyword">long</span>[<span class="number">3</span>][n][<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">if</span>(s.charAt(<span class="number">0</span>) == <span class="string">&#x27;0&#x27;</span>) map[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> map[<span class="number">0</span>][<span class="number">0</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = Math.max(<span class="number">1</span>, j); i &lt; n ; i++)&#123;</span><br><span class="line">                <span class="keyword">int</span> d = s.charAt(i) - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                map[j][i][d] = map[j][i-<span class="number">1</span>][d] + (j &gt; <span class="number">0</span> ? map[j-<span class="number">1</span>][i-<span class="number">1</span>][d^<span class="number">1</span>] : <span class="number">1</span>);</span><br><span class="line">                map[j][i][d^<span class="number">1</span>] = map[j][i-<span class="number">1</span>][d^<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map[<span class="number">2</span>][n-<span class="number">1</span>][<span class="number">0</span>] + map[<span class="number">2</span>][n-<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><ol start="2223">
<li>Sum of Scores of Built Strings</li>
</ol>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 周赛时想的算法，132 / 143 test cases passed. TLE 可恶啊</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">sumScores</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = s.length();</span><br><span class="line">        <span class="keyword">long</span>[] cnt = <span class="keyword">new</span> <span class="keyword">long</span>[n];</span><br><span class="line">        cnt[<span class="number">0</span>] = n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n-<span class="number">1</span>; i &gt; <span class="number">0</span>; i--)&#123;</span><br><span class="line">            <span class="keyword">int</span> q = i;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(q == n || s.charAt(j) != s.charAt(q)) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">if</span>(j &lt; q)&#123;</span><br><span class="line">                    cnt[i]++;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    cnt[i] += cnt[q];</span><br><span class="line">                &#125;</span><br><span class="line">                q++;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">long</span> num: cnt) res+= num;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看了下讨论区果然是一个已存在的算法(Z-function)，可看做 KMP 算法的扩展，吃了没文化的亏。<br>先放篇讲解在这里，以后会看的吧，大概。  </p>
<blockquote>
<p><a href="http://codeforces.com/blog/entry/3107">http://codeforces.com/blog/entry/3107</a></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">sumScores</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = str.length();</span><br><span class="line">        <span class="keyword">char</span>[] s = str.toCharArray();</span><br><span class="line">        <span class="keyword">long</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span>[] z = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, l = <span class="number">0</span>, r = <span class="number">0</span>; i&lt; n ; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>( i &lt;= r) z[i] = Math.min(r - i + <span class="number">1</span>, z[i-l]);</span><br><span class="line">            <span class="keyword">while</span>(i + z[i] &lt; n &amp;&amp; s[z[i]] == s[i+z[i]]) ++ z[i];</span><br><span class="line">            <span class="keyword">if</span>(i + z[i] - <span class="number">1</span> &gt; r)&#123;</span><br><span class="line">                l = i; r = i+ z[i] -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            res += z[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res + n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>周赛284</title>
    <url>/leetcode/%E5%91%A8%E8%B5%9B284.html</url>
    <content><![CDATA[<h3 id="2200-Find-All-K-Distant-Indices-in-an-Array"><a href="#2200-Find-All-K-Distant-Indices-in-an-Array" class="headerlink" title="2200. Find All K-Distant Indices in an Array"></a>2200. Find All K-Distant Indices in an Array</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">findKDistantIndices</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> key, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i ++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = Math.max(<span class="number">0</span>, i - k); j &lt; Math.min(nums.length, i + k +<span class="number">1</span>); j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[j] == key)&#123;</span><br><span class="line">                    list.add(i);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2201-Count-Artifacts-That-Can-Be-Extracted"><a href="#2201-Count-Artifacts-That-Can-Be-Extracted" class="headerlink" title="2201. Count Artifacts That Can Be Extracted"></a>2201. Count Artifacts That Can Be Extracted</h3><p>似乎可以用线段树，但是现在还不会，绷。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[][][] root;</span><br><span class="line">    <span class="keyword">int</span>[][] cnt;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] find(<span class="keyword">int</span>[] x)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root[x[<span class="number">0</span>]][x[<span class="number">1</span>]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span>[] x, <span class="keyword">int</span>[] y)</span></span>&#123;</span><br><span class="line">        root[y[<span class="number">0</span>]][y[<span class="number">1</span>]] = root[x[<span class="number">0</span>]][x[<span class="number">1</span>]];</span><br><span class="line">        cnt[x[<span class="number">0</span>]][x[<span class="number">1</span>]] ++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">digArtifacts</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span>[][] artifacts, <span class="keyword">int</span>[][] dig)</span> </span>&#123;</span><br><span class="line">        root = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>][n+<span class="number">1</span>][<span class="number">2</span>];</span><br><span class="line">        cnt = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>][n+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= n; j++)&#123;</span><br><span class="line">                root[i][j] = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;i, j&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span>[] arr :artifacts)&#123;</span><br><span class="line">            <span class="keyword">int</span>[] corner = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;arr[<span class="number">0</span>], arr[<span class="number">1</span>]&#125;;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = arr[<span class="number">0</span>]; i&lt;= arr[<span class="number">2</span>]; i++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = arr[<span class="number">1</span>]; j &lt;= arr[<span class="number">3</span>]; j++)&#123;</span><br><span class="line">                    union(corner, <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;i, j&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span>[] arr: dig)&#123;</span><br><span class="line">            <span class="keyword">int</span>[] r = find(arr);</span><br><span class="line">            <span class="keyword">if</span>(cnt[r[<span class="number">0</span>]][r[<span class="number">1</span>]] == <span class="number">1</span>)&#123;</span><br><span class="line">                res ++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                cnt[r[<span class="number">0</span>]][r[<span class="number">1</span>]] --;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2202-Maximize-the-Topmost-Element-After-K-Moves"><a href="#2202-Maximize-the-Topmost-Element-After-K-Moves" class="headerlink" title="2202. Maximize the Topmost Element After K Moves"></a>2202. Maximize the Topmost Element After K Moves</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maximumTop</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> max = -<span class="number">1</span>, n = nums.length, i =<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>) <span class="keyword">return</span> k % <span class="number">2</span> == <span class="number">0</span>? nums[<span class="number">0</span>] : -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(k == <span class="number">0</span>) <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(; i &lt; n &amp;&amp; k &gt;<span class="number">1</span>;i++)&#123;</span><br><span class="line">            max = Math.max(nums[i], max);</span><br><span class="line">            k --;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; n -<span class="number">1</span>)&#123;</span><br><span class="line">            max = Math.max(max, nums[i+<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="2203-Minimum-Weighted-Subgraph-With-the-Required-Paths"><a href="#2203-Minimum-Weighted-Subgraph-With-the-Required-Paths" class="headerlink" title="2203. Minimum Weighted Subgraph With the Required Paths"></a>2203. Minimum Weighted Subgraph With the Required Paths</h3><p>没做出来，地杰斯特拉算法忘光了，绷。<br>参考讨论区：  </p>
<blockquote>
<p><a href="https://leetcode.com/problems/minimum-weighted-subgraph-with-the-required-paths/discuss/1844460/Dijkstra-3-Times-or-C%2B%2B-or-priority_queue-or-O(NlogN)-and-O(N)">https://leetcode.com/problems/minimum-weighted-subgraph-with-the-required-paths/discuss/1844460/Dijkstra-3-Times-or-C%2B%2B-or-priority_queue-or-O(NlogN)-and-O(N)</a></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Edge</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ed;</span><br><span class="line">        <span class="keyword">long</span> wt;</span><br><span class="line"></span><br><span class="line">        Edge(<span class="keyword">int</span> ed, <span class="keyword">long</span> wt) &#123;</span><br><span class="line">            <span class="keyword">this</span>.ed = ed;</span><br><span class="line">            <span class="keyword">this</span>.wt = wt;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Pair</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ed;</span><br><span class="line">        <span class="keyword">long</span> wsf;</span><br><span class="line"></span><br><span class="line">        Pair(<span class="keyword">int</span> ed, <span class="keyword">long</span> wsf) &#123;</span><br><span class="line">            <span class="keyword">this</span>.ed = ed;</span><br><span class="line">            <span class="keyword">this</span>.wsf = wsf;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">minimumWeight</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span>[][] edges, <span class="keyword">int</span> src1, <span class="keyword">int</span> src2, <span class="keyword">int</span> dest)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;ArrayList&lt;Edge&gt;&gt; graph = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        ArrayList&lt;ArrayList&lt;Edge&gt;&gt; rev_graph = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            graph.add(<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">            rev_graph.add(<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; edges.length; i++) &#123;</span><br><span class="line">            graph.get(edges[i][<span class="number">0</span>]).add(<span class="keyword">new</span> Edge(edges[i][<span class="number">1</span>], edges[i][<span class="number">2</span>]));</span><br><span class="line">            rev_graph.get(edges[i][<span class="number">1</span>]).add(<span class="keyword">new</span> Edge(edges[i][<span class="number">0</span>], edges[i][<span class="number">2</span>]));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span>[] s1tox = <span class="keyword">new</span> <span class="keyword">long</span>[n];</span><br><span class="line">        <span class="keyword">long</span>[] s2tox = <span class="keyword">new</span> <span class="keyword">long</span>[n];</span><br><span class="line">        <span class="keyword">long</span>[] dtox = <span class="keyword">new</span> <span class="keyword">long</span>[n];</span><br><span class="line">        Arrays.fill(s1tox, -<span class="number">1</span>);</span><br><span class="line">        Arrays.fill(s2tox, -<span class="number">1</span>);</span><br><span class="line">        Arrays.fill(dtox, -<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        dijkstra(graph, s1tox, src1);</span><br><span class="line">        dijkstra(graph, s2tox, src2);</span><br><span class="line">        dijkstra(rev_graph, dtox, dest);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> ans = Long.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">long</span> l1 = s1tox[i];</span><br><span class="line">            <span class="keyword">long</span> l2 = s2tox[i];</span><br><span class="line">            <span class="keyword">long</span> l3 = dtox[i];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (l1 != -<span class="number">1</span> &amp;&amp; l2 != -<span class="number">1</span> &amp;&amp; l3 != -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">long</span> len = l1 + l2 + l3;</span><br><span class="line">                ans = Math.min(ans, len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans == Long.MAX_VALUE ? -<span class="number">1</span> : ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(ArrayList&lt;ArrayList&lt;Edge&gt;&gt; graph, <span class="keyword">long</span>[] res, <span class="keyword">int</span> src)</span> </span>&#123;</span><br><span class="line">        PriorityQueue&lt;Pair&gt; q = <span class="keyword">new</span> PriorityQueue&lt;&gt;((a, b) -&gt; (<span class="keyword">int</span>) (a.wsf - b.wsf));</span><br><span class="line">        q.add(<span class="keyword">new</span> Pair(src, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">boolean</span>[] visited = <span class="keyword">new</span> <span class="keyword">boolean</span>[graph.size()];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (q.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> size = q.size();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (size-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                Pair p = q.poll();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (!visited[p.ed]) &#123;</span><br><span class="line">                    ArrayList&lt;Edge&gt; al = graph.get(p.ed);</span><br><span class="line">                    <span class="keyword">for</span> (Edge e : al) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (!visited[e.ed])</span><br><span class="line">                            q.add(<span class="keyword">new</span> Pair(e.ed, e.wt + p.wsf));</span><br><span class="line">                    &#125;</span><br><span class="line">                    res[p.ed] = p.wsf;</span><br><span class="line">                    visited[p.ed] = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>周赛287</title>
    <url>/leetcode/%E5%91%A8%E8%B5%9B287.html</url>
    <content><![CDATA[<p>四道送分题，但是脑子一时没转过来弯。<br>leetcode 你太baby辣。<br>+2224. Minimum Number of Operations to Convert Time</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">convertTime</span><span class="params">(String current, String correct)</span> </span>&#123;</span><br><span class="line">        String[] a = current.split(<span class="string">&quot;:&quot;</span>), b = correct.split(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> i = Integer.valueOf(b[<span class="number">1</span>]) + <span class="number">60</span> * Integer.valueOf(b[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">int</span> j = Integer.valueOf(a[<span class="number">1</span>]) + <span class="number">60</span> * Integer.valueOf(a[<span class="number">0</span>]);</span><br><span class="line">        res += (i - j) / <span class="number">60</span>;</span><br><span class="line">        res += (i - j) % <span class="number">60</span> / <span class="number">15</span> ;</span><br><span class="line">        res += (i - j) % <span class="number">15</span> / <span class="number">5</span>;</span><br><span class="line">        res += (i - j) % <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><ol start="2225">
<li>Find Players With Zero or One Losses<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">     <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; findWinners(<span class="keyword">int</span>[][] matches) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] win = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100001</span>], loss = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100001</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span>[] it: matches)&#123;</span><br><span class="line">            win[it[<span class="number">0</span>]] = <span class="number">1</span>;</span><br><span class="line">            loss[it[<span class="number">1</span>]] ++;</span><br><span class="line">        &#125;</span><br><span class="line">        ArrayList&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        ArrayList&lt;Integer&gt; winlist = <span class="keyword">new</span> ArrayList&lt;&gt;(), losslist = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">100001</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(win[i] == <span class="number">1</span> &amp;&amp; loss[i] == <span class="number">0</span>) winlist.add(i);</span><br><span class="line">            <span class="keyword">if</span>(loss[i] == <span class="number">1</span>) losslist.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">         res.add(winlist);res.add(losslist);</span><br><span class="line">         <span class="keyword">return</span>  res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><ol start="2226">
<li>Maximum Candies Allocated to K Children<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maximumCandies</span><span class="params">(<span class="keyword">int</span>[] candies, <span class="keyword">long</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> c: candies) sum += c;</span><br><span class="line">        <span class="keyword">long</span> left = <span class="number">0</span>, right = sum / k;</span><br><span class="line">        <span class="keyword">if</span>(right &lt;= <span class="number">1</span>) <span class="keyword">return</span> (<span class="keyword">int</span>)right;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;= right)&#123;</span><br><span class="line">            <span class="keyword">long</span> cnt = <span class="number">0</span>, mid = left + ( right - left) /<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> c: candies) cnt += c/mid;</span><br><span class="line">            <span class="keyword">if</span>(cnt &lt; k) right = mid - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> left = mid +<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
<p>+2227. Encrypt and Decrypt Strings<br>周赛时候的超时解法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 201 / 203 test cases passed.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Encrypter</span> </span>&#123;</span><br><span class="line">    HashMap&lt;Character, String&gt; map =  <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    HashMap&lt;String, List&lt;Character&gt;&gt; rev_map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    Trie trie = <span class="keyword">new</span> Trie();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Encrypter</span><span class="params">(<span class="keyword">char</span>[] keys, String[] values, String[] dictionary)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; keys.length; i++)&#123;</span><br><span class="line">            map.put(keys[i], values[i]);</span><br><span class="line">            rev_map.putIfAbsent(values[i], <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">            rev_map.get(values[i]).add(keys[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        trie.buildDict(dictionary);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">encrypt</span><span class="params">(String word1)</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; word1.length(); i++)&#123;</span><br><span class="line">            sb.append(map.getOrDefault(word1.charAt(i), word1.charAt(i)+<span class="string">&quot;&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">decrypt</span><span class="params">(String word2)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; word2.length(); i += <span class="number">2</span>)&#123;</span><br><span class="line">            String str = word2.substring(i, Math.min(word2.length(), i + <span class="number">2</span>));</span><br><span class="line">            <span class="keyword">if</span>(rev_map.containsKey(str))&#123;</span><br><span class="line">                List&lt;Character&gt; rev_list = rev_map.get(str);</span><br><span class="line">                List&lt;String&gt; tmp = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">                <span class="keyword">for</span> (String value : list) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (Character character : rev_list) &#123;</span><br><span class="line">                        String s = value + character;</span><br><span class="line">                        <span class="keyword">if</span> (trie.contains(s))</span><br><span class="line">                            tmp.add(s);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                list = tmp;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                List&lt;String&gt; tmp = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">                <span class="keyword">for</span>(String value: list)&#123;</span><br><span class="line">                    String s = value + str;</span><br><span class="line">                    <span class="keyword">if</span>(trie.contains(s))</span><br><span class="line">                        tmp.add(s);</span><br><span class="line">                &#125;</span><br><span class="line">                list = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">         <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(String str: list)&#123;</span><br><span class="line">            <span class="keyword">if</span>(trie.isWord(str)) res++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Trie</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TrieNode</span></span>&#123;</span><br><span class="line">        TrieNode[] children = <span class="keyword">new</span> TrieNode[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">boolean</span> isWord;</span><br><span class="line">    &#125;</span><br><span class="line">    TrieNode root = <span class="keyword">new</span> TrieNode();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Trie</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildDict</span><span class="params">(String[] dict)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(String s: dict)&#123;</span><br><span class="line">            TrieNode cur = root;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">char</span> c: s.toCharArray())&#123;</span><br><span class="line">                <span class="keyword">if</span>(cur.children[c-<span class="string">&#x27;a&#x27;</span>] == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    cur.children[c-<span class="string">&#x27;a&#x27;</span>] = <span class="keyword">new</span> TrieNode();</span><br><span class="line">                &#125;</span><br><span class="line">                cur = cur.children[c-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            cur.isWord = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        TrieNode tmp = root;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c: str.toCharArray())&#123;</span><br><span class="line">            <span class="keyword">if</span>(tmp.children[c-<span class="string">&#x27;a&#x27;</span>] == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            tmp = tmp.children[c-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isWord</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        TrieNode tmp = root;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c: str.toCharArray())&#123;</span><br><span class="line">            <span class="keyword">if</span>(tmp.children[c-<span class="string">&#x27;a&#x27;</span>] == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            tmp = tmp.children[c-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> tmp.isWord;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>看了下讨论区，逆向思维啊，逆向思维。超，感觉自己像个弱智。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Encrypter</span> </span>&#123;</span><br><span class="line">    HashMap&lt;Character, String&gt; map =  <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    HashMap&lt;String, Integer&gt; cnt = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Encrypter</span><span class="params">(<span class="keyword">char</span>[] keys, String[] values, String[] dictionary)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; keys.length; i++)&#123;</span><br><span class="line">            map.put(keys[i], values[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(String str: dictionary)&#123;</span><br><span class="line">            cnt.put(encrypt(str), cnt.getOrDefault(encrypt(str), <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">encrypt</span><span class="params">(String word1)</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; word1.length(); i++)&#123;</span><br><span class="line">            sb.append(map.getOrDefault(word1.charAt(i), word1.charAt(i)+<span class="string">&quot;&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">decrypt</span><span class="params">(String word2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cnt.getOrDefault(word2, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>第一次参加周赛记录（2022/03/06）</title>
    <url>/leetcode/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%8F%82%E5%8A%A0%E5%91%A8%E8%B5%9B%E8%AE%B0%E5%BD%95.html</url>
    <content><![CDATA[<h3 id="2194-Cells-in-a-Range-on-an-Excel-Sheet"><a href="#2194-Cells-in-a-Range-on-an-Excel-Sheet" class="headerlink" title="2194  Cells in a Range on an Excel Sheet"></a>2194  Cells in a Range on an Excel Sheet</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">cellsInRange</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> start = s.charAt(<span class="number">0</span>); start &lt;= s.charAt(<span class="number">3</span>); start++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">char</span> row = s.charAt(<span class="number">1</span>); row &lt;= s.charAt(<span class="number">4</span>); row++)&#123;</span><br><span class="line">                res.add(start+<span class="string">&quot;&quot;</span>+row);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2195-Append-K-Integers-With-Minimal-Sum"><a href="#2195-Append-K-Integers-With-Minimal-Sum" class="headerlink" title="2195  Append K Integers With Minimal Sum"></a>2195  Append K Integers With Minimal Sum</h3><p>第一次用的方法，超时了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">minimalKSum</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        HashSet&lt;Long&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num:nums) set.add((<span class="keyword">long</span>)num);</span><br><span class="line">        <span class="keyword">long</span> i = <span class="number">1</span>, res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(k &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!set.contains(i))&#123;</span><br><span class="line">                k --;</span><br><span class="line">                res += i;</span><br><span class="line">            &#125;</span><br><span class="line">            i ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>换个思路，这个时候要进行<strong>数组去重</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">minimalKSum</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        nums = Arrays.stream(nums).sorted().distinct().toArray();</span><br><span class="line">        <span class="keyword">long</span> res = (<span class="keyword">long</span>) k * (k + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length ; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> num = nums[i];</span><br><span class="line">            <span class="keyword">if</span>(num &lt;= k)&#123;</span><br><span class="line">                res += k - num + <span class="number">1</span>;</span><br><span class="line">                k++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2196-Create-Binary-Tree-From-Descriptions"><a href="#2196-Create-Binary-Tree-From-Descriptions" class="headerlink" title="2196 Create Binary Tree From Descriptions"></a>2196 Create Binary Tree From Descriptions</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">createBinaryTree</span><span class="params">(<span class="keyword">int</span>[][] descriptions)</span> </span>&#123;</span><br><span class="line">        HashMap&lt;Integer, TreeNode&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span>[] parents = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100001</span>];</span><br><span class="line">        <span class="keyword">int</span>[] childs = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100001</span>];</span><br><span class="line">        HashSet&lt;Integer&gt; set1 = <span class="keyword">new</span> HashSet&lt;&gt;(), set2 = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span>[] edge: descriptions)&#123;</span><br><span class="line">            <span class="keyword">int</span> parent = edge[<span class="number">0</span>], child = edge[<span class="number">1</span>], isLeft = edge[<span class="number">2</span>];</span><br><span class="line">            parents[parent] = <span class="number">1</span>;</span><br><span class="line">            childs[child] = -<span class="number">1</span>;</span><br><span class="line">            map.putIfAbsent(parent, <span class="keyword">new</span> TreeNode(parent));</span><br><span class="line">            map.putIfAbsent(child, <span class="keyword">new</span> TreeNode(child));</span><br><span class="line">            <span class="keyword">if</span>(isLeft == <span class="number">1</span>)&#123;</span><br><span class="line">                map.get(parent).left = map.get(child);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                map.get(parent).right = map.get(child);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">100001</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(parents[i] == <span class="number">1</span> &amp;&amp; childs[i] == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> map.get(i);   </span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>试图用 <code>HashSet</code> 或者其他 <code>Collection</code> 记录根节点，结果不是超时就是查api，斗智斗勇了好久，甚至想用到用并查集。<br>我是猪。</p>
<h3 id="2197-Replace-Non-Coprime-Numbers-in-Array"><a href="#2197-Replace-Non-Coprime-Numbers-in-Array" class="headerlink" title="2197 Replace Non-Coprime Numbers in Array"></a>2197 Replace Non-Coprime Numbers in Array</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(m &lt; n) <span class="keyword">return</span> gcd(n, m);</span><br><span class="line">        <span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (n != <span class="number">0</span>) &#123;</span><br><span class="line">            tmp = m % n;</span><br><span class="line">            m = n;</span><br><span class="line">            n = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> m;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lcm</span><span class="params">(<span class="keyword">int</span> n1, <span class="keyword">int</span> n2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n1 == n2) <span class="keyword">return</span> n1;</span><br><span class="line">        <span class="keyword">return</span> n1 / gcd(n1, n2) * n2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">replaceNonCoprimes</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(stack.empty())&#123;</span><br><span class="line">                stack.push(nums[i]);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">while</span>(stack.size() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">int</span> top = stack.peek();</span><br><span class="line">                     <span class="keyword">if</span>(gcd(top, nums[i]) == <span class="number">1</span>)&#123;</span><br><span class="line">                        <span class="keyword">break</span>;                             </span><br><span class="line">                     &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                         nums[i] = lcm(stack.pop(), nums[i]);</span><br><span class="line">                     &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                stack.push(nums[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stack.stream().toList();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>“有手就行”，点开这道题的时候就剩下十分钟。然后求公约数和公倍数算法一时脑瘫想不起来，百度搜了两个能过样例，但是会超时。结束之后重写了公约数和公倍数函数，通过了。<br>一时不知道说什么好。  </p>
<h3 id="after-all"><a href="#after-all" class="headerlink" title="after all"></a>after all</h3><p>反复跟超时、溢出、api斗争，思路读完题之后就没怎么变动，我是猪。<br>感觉现在难度是<code>中</code>的题目也开始“有手就行”，不记录<code>中</code>的题目了（虽然一共也没记录几道题）除了 DP，DP属实还不太会。<br>结束得有十分钟才完成所有题目，还是菜。希望下次周赛的时候能刷满 512 道题，当前进度（503/512）；以及能完赛（先不算错题罚时）。</p>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown 基础语法</title>
    <url>/markdown%E7%A7%8D%E7%A7%8D/Markdown%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95.html</url>
    <content><![CDATA[<h2 id="0-序言"><a href="#0-序言" class="headerlink" title="0  序言"></a>0  序言</h2><p>先开个坑，能不能补以后再说</p>
<h2 id="1-Markdown-Preview-Enhanced-插件"><a href="#1-Markdown-Preview-Enhanced-插件" class="headerlink" title="1  Markdown Preview Enhanced 插件"></a>1  Markdown Preview Enhanced 插件</h2><blockquote>
<p><a href="https://www.bookstack.cn/read/mpe/zh-cn-math.md">Markdown Preview Enhanced 插件文档</a></p>
</blockquote>
]]></content>
      <categories>
        <category>markdown种种</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>DesignPatterns</title>
    <url>/notes/DesignPatterns.html</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>notes</category>
      </categories>
  </entry>
  <entry>
    <title>EffectiveJava</title>
    <url>/notes/EffectiveJava.html</url>
    <content><![CDATA[<h1 id="1-创建和销毁对象"><a href="#1-创建和销毁对象" class="headerlink" title="1 创建和销毁对象"></a>1 创建和销毁对象</h1><h3 id="1-用静态方法构代替构造器"><a href="#1-用静态方法构代替构造器" class="headerlink" title="1 用静态方法构代替构造器"></a>1 用静态方法构代替构造器</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title">valueOf</span><span class="params">(<span class="keyword">boolean</span> b)</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> b ? Boolean.TRUE : Boolean.FALSE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-遇到多个构造器参数时考虑使用构建器"><a href="#2-遇到多个构造器参数时考虑使用构建器" class="headerlink" title="2 遇到多个构造器参数时考虑使用构建器"></a>2 遇到多个构造器参数时考虑使用构建器</h3><p>当参数量较多时，重叠构造器模式客户端代码较难编写且难以阅读。<br>使用 <code>Java Bean</code> 的方式可能使得到处不一致的状态。<br>代替方法：使用建造者模式通过提供必要参数构造一个<code>builder</code>，再采用流式操作构建可选参数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Builder pattern</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NutritionFacts</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> servingSize;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> servings;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> calories;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> fat;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">NutritionFacts</span><span class="params">(Builder builder)</span></span>&#123;</span><br><span class="line">    servingSize = builder.servingSize;</span><br><span class="line">    servings = builder.servings;</span><br><span class="line">    calories = builder.calories;</span><br><span class="line">    fat = builder.fat;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> class <span class="title">Builder</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 必要参数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> servingSize;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> servings;</span><br><span class="line">    <span class="comment">// 可选参数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> calories = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> fat = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">(<span class="keyword">int</span> servingSize, <span class="keyword">int</span> servings)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.servingSize = servingSize;</span><br><span class="line">      <span class="keyword">this</span>.servings = servings;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">calories</span><span class="params">(<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">      calories = val;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">fat</span><span class="params">(<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">      fat = val;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端代码</span></span><br><span class="line">NutritionFacts cocaCola = <span class="keyword">new</span> NutritionFacts.Builder(<span class="number">240</span>, <span class="number">8</span>).calories(<span class="number">100</span>).build();</span><br></pre></td></tr></table></figure>
<h3 id="3-用私有构造器或者枚举类型强化-Singleton-属性"><a href="#3-用私有构造器或者枚举类型强化-Singleton-属性" class="headerlink" title="3 用私有构造器或者枚举类型强化 Singleton 属性"></a>3 用私有构造器或者枚举类型强化 Singleton 属性</h3><p>Singleton 指单例模式，即仅被实例化一次。</p>
<h3 id="4-通过私有构造器强化不可实例化的能力"><a href="#4-通过私有构造器强化不可实例化的能力" class="headerlink" title="4 通过私有构造器强化不可实例化的能力"></a>4 通过私有构造器强化不可实例化的能力</h3><p>仅仅通过将类做成抽象类无法保证该类不被实例化，即此时该类可以被继承，而其子类仍然可以实例化。</p>
<h3 id="5-优先考虑依赖注入来引用资源"><a href="#5-优先考虑依赖注入来引用资源" class="headerlink" title="5 优先考虑依赖注入来引用资源"></a>5 优先考虑依赖注入来引用资源</h3><p>当创建一个新的实例时，将所需要的资源通过构造器传递。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpellChecker</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Lexicon dictionary;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">SpellChecker</span><span class="params">(Lexicon dictionary)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.dictionary = Objects.requireNonNull(dictionary);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-避免创建不必要的对象"><a href="#6-避免创建不必要的对象" class="headerlink" title="6 避免创建不必要的对象"></a>6 避免创建不必要的对象</h3><p>一般来说最好能重用单个对象，而不是每次需要的时候就创建一个相同功能的新对象。</p>
<h3 id="7-消除过期的对象引用"><a href="#7-消除过期的对象引用" class="headerlink" title="7 消除过期的对象引用"></a>7 消除过期的对象引用</h3><p>一个栗子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当执行 push，pop 之后会发生内存泄漏</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stack</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> Object[] elements;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INIT_CAPACITY = <span class="number">16</span>;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Stack</span><span class="params">()</span></span>&#123;</span><br><span class="line">    elements = <span class="keyword">new</span> Object[DEFAULT_INIT_CAPACITY];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Object e)</span></span>&#123;</span><br><span class="line">    ensureCapacity();</span><br><span class="line">    elements[size++] = e;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(size == <span class="number">0</span>)</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> EmptyStackException();</span><br><span class="line">    <span class="keyword">return</span> elements[--size];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(elements.length == size)</span><br><span class="line">      elements = Arrays.copyOf(elements, <span class="number">2</span>*size + <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当执行<code>pop()</code>时，<code>elements[size]</code>处的引用已逻辑上已经无效，应当被回收。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 修改版本</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(size == <span class="number">0</span>)</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> EmptyStackException();</span><br><span class="line">    Object result = elements[size];</span><br><span class="line">    elements[--size] = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>其他内存泄漏来源包括过久没有清理的缓存、监听器或其他回调。  </p>
<h3 id="8-避免使用终结方法和清洁方法"><a href="#8-避免使用终结方法和清洁方法" class="headerlink" title="8 避免使用终结方法和清洁方法"></a>8 避免使用终结方法和清洁方法</h3><h3 id="9-try-with-resources-优先于-try-finally"><a href="#9-try-with-resources-优先于-try-finally" class="headerlink" title="9 try-with-resources 优先于 try-finally"></a>9 try-with-resources 优先于 try-finally</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>(</span><br><span class="line">  InputStream in = <span class="keyword">new</span> FileInputStream(src);</span><br><span class="line">  OutputStream out = <span class="keyword">new</span> OutputStream(dst)</span><br><span class="line">)&#123;</span><br><span class="line">  <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[BUFFER_SIZE];</span><br><span class="line">&#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">  e.printExceptionStack();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="2-对于所有对象都通用的方法"><a href="#2-对于所有对象都通用的方法" class="headerlink" title="2 对于所有对象都通用的方法"></a>2 对于所有对象都通用的方法</h1><p>设计 <code>Object</code> 类的目的是为了扩展，它的所有非 <code>final</code> 方法<code>equals, hashCode, toString, clone</code> 都有明确的通用约定。</p>
<h3 id="10-覆盖-equals-时请遵守通用约定"><a href="#10-覆盖-equals-时请遵守通用约定" class="headerlink" title="10 覆盖 equals 时请遵守通用约定"></a>10 覆盖 equals 时请遵守通用约定</h3><ol>
<li>类的每个实例本质上都是唯一的，没有必要提供“逻辑相等”的测试功能。</li>
<li>当超类已经覆盖 <code>equals</code> 时，其行为对所有子类来说也应当有效。</li>
<li><code>equals</code> 方法应当满足离散数学中的<strong>等价关系</strong>。</li>
</ol>
<h5 id="高质量实现-equals-方法的诀窍"><a href="#高质量实现-equals-方法的诀窍" class="headerlink" title="高质量实现 equals 方法的诀窍"></a>高质量实现 <code>equals</code> 方法的诀窍</h5><ol>
<li>使用 <code>==</code> 检查“待比较对象是否同为这个对象的引用”</li>
<li>使用 <code>instanceof</code> 检查“待比较对象是否为正确的类型”并进行类型转换。</li>
<li>检查类中的每个关键域。</li>
</ol>
<p>一个栗子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">PhoneNumber</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">short</span> areaCode, prefix, lineNum;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( o == <span class="keyword">this</span> ) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">if</span>( !(o <span class="keyword">instanceof</span> PhoneNumber) ) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    PhoneNumber pn = (PhoneNumber)o;</span><br><span class="line">    <span class="keyword">return</span> pn.lineNum == lineNum &amp;&amp; pn.prefix == prefix &amp;&amp; pn.areaCode == areaCode;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="11-覆盖-equals-时总要覆盖-hashCode"><a href="#11-覆盖-equals-时总要覆盖-hashCode" class="headerlink" title="11 覆盖 equals 时总要覆盖 hashCode"></a>11 覆盖 equals 时总要覆盖 hashCode</h3><h3 id="12-始终覆盖-toString"><a href="#12-始终覆盖-toString" class="headerlink" title="12 始终覆盖 toString"></a>12 始终覆盖 toString</h3><p>默认 <code>toString</code> 的实现只输出 <code>类名@16进制散列码</code></p>
<h3 id="13-谨慎地覆盖-clone"><a href="#13-谨慎地覆盖-clone" class="headerlink" title="13 谨慎地覆盖 clone"></a>13 谨慎地覆盖 clone</h3><p>实际上 <code>Cloneable</code> 接口不包含任何方法，只决定 <code>Object</code> 中受保护的 <code>clone</code> 方法实现的行为：如果一个类实现了 <code>Cloneable</code> 接口，则 <code>clone</code> 方法返回该对象的逐域拷贝（以值传递的形式进行，因此当涉及引用时应实现类似深拷贝的方法），否则抛出 <code>CloneNotSupportedException</code> 异常。<br>对象拷贝的更好实现方式是提供拷贝构造器或者拷贝工厂。</p>
<h3 id="14-考虑实现-Comparable-接口"><a href="#14-考虑实现-Comparable-接口" class="headerlink" title="14 考虑实现 Comparable 接口"></a>14 考虑实现 Comparable 接口</h3><p>对基本数据类型进行排序时避免使用 <code>&lt;</code> 和 <code>&gt;</code> 操作符，推荐使用装箱基本类型中使用静态的 <code>compare</code> 方法。</p>
<h1 id="3-类和接口"><a href="#3-类和接口" class="headerlink" title="3 类和接口"></a>3 类和接口</h1><h3 id="15-使类和成员的可访问性最小化"><a href="#15-使类和成员的可访问性最小化" class="headerlink" title="15 使类和成员的可访问性最小化"></a>15 使类和成员的可访问性最小化</h3><p>区分一个组件设计的好不好，唯一重要因素在于，它对于外部的其他组件而言，是否隐藏了其内部数据和其他实现细节。</p>
<h3 id="16-要在公有类而非公有域中使用-getter-amp-amp-setterr"><a href="#16-要在公有类而非公有域中使用-getter-amp-amp-setterr" class="headerlink" title="16 要在公有类而非公有域中使用 getter &amp;&amp; setterr"></a>16 要在公有类而非公有域中使用 getter &amp;&amp; setterr</h3><p>公有类，即暴露给外部的类，其他程序可以通过 API 访问，不应直接暴露其字段。<br>如果某个类本身就是私有的，直接暴露其字段并没有本质错误。</p>
<h3 id="17-使可变性最小化"><a href="#17-使可变性最小化" class="headerlink" title="17 使可变性最小化"></a>17 使可变性最小化</h3><p>不可变类是指其实例不能被修改的类，每个实例中包含的所有信息都必须在创建实例的时候提供，并在该对象的整个生命周期内保持不变。例如 Java 中的 <code>String</code> 类。<br>保证类不可变性的五条原则：  </p>
<ol>
<li>不提供任何设值方法。</li>
<li>保证类不会被扩展（<code>final class</code> 或其他方法）。</li>
<li>声明所有域都是 <code>final</code> 的。</li>
<li>声明所有域都是 <code>private</code> 的。</li>
<li>确保对任何可变组件的互斥访问。<br>如果类具有指向可变对象的字段，则必须确保该类的客户端无法获得指向这些对象的引用。  </li>
</ol>
<h3 id="18-复合优先于继承"><a href="#18-复合优先于继承" class="headerlink" title="18 复合优先于继承"></a>18 复合优先于继承</h3><p>首先, 继承打破了封装性. 即子类依赖于其超累中特定功能的实现细节. 超累的实现有可能会随着发行版本的不同而有所变化, 可能会在即使子类代码没有变化的情况下将其破坏.<br>其次, 如果超类在后续的发行版本中添加了一个新的方法, 恰巧你又为子类提供了一个签名相同但返回值类型不同的方法, 则子类代码将无法通过编译.<br>再次, 继承机制会把超类 API 中的所有缺陷传播到子类中, 而复合则允许设计新的 API 来隐藏这些缺陷.<br>因此只有在真正存在<code>is-a</code>关系时才适用继承, 其余情况应首先考虑复合, 即 <code>B</code> 包含 <code>A</code> 的一个私有实例.  </p>
<h3 id="19-要么专门设计继承并提供文档说明-要么禁止继承"><a href="#19-要么专门设计继承并提供文档说明-要么禁止继承" class="headerlink" title="19 要么专门设计继承并提供文档说明, 要么禁止继承"></a>19 要么专门设计继承并提供文档说明, 要么禁止继承</h3><h3 id="20-接口优先于抽象类"><a href="#20-接口优先于抽象类" class="headerlink" title="20 接口优先于抽象类"></a>20 接口优先于抽象类</h3><p>骨架实现类: 为多个接口提供默认实现的抽象类</p>
<h3 id="21-为后代设计接口"><a href="#21-为后代设计接口" class="headerlink" title="21 为后代设计接口"></a>21 为后代设计接口</h3><p>Java 8 中增加了缺省方法, 其目的是允许给现有的接口添加方法, 但这些方法是被 “注入” 到现有实现的, 其实现者并不知情.  </p>
<h3 id="22-接口只用于定义类型"><a href="#22-接口只用于定义类型" class="headerlink" title="22 接口只用于定义类型"></a>22 接口只用于定义类型</h3><p>当类实现接口时, 接口就充当可以引用这个类的实例的类型(type). 因此, 类实现了接口, 就表明客户端可以对这个类的实例实施某些动作. 为了任何其他目的而定义接口是不恰当的.<br>常量应当在 <code>final class</code> 中被定义, 如在接口中定义无法保证该接口不被实现.  </p>
<h3 id="23-类层次优于标签类"><a href="#23-类层次优于标签类" class="headerlink" title="23 类层次优于标签类"></a>23 类层次优于标签类</h3><p>图形类返回面积的例子  </p>
<h3 id="24-静态成员优于非静态成员"><a href="#24-静态成员优于非静态成员" class="headerlink" title="24 静态成员优于非静态成员"></a>24 静态成员优于非静态成员</h3><p>四种嵌套类: 静态成员类, 非静态成员类, 匿名类和局部类<br>静态成员类可当作一个普通的类, 只是声明在一个类的内部而已, 它可以访问外围类的所有成员.<br>非静态类的每个实例都隐含地与外围类的一个实例相关联.  </p>
<h3 id="25-限制源文件为单个顶级类"><a href="#25-限制源文件为单个顶级类" class="headerlink" title="25 限制源文件为单个顶级类"></a>25 限制源文件为单个顶级类</h3><p>确保编译时一个类不会有多个定义, 亦即编译结果和程序结果的行为不会受到源文件被传递给编译器时的顺序的影响.  </p>
<h1 id="5-泛型"><a href="#5-泛型" class="headerlink" title="5 泛型"></a>5 泛型</h1>]]></content>
      <categories>
        <category>notes</category>
      </categories>
  </entry>
  <entry>
    <title>HTML5与CSS3权威指南_CSS部分</title>
    <url>/notes/HTML5%E4%B8%8ECSS3%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97-css%E9%83%A8%E5%88%86.html</url>
    <content><![CDATA[<h1 id="16-选择器"><a href="#16-选择器" class="headerlink" title="16 选择器"></a>16 选择器</h1><h2 id="16-1-CSS-中的-gt"><a href="#16-1-CSS-中的-gt" class="headerlink" title="16.1 CSS 中的 , &gt; + ~"></a>16.1 CSS 中的 , &gt; + ~</h2><h3 id="16-1-1-群组选择器"><a href="#16-1-1-群组选择器" class="headerlink" title="16.1.1 群组选择器 ,"></a>16.1.1 群组选择器 ,</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 表示同时选择 h1 和 h2 */</span></span><br><span class="line"><span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="16-1-2-后代选择器-空格"><a href="#16-1-2-后代选择器-空格" class="headerlink" title="16.1.2 后代选择器 (空格)"></a>16.1.2 后代选择器 (空格)</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 选择 h1 下面的所有 span 元素 */</span></span><br><span class="line"><span class="selector-tag">h1</span> <span class="selector-tag">span</span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="16-1-3-子元素选择器-gt"><a href="#16-1-3-子元素选择器-gt" class="headerlink" title="16.1.3 子元素选择器 &gt;"></a>16.1.3 子元素选择器 &gt;</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 表示 h1 下所有直接以 h1 为父元素的 span */</span></span><br><span class="line"><span class="selector-tag">h1</span> &gt; <span class="selector-tag">span</span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="16-1-4-相邻兄弟选择器"><a href="#16-1-4-相邻兄弟选择器" class="headerlink" title="16.1.4 相邻兄弟选择器 +"></a>16.1.4 相邻兄弟选择器 +</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 选择紧邻在 A 元素后的 B 元元素*/</span></span><br><span class="line"><span class="selector-tag">A</span><span class="selector-class">.class</span> + <span class="selector-tag">B</span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="16-1-5-通用选择器"><a href="#16-1-5-通用选择器" class="headerlink" title="16.1.5 通用选择器 ~"></a>16.1.5 通用选择器 ~</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 选取处于同一级的所有兄弟元素 */</span></span><br><span class="line"><span class="selector-tag">A</span> ~ N&#123;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="16-2-属性选择器"><a href="#16-2-属性选择器" class="headerlink" title="16.2 属性选择器"></a>16.2 属性选择器</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-tag">div</span><span class="selector-attr">[id$=<span class="string">&#x27;t&#x27;</span>]</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css">  <span class="comment">/* 选择 id 包含 &#x27;t&#x27; 的 div 元素 */</span></span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol>
<li><code>[att*=val]</code> 选择 <code>att</code> 属性中包含 <code>val</code> 的元素</li>
<li><code>[att^=val]</code> 选择 <code>att</code> 属性中以 <code>val</code> 开头的元素</li>
<li><code>[att$=val]</code> 选择 <code>att</code> 属性中以 <code>val</code> 结尾的元素</li>
</ol>
<h2 id="16-3-结构性伪类选择器"><a href="#16-3-结构性伪类选择器" class="headerlink" title="16.3 结构性伪类选择器"></a>16.3 结构性伪类选择器</h2><h3 id="16-3-1-CSS-中的味伪类选择器及伪元素"><a href="#16-3-1-CSS-中的味伪类选择器及伪元素" class="headerlink" title="16.3.1 CSS 中的味伪类选择器及伪元素"></a>16.3.1 CSS 中的味伪类选择器及伪元素</h3><ol>
<li><p>伪类选择器概述<br>类选择器:  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 选择给指定的具体的 p 元素 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-tag">p</span><span class="selector-class">.right</span>&#123; <span class="attribute">text-align</span>: right&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span> 测试文字 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>伪类选择器是 CSS 中定义好的选择器, 几个栗子:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span>&#123;&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>&#123;&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span>&#123;&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>伪元素选择器概述<br>针对 CSS 中已经定义好的伪元素使用的选择器.<code>选择器:伪元素&#123;属性:值&#125;</code>.<br>主要有以下四个伪元素选择器.  </p>
</li>
</ol>
<ul>
<li><code>:first-line</code> 向某个元素中第一行文字使用样式</li>
<li><code>:first-letter</code> 向某个元素中第一个字母使用样式</li>
<li><code>:before</code> 在某个元素之前插入内容</li>
<li><code>:after</code> 在某个元素之后插入内容</li>
</ul>
<h3 id="16-3-2-结构性伪伪类选择器-root-not-empty-和-target"><a href="#16-3-2-结构性伪伪类选择器-root-not-empty-和-target" class="headerlink" title="16.3.2 结构性伪伪类选择器 :root, :not, :empty 和 :target"></a>16.3.2 结构性伪伪类选择器 :root, :not, :empty 和 :target</h3><ol>
<li>:root<br>选取页面的根元素, 如 HTML 页面中的 <code>&lt;html&gt; &lt;/html&gt;</code> 部分.  <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span>&#123;</span><br><span class="line">  <span class="attribute">background-color</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>:not<br>排除结构选择器中某些子元素<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;!-- * 匹配所有子元素 --&gt;</span><br><span class="line">&lt;!-- <span class="selector-pseudo">:not</span> 排除 <span class="selector-tag">h1</span> --&gt;</span><br><span class="line"><span class="selector-tag">body</span> *<span class="selector-pseudo">:not</span>(<span class="selector-tag">h1</span>)&#123; <span class="attribute">background-color</span>: yellow;&#125;</span><br></pre></td></tr></table></figure></li>
<li>:empty<br>指定当元素中内容为空时使用的样式<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-pseudo">:empty</span>&#123; <span class="attribute">background-color</span>: yellow; &#125;</span><br></pre></td></tr></table></figure></li>
<li>:target<br>使用 <code>target</code> 选择器来对页面中某个 <code>target</code> 元素(该元素的 <code>id</code> 被当作页面中的超链接来使用)指定样式, 该样式只在用户点击了页面中的超链接并跳转到 <code>target</code> 元素后起作用.  </li>
</ol>
<h3 id="16-3-3-first-child-last-child-nth-child-n-nth-last-child-n"><a href="#16-3-3-first-child-last-child-nth-child-n-nth-last-child-n" class="headerlink" title="16.3.3 :first-child, :last-child, :nth-child(n), :nth-last-child(n)"></a>16.3.3 :first-child, :last-child, :nth-child(n), :nth-last-child(n)</h3><p>对父容器中正序和逆序第 n 个指定元素使用样式, 连同其中的所有子元素一起计算.<br>选择奇数和偶数元素  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(odd)&#123; <span class="attribute">background-color</span>: yellow; &#125;</span><br><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(even)&#123; <span class="attribute">background-color</span>: skyblue; &#125;</span><br></pre></td></tr></table></figure>
<h3 id="16-3-4-nth-of-type-和-nth-last-of-type"><a href="#16-3-4-nth-of-type-和-nth-last-of-type" class="headerlink" title="16.3.4 :nth-of-type 和 :nth-last-of-type"></a>16.3.4 :nth-of-type 和 :nth-last-of-type</h3><p>只对同类型子元素进行计数  </p>
<h3 id="16-3-5-循环使用样式"><a href="#16-3-5-循环使用样式" class="headerlink" title="16.3.5 循环使用样式"></a>16.3.5 循环使用样式</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>n+<span class="number">1</span>)&#123;&#125;</span><br><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>n+<span class="number">2</span>)&#123;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="16-3-6-only-child-选择器"><a href="#16-3-6-only-child-选择器" class="headerlink" title="16.3.6 :only-child 选择器"></a>16.3.6 :only-child 选择器</h3><p>当且仅当该元素为父元素唯一子元素时生效  </p>
<h2 id="16-4-UI-元素状态伪类选择器"><a href="#16-4-UI-元素状态伪类选择器" class="headerlink" title="16.4 UI 元素状态伪类选择器"></a>16.4 UI 元素状态伪类选择器</h2><p>指定的样式只有当元素处在某种状态下时才起作用<br><code>E:hover</code>, <code>E:active</code>, <code>E:focus</code>, <code>E:enabled</code>, <code>E:disabled</code>, <code>E:read-only</code>, <code>E:read-write</code>, <code>E:checked</code>, <code>E:selection</code>, <code>E:default</code>, <code>E:indeterminate</code>, <code>E:invalid</code>, <code>E:valid</code>, <code>E:required</code>, <code>E:required</code>, <code>E:optional</code>, <code>E:in-range</code>, <code>E:out-of-range</code><br>多用于表单校验, 不再记录.  </p>
<h1 id="17-使用选择器在页面中插入内容"><a href="#17-使用选择器在页面中插入内容" class="headerlink" title="17 使用选择器在页面中插入内容"></a>17 使用选择器在页面中插入内容</h1><p>使用 <code>:before</code> 和 <code>:after</code> 中的 <code>content</code> 属性来插入内容  </p>
<h2 id="使用选择器来插入文字"><a href="#使用选择器来插入文字" class="headerlink" title="使用选择器来插入文字"></a>使用选择器来插入文字</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-tag">h2</span>:before&#123;</span></span><br><span class="line"><span class="css">    content: <span class="string">&#x27;COLUMN&#x27;</span>;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span> 标题 <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="指定个别元素不插入"><a href="#指定个别元素不插入" class="headerlink" title="指定个别元素不插入"></a>指定个别元素不插入</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-tag">h2</span><span class="selector-class">.sample</span>:before&#123;</span></span><br><span class="line"><span class="css">    content: none;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;sample&quot;</span>&gt;</span> 标题2 <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="插入图像文件"><a href="#插入图像文件" class="headerlink" title="插入图像文件"></a>插入图像文件</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h2</span>:before&#123;</span><br><span class="line">  content:<span class="built_in">url</span>(<span class="string">mark.png</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="将-alt-属性的值作为图像的标题"><a href="#将-alt-属性的值作为图像的标题" class="headerlink" title="将 alt 属性的值作为图像的标题"></a>将 alt 属性的值作为图像的标题</h2><p>如果在 <code>content</code> 属性中通过 <code>attr(属性名)</code> 的形式来指定属性值, 可以将某个属性的属性值显示出来.  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-tag">img</span>:after&#123;</span></span><br><span class="line"><span class="css">    content: <span class="built_in">attr</span>(alt);</span></span><br><span class="line"><span class="css">    <span class="attribute">text-align</span>:center;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;sky.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;蓝天白云&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="计数器"><a href="#计数器" class="headerlink" title="计数器"></a>计数器</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;元素&gt;:before&#123;</span><br><span class="line">  content: counter(计数器名, [计数器种类, 限定 list-style-type 值]);</span><br><span class="line">&#125;</span><br><span class="line">&lt;元素&gt;&#123;</span><br><span class="line">  counter-increment: before选择器中指定的计数器名;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="18-文字与字体相关样式"><a href="#18-文字与字体相关样式" class="headerlink" title="18 文字与字体相关样式"></a>18 文字与字体相关样式</h1><p><code>text-shadow</code>, <code>word-break</code>, <code>word-wrap</code> 等, 没什么好记的, 略.<br>一个值得注意的地方: 不同字体之间的相同文字所显示的大小可能有所不同, 可以通过 <code>font-size-adjust</code> 属性加以限制.  </p>
<h1 id="19-盒相关样式"><a href="#19-盒相关样式" class="headerlink" title="19 盒相关样式"></a>19 盒相关样式</h1><h2 id="19-1-盒的类型"><a href="#19-1-盒的类型" class="headerlink" title="19.1 盒的类型"></a>19.1 盒的类型</h2><p>使用 <code>display: &lt;type&gt;</code> 显式指定元素的不同类型</p>
<h3 id="19-1-1-盒的基本类型"><a href="#19-1-1-盒的基本类型" class="headerlink" title="19.1.1 盒的基本类型"></a>19.1.1 盒的基本类型</h3><ul>
<li>block 类型(<code>div</code>, <code>p</code>)等, 每一行只有一个, 宽度充满</li>
<li>inline 类型(<code>span</code>, <code>a</code>)等, 每行有多个, 无法指定宽度和高度</li>
</ul>
<h3 id="19-1-2-inline-block"><a href="#19-1-2-inline-block" class="headerlink" title="19.1.2 inline-block"></a>19.1.2 inline-block</h3><p>默认行为与 <code>inline</code> 相同, 但可以指定宽度和高度  </p>
<h3 id="19-1-3-inline-table"><a href="#19-1-3-inline-table" class="headerlink" title="19.1.3 inline-table"></a>19.1.3 inline-table</h3><p>可以将 <code>table</code> 元素指定成 <code>inline-table</code> 从而使表格和元素处于同一行  </p>
<h3 id="19-1-4-list-item"><a href="#19-1-4-list-item" class="headerlink" title="19.1.4 list-item"></a>19.1.4 list-item</h3><p>可将多个元素作为列表来显示, 同时在元素的开头加上列表的标记</p>
<h2 id="19-2-对于盒中容纳不下的内容的显示"><a href="#19-2-对于盒中容纳不下的内容的显示" class="headerlink" title="19.2 对于盒中容纳不下的内容的显示"></a>19.2 对于盒中容纳不下的内容的显示</h2><p>overflow 等属性, 略  </p>
<h2 id="19-3-对盒使用阴影"><a href="#19-3-对盒使用阴影" class="headerlink" title="19.3 对盒使用阴影"></a>19.3 对盒使用阴影</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">box-shadow</span>: [inset] length length length color</span><br><span class="line">/* inset 指是否为盒内阴影, 三个 length 分别指恒方向, 纵方向和阴影的模糊半径 */</span><br></pre></td></tr></table></figure>

<h2 id="19-4-指定针对元素的宽度和高度的计算方法"><a href="#19-4-指定针对元素的宽度和高度的计算方法" class="headerlink" title="19.4 指定针对元素的宽度和高度的计算方法"></a>19.4 指定针对元素的宽度和高度的计算方法</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">box-sizing</span>: [content-box | border-box]</span><br><span class="line">/* 默认为 content-box */</span><br><span class="line">/* content-box 不计算 padding 和 border, 而 border-box 计算 */</span><br></pre></td></tr></table></figure>

<h1 id="20-背景与边框相关样式"><a href="#20-背景与边框相关样式" class="headerlink" title="20 背景与边框相关样式"></a>20 背景与边框相关样式</h1><h2 id="20-1-与背景相关的新增属性"><a href="#20-1-与背景相关的新增属性" class="headerlink" title="20.1 与背景相关的新增属性"></a>20.1 与背景相关的新增属性</h2><ul>
<li>background-clip</li>
<li>background-origin</li>
<li>background-size</li>
<li>background-break 指定内联元素的背景图像进行平铺时的循环方式</li>
</ul>
<h3 id="20-1-1-background-clip"><a href="#20-1-1-background-clip" class="headerlink" title="20.1.1 background-clip"></a>20.1.1 background-clip</h3><p>指定背景的显示范围  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">  <span class="attribute">background-clip</span>: [border-box | padding-box | content-box];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="20-1-2-background-origin"><a href="#20-1-2-background-origin" class="headerlink" title="20.1.2 background-origin"></a>20.1.2 background-origin</h3><p>指定背景图像的绘制起点.<br>默认从内部补白(padding)区域的左上角开始绘制.  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">  <span class="attribute">background-origin</span>: [border-border-box | padding-box | content-box];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="20-1-3-background-size"><a href="#20-1-3-background-size" class="headerlink" title="20.1.3 background-size"></a>20.1.3 background-size</h3><p>指定背景图像的尺寸  </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">  <span class="attribute">background-size</span>: width height;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">  <span class="attribute">background-size</span>: contain;</span><br><span class="line">  <span class="comment">/* 维持横纵臂的前提下缩放, 使得原始图像的高度或宽度充满 div 以确保完整显示 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">  <span class="attribute">background-size</span>: cover;</span><br><span class="line">  <span class="comment">/* 维持横纵臂 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="20-1-4-background-repeat"><a href="#20-1-4-background-repeat" class="headerlink" title="20.1.4 background-repeat"></a>20.1.4 background-repeat</h3><p>平铺背景图像, 两个新增属性值: <code>space</code> 和 <code>around</code></p>
<ul>
<li><code>space</code> 不调整图像尺寸而调整图像间距</li>
<li><code>around</code> 调整图像尺寸而不调整图像间距<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">  <span class="attribute">background-repeat</span>: [space | around];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="20-2-在一个元素中使用多个背景图像"><a href="#20-2-在一个元素中使用多个背景图像" class="headerlink" title="20.2 在一个元素中使用多个背景图像"></a>20.2 在一个元素中使用多个背景图像</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">1.png</span>), <span class="built_in">url</span>(<span class="string">2.png</span>)</span><br><span class="line">  background-position: <span class="number">3%</span> <span class="number">98%</span>, center center, <span class="number">85%</span> top;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="20-3-使用渐变色背景"><a href="#20-3-使用渐变色背景" class="headerlink" title="20.3 使用渐变色背景"></a>20.3 使用渐变色背景</h2><h3 id="20-3-1-线性渐变"><a href="#20-3-1-线性渐变" class="headerlink" title="20.3.1 线性渐变"></a>20.3.1 线性渐变</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to bottom, orange, black);</span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">30deg</span>, orange <span class="number">0%</span>, red <span class="number">75%</span>, yellow <span class="number">100%</span>)</span><br></pre></td></tr></table></figure>

<h3 id="20-3-2-放射性渐变"><a href="#20-3-2-放射性渐变" class="headerlink" title="20.3.2 放射性渐变"></a>20.3.2 放射性渐变</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background</span>: <span class="built_in">radial-gradient</span>([circle | ellipse] [[direction] at position] color);</span><br></pre></td></tr></table></figure>

<h2 id="20-4-圆角边框的绘制"><a href="#20-4-圆角边框的绘制" class="headerlink" title="20.4 圆角边框的绘制"></a>20.4 圆角边框的绘制</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border-radius</span>: <span class="number">20px</span>;</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">20px</span> <span class="number">40px</span>;</span><br><span class="line"><span class="comment">/* 第一个参数为左上和右下角半径, 第二个为另外两角 */</span></span><br><span class="line"><span class="attribute">border</span>: none;</span><br><span class="line"><span class="comment">/* 当不显示边框时, 浏览器将把元素背景四个角画成圆角 */</span></span><br></pre></td></tr></table></figure>

<h2 id="20-5-使用图像边框"><a href="#20-5-使用图像边框" class="headerlink" title="20.5 使用图像边框"></a>20.5 使用图像边框</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border-image</span>: <span class="built_in">url</span>(<span class="string">1.png</span>) A B C D/border-width [topbottom leftright]</span><br><span class="line">/* A B C D 分别为四个方向上的 padding */</span><br><span class="line">/* topbottom leftright 决定图像在对应边上是平铺还是拉伸, 可选属性值包括 repeat, stretch */</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>notes</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>Neo4j</title>
    <url>/notes/Neo4j.html</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 清空所有数据  </span><br><span class="line">MATCH (n)</span><br><span class="line">OPTIONAL MATCH (n)-[r]-()</span><br><span class="line">// OPTIONAL MATCH语句用于搜索模式中描述的匹配项，对于找不到的项，用null代替；在Cypher语句中，类似于SQL语句中的outer join</span><br><span class="line">DELETE n,r</span><br></pre></td></tr></table></figure>
<h1 id="Neo4j-CQL"><a href="#Neo4j-CQL" class="headerlink" title="Neo4j CQL"></a>Neo4j CQL</h1><table>
<thead>
<tr>
<th align="left">语法元素</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">&lt;node-name&gt;</td>
<td align="left">节点名称。Neo4j 数据库服务器存储节点的根据</td>
</tr>
<tr>
<td align="left">&lt;label-name&gt;</td>
<td align="left">节点标签，作为内部节点名称的别称，应以此标签名称来访问节点详细信息</td>
</tr>
</tbody></table>
<h2 id="CREATE-命令"><a href="#CREATE-命令" class="headerlink" title="CREATE 命令"></a>CREATE 命令</h2><p>用于创建节点</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE(</span><br><span class="line">  &lt;node-name&gt;:&lt;label-name1&gt;:&lt;label-name2&gt;:...:&lt;label-namen&gt;</span><br><span class="line">  &#123;</span><br><span class="line">    &lt;Property1-name&gt;:&lt;Property1-Value&gt;</span><br><span class="line">    ...</span><br><span class="line">    &lt;Propertyn-name&gt;:&lt;Propertyn-Value&gt;</span><br><span class="line">  &#125;  </span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>用于创建关系</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE(</span><br><span class="line">  ( &lt;node1-name&gt;:&lt;label1-name&gt; )</span><br><span class="line">  -[ ( &lt;relationship-name&gt;:&lt;relationship-label-name&gt; ) ] -&gt;</span><br><span class="line">  ( &lt;node2-name&gt;:&lt;label2-name&gt; )</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>为已有的两个节点创建关系</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">match</span><br><span class="line">  (n:Person&#123;name:&quot;Vic&quot;&#125;),</span><br><span class="line">  (m:Person&#123;name:&quot;Andres&quot;&#125;)</span><br><span class="line">create</span><br><span class="line">  (n)-[r:Friend]-&gt;(m)</span><br><span class="line">return r;</span><br></pre></td></tr></table></figure>

<h2 id="MATCH-命令"><a href="#MATCH-命令" class="headerlink" title="MATCH 命令"></a>MATCH 命令</h2><p>从数据库中选取某些节点或关系，不能单独使用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MATCH(</span><br><span class="line">  &lt;node-name&gt;:&lt;label-name&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h2 id="RETURN-子句"><a href="#RETURN-子句" class="headerlink" title="RETURN 子句"></a>RETURN 子句</h2><p>检索节点和关系的属性，不能单独使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">RETURN</span><br><span class="line">  &lt;node-name&gt;.&lt;property1-name&gt;,</span><br><span class="line">  ...</span><br><span class="line">  &lt;node-name&gt;.&lt;propertyn-name&gt;</span><br></pre></td></tr></table></figure>

<h2 id="MATCH-amp-RETURN-匹配和返回"><a href="#MATCH-amp-RETURN-匹配和返回" class="headerlink" title="MATCH &amp; RETURN 匹配和返回"></a>MATCH &amp; RETURN 匹配和返回</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MATCH(</span><br><span class="line">  dept:Dept</span><br><span class="line">)RETURN</span><br><span class="line">  dept.deptno,</span><br><span class="line">  dept.dname</span><br></pre></td></tr></table></figure>

<h2 id="WHERE-子句"><a href="#WHERE-子句" class="headerlink" title="WHERE 子句"></a>WHERE 子句</h2><p>用于过滤 MATCH 匹配结果。<br>语法：<code>WHERE &lt;condition&gt; &lt;boolean-operator&gt; &lt;condition&gt;</code><br>&lt;condition&gt; 语法：<code>&lt;property-name&gt; &lt;comparison-operator&gt; &lt;value&gt;</code><br>&lt;boolean-operator&gt;=[AND|OR|NOT|XOR]<br>&lt;comparison-operator&gt;=[=|&lt;&gt;|&lt;|&gt;|&lt;=|&gt;=]  </p>
<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MATCH</span><br><span class="line">  (emp:Employee)</span><br><span class="line">WHERE</span><br><span class="line">  emp.name = &#x27;Abc&#x27;</span><br><span class="line">RETURN</span><br><span class="line">  emp</span><br></pre></td></tr></table></figure>

<h3 id="使用-WHERE-子句创建关系"><a href="#使用-WHERE-子句创建关系" class="headerlink" title="使用 WHERE 子句创建关系"></a>使用 WHERE 子句创建关系</h3><p>在 Neo4j CQL 中，创建节点之间的关系三种方式：  </p>
<ol>
<li>创建两个现有节点之间的关系</li>
<li>一次创建两个节点和他们之间的关系</li>
<li>使用 WHERE 子句创建两个现有节点之间的关系</li>
</ol>
<p>使用 WHERE 子句创建两个现有节点之间的关系语法：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MATCH</span><br><span class="line">  (&lt;nodel-name&gt;:&lt;node1-label-name&gt;),</span><br><span class="line">  (&lt;node2-name&gt;:&lt;node2-label-name&gt;)</span><br><span class="line">WHERE</span><br><span class="line">  &lt;condition&gt;</span><br><span class="line">CREATE</span><br><span class="line">  (&lt;node1-name&gt;)</span><br><span class="line">  -[&lt;relationship-name&gt;:&lt;relationship-label-name&gt;]-&gt;</span><br><span class="line">  (&lt;node2-name&gt;)</span><br></pre></td></tr></table></figure>

<h2 id="DELETE-删除"><a href="#DELETE-删除" class="headerlink" title="DELETE 删除"></a>DELETE 删除</h2><p>用于删除节点、节点及相关节点和关系，应与 MATCH 结合使用。<br>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DELETE &lt;node-name-list&gt;</span><br><span class="line">DELETE &lt;node1-name&gt;, &lt;node2-name&gt;, &lt;relationship-name&gt;</span><br></pre></td></tr></table></figure>
<p><code>MATCH (e:Employee) DELETE e</code></p>
<h2 id="REMOVE-删除"><a href="#REMOVE-删除" class="headerlink" title="REMOVE 删除"></a>REMOVE 删除</h2><p>删除节点或关系的现有属性或标签，应与 MATCH 结合使用。  </p>
<p>删除属性语法：<code>REMOVE &lt;property-name-list&gt;</code><br>&lt;property-name-list&gt;：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;node-name&gt;.&lt;property1-name&gt;,</span><br><span class="line">&lt;node-name&gt;.&lt;property2-name&gt;,</span><br><span class="line">...</span><br><span class="line">&lt;node-name&gt;.&lt;propertyn-name&gt;</span><br></pre></td></tr></table></figure>

<p>删除节点/关系的标签：<code>REMOVE &lt;label-name-list&gt;</code><br>&lt;label-name-list&gt;：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;node-name&gt;:&lt;label2-name&gt;,</span><br><span class="line">...</span><br><span class="line">&lt;node-name&gt;:&lt;labeln-name&gt;</span><br></pre></td></tr></table></figure>

<h2 id="SET-子句"><a href="#SET-子句" class="headerlink" title="SET 子句"></a>SET 子句</h2><p>向现有节点或关系添加新属性，添加或更新属性值。<br>SET 子句语法<code>SET &lt;property-name-list&gt;</code><br>&lt;property-name-list&gt;：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;node-name&gt;.&lt;property1-name&gt;,</span><br><span class="line">...</span><br><span class="line">&lt;node-name&gt;.&lt;propertyn-name&gt;</span><br><span class="line">```  </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>MATCH<br>  (dc:DebitCard)<br>SET<br>  dc.atm_pin = 3456<br>RETURN<br>  dc</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## ORDER BY  </span><br><span class="line">语法：`ORDER BY &lt;property-name-list&gt; [DESC]`  </span><br></pre></td></tr></table></figure>
<p>MATCH<br>  (emp:Employee)<br>RETURN<br>  emp.empid, emp.name, emp.salary, emp.deptno<br>ORDER BY<br>  emp.name</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## UNION  </span><br><span class="line">将两组结果中的公共行组合并返回到一组结果中，并删除重复的行。  </span><br><span class="line">结果列类型和来自两组结果的名称必须匹配，即列名称、数据类型应该相同。  </span><br><span class="line">可用 AS 修改列名。  </span><br></pre></td></tr></table></figure>
<MATCH command1>
  UNION
<MATCH command2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line">  MATCH</span><br><span class="line">    (cc:CreditCard)</span><br><span class="line">  RETURN</span><br><span class="line">    cc.id AS id, cc.number AS number</span><br><span class="line">UNION</span><br><span class="line">  MATCH</span><br><span class="line">    (dc:DebitCard)</span><br><span class="line">  RETURN</span><br><span class="line">    dc.id AS id, dc.number AS number</span><br></pre></td></tr></table></figure>

<h3 id="UNION-ALL"><a href="#UNION-ALL" class="headerlink" title="UNION ALL"></a>UNION ALL</h3><p>与 UNION 用法相同，但会返回重复行。</p>
<h2 id="LIMIT-amp-amp-SKIP"><a href="#LIMIT-amp-amp-SKIP" class="headerlink" title="LIMIT &amp;&amp; SKIP"></a>LIMIT &amp;&amp; SKIP</h2><p>限制查询返回的结果行数。LIMIT 省略底部，SKIP 省略首部。<code>[LIMIT|SKIP] &lt;number&gt;</code>  </p>
<h2 id="MERGE"><a href="#MERGE" class="headerlink" title="MERGE"></a>MERGE</h2><p>在图中搜索给定模式，如果存在，则返回结果。如果不存在则创建新的节点/关系并返回结果。语法同 CREATE 。</p>
<h2 id="NULL-值"><a href="#NULL-值" class="headerlink" title="NULL 值"></a>NULL 值</h2><p>Neo4j 将空值视为对节点或关系的属性缺失值或未定义值。  </p>
<h2 id="IN-操作符"><a href="#IN-操作符" class="headerlink" title="IN 操作符"></a>IN 操作符</h2><p><code>IN [&lt;Collection-of-values&gt;]</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MATCH (e:Employee)</span><br><span class="line">WHERE e.id IN [123, 124]</span><br><span class="line">RETURN e.id, e.name, e.sal, e.deptno</span><br></pre></td></tr></table></figure>

<h2 id="ID-属性"><a href="#ID-属性" class="headerlink" title="ID 属性"></a>ID 属性</h2><p>节点和关系默认内部属性，唯一标识一个实体，由Neo4j服务器内部分配，自动递增。  </p>
<h1 id="CQL-函数"><a href="#CQL-函数" class="headerlink" title="CQL 函数"></a>CQL 函数</h1><h2 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h2><table>
<thead>
<tr>
<th align="left">S.No.</th>
<th align="left">函数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1.</td>
<td align="left">UPPER</td>
<td align="left">将所有字母更改为大写字母。</td>
</tr>
<tr>
<td align="left">2.</td>
<td align="left">LOWER</td>
<td align="left">将所有字母更改为小写字母。</td>
</tr>
<tr>
<td align="left">3.</td>
<td align="left">SUBSTRING</td>
<td align="left">获取给定 String 的子字符串。</td>
</tr>
<tr>
<td align="left">4.</td>
<td align="left">REPALCE</td>
<td align="left">替换一个字符串的子字符串。</td>
</tr>
</tbody></table>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UPPER(&lt;input-string&gt;)</span><br><span class="line">LOWER(&lt;input-string&gt;)</span><br><span class="line">SUBSTRING(&lt;input-string&gt;, &lt;startIndex&gt;, &lt;endIndex&gt;)</span><br><span class="line">REPALCE(x.name, &quot;abC&quot;, &quot;Aaa&quot;)</span><br></pre></td></tr></table></figure>

<h2 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h2><p><code>COUNT, MAX, MIN, SUM, AVG</code> 类似于 SQL 的 GROUP BY 子句。</p>
<h2 id="关系函数"><a href="#关系函数" class="headerlink" title="关系函数"></a>关系函数</h2><p>用以获取关系开始节点、结束节点、类型等信息。  </p>
<table>
<thead>
<tr>
<th align="left">S.No.</th>
<th align="left">函数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1.</td>
<td align="left">STARTNODE</td>
<td align="left">获取关系的开始节点</td>
</tr>
<tr>
<td align="left">2.</td>
<td align="left">ENDNODE</td>
<td align="left">获取关系的结束节点</td>
</tr>
<tr>
<td align="left">3.</td>
<td align="left">ID</td>
<td align="left">获取关系的 ID</td>
</tr>
<tr>
<td align="left">4.</td>
<td align="left">TYPE</td>
<td align="left">获取关系类型（大概是标签），以字符串表示</td>
</tr>
</tbody></table>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MATCH (a)-[movie:ACTION_MOVIES]-&gt;(b)</span><br><span class="line">RETURN STARTNODE(movie)</span><br></pre></td></tr></table></figure>

<h1 id="Neo4j-Admin-管理员"><a href="#Neo4j-Admin-管理员" class="headerlink" title="Neo4j Admin 管理员"></a>Neo4j Admin 管理员</h1><h2 id="Neo4j-CQL-索引"><a href="#Neo4j-CQL-索引" class="headerlink" title="Neo4j CQL 索引"></a>Neo4j CQL 索引</h2><p>在某一属性上创建或删除索引，以提高应用程序的性能。  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE INDEX ON:&lt;label-name&gt;(&lt;property-name&gt;) 在某节点或关系的属性上创造索引。</span><br><span class="line">DROP INDEX ON:&lt;lable-name&gt;(&lt;property-name&gt;) 删除在某节点或关系的属性上创建的索引。</span><br></pre></td></tr></table></figure>

<h2 id="UNIQUE-约束"><a href="#UNIQUE-约束" class="headerlink" title="UNIQUE 约束"></a>UNIQUE 约束</h2><ul>
<li>避免重复记录。</li>
<li>强制执行数据完整性规则。  </li>
</ul>
<p>创建约束：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE CONSTRAINT ON (&lt;label-name&gt;) ASSERT &lt;property-name&gt; IS UNIQUE  </span><br><span class="line">保证 &lt;label-name&gt; 节点的 &lt;property-name&gt; 属性唯一</span><br></pre></td></tr></table></figure>

<p>删除约束：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DROP CONSTRAINT ON (&lt;label-name&gt;) ASSERT &lt;property-name&gt; IS UNIQUE  </span><br><span class="line">```  </span><br><span class="line"># Neo4j 和 Java  </span><br><span class="line"></span><br><span class="line">## Neo4j-Java 简介  </span><br><span class="line">+ Neo4j 原生 JAVA API。（纯 Java API ）</span><br><span class="line">+ Neo4j Cypher Java API  （用于执行 CQL 的 API）</span><br><span class="line"></span><br><span class="line">## Neo4j java 环境  </span><br><span class="line">所需依赖即 Neo4j 工程下的 lib</span><br><span class="line"></span><br><span class="line">## Neo4j 原生 JAVA API  </span><br><span class="line">示例：  </span><br></pre></td></tr></table></figure>
<p>// 在指定路径创建一个 Schema / Database，<br>GraphDatabaseFactory dbFactory = new GraphDatabaseFactory();<br>GraphDatabaseService db= dbFactory.newEmbeddedDatabase(“C:/TPNeo4jDB”);</p>
<p>// 开启事务以提交修改<br>try (Transaction tx = graphDb.beginTx()) {<br>    // Perform DB operations<br>    tx.success();<br>}</p>
<p>// 创建标签名称<br>enum Tutorials implements Label{<br>  JAVA, SCALA, SQL, NEO4j<br>}<br>// 创建节点并设置属性<br>Node javaNode = db.createNode(Tutorials.JAVA);<br>Node scalaNode = db.createNode(Tutorials.SCALA);<br>javaNode.setProperty(“TutorialsID”, “JAVA001”);<br>scalaNode.setProperty(“TutorialID”, “SCALA001”);</p>
<p>// 创建关系类型<br>enum TutorialRelationships implements RelationshipType{<br>  JVM_LANGUAGES, NON_JVM_LANGUAGES<br>}</p>
<p>// 创建关系并设置属性<br>Relationship rel = javaNode.createRelationshipTo(scalaNode, TutorialRelationships.JVM_LANGUAGES)<br>rel.setProperty(“Id”, “123”)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## Neo4j Cypher API 示例</span><br></pre></td></tr></table></figure>
<p>// 在指定路径创建一个 Schema / Database，<br>GraphDatabaseFactory dbFactory = new GraphDatabaseFactory();<br>GraphDatabaseService db= dbFactory.newEmbeddedDatabase(“C:/TPNeo4jDB”);</p>
<p>// 创建Neo4j Cypher执行引擎<br>ExecutionEngine execEngine = new ExecutionEngine(db);</p>
<p>// 执行 Cypher 语句<br>ExecutionResult execResult = execEngine.execute(“MATCH (java:JAVA) RETURN java”);</p>
<p>// 将结果转化为字符串输出<br>String results  = execResult.dumpToString();<br>System.out.println(results)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"># Neo4j 与 Spring DATA  </span><br><span class="line">## Spring DATA Neo4j 结构  </span><br><span class="line">提供四种不同的 API 来支持不同的场景  </span><br><span class="line">1. **GraphRepository** 执行基本的 Neo4j DB操作</span><br><span class="line">2. **GraphTemplate** 执行 Neo4j DB 操作的模板</span><br><span class="line">3. **CrudRepository** 用于 CQL 执行 Neo4j CRUD 操作  </span><br><span class="line">4. **PaginationAndSortingRepository** 执行 Neo4j CQL 查询结果的分页和排序</span><br><span class="line"></span><br><span class="line">## Spring DATA Neo4j 依赖  </span><br></pre></td></tr></table></figure>
<p>//Spring DATA Neo4j模块Jar文件<br>compile ‘org.springframework.data:spring-data-neo4j:3.1.2.RELEASE’<br>//Neo4j Jar文件，由Spring DATA Neo4j模块Jar文件内部使用<br>compile ‘org.neo4j:neo4j-kernel:2.1.3’<br>//Java事务API jar文件，由Spring DATA Neo4j模块Jar文件内部使用<br>compile ‘javax.transaction:jta:1.1’<br>//Java验证API jar文件，由Spring DATA Neo4j模块Jar文件内部使用<br>compile ‘javax.validation:validation-api:1.0.0.GA’</p>
<pre><code>
</code></pre>
</MATCH></MATCH>]]></content>
      <categories>
        <category>notes</category>
      </categories>
  </entry>
  <entry>
    <title>Java9模块式开发</title>
    <url>/notes/Java9%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91.html</url>
    <content><![CDATA[<h1 id="命令列表"><a href="#命令列表" class="headerlink" title="命令列表"></a>命令列表</h1><ul>
<li>java –describe-module <modulename><br>查看模块的模块描述符内容。</modulename></li>
</ul>
<h1 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h1><ul>
<li>requires 导入模块</li>
<li>requires transitive 传递式导入模块</li>
<li>exports 导出包</li>
<li>exports to 限定导出</li>
<li>provide Interface with class 只能使用全限定名，提供服务  </li>
<li>uses Interface 使用服务</li>
<li>requires static 编译时依赖，通过添加 static 引入的模块需要在编译时出现。在运行时调用该模块不存在仍会抛出 NoClassDefFoundError。</li>
</ul>
<h1 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h1><h2 id="JDK-中的聚合器模块"><a href="#JDK-中的聚合器模块" class="headerlink" title="JDK 中的聚合器模块"></a>JDK 中的聚合器模块</h2><table>
<thead>
<tr>
<th align="left">模块</th>
<th align="left">聚合</th>
</tr>
</thead>
<tbody><tr>
<td align="left">java.se</td>
<td align="left">所有正式属于 Java SE 规范的模块</td>
</tr>
<tr>
<td align="left">java.se.ee</td>
<td align="left">java.se 模块以及与 Java SE 平台捆绑在一起的所有 Java EE 模块</td>
</tr>
</tbody></table>
<p>Java 中的包是非层次结构的。不管外表如何，splitpackage 喝 splitpackage.internal 是两个不相关却共享相同前缀的包。  </p>
<p>普通的导入不可传递。<br>不允许循环 requires。<br>模块具有单独的命名空间。</p>
]]></content>
      <categories>
        <category>notes</category>
      </categories>
  </entry>
  <entry>
    <title>SpringBoot常用标签</title>
    <url>/notes/SpringBoot%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE.html</url>
    <content><![CDATA[<h1 id="1-注解列表"><a href="#1-注解列表" class="headerlink" title="1 注解列表"></a>1 注解列表</h1><ul>
<li>@SpringBootApplication<br>包含了@ComponentScan、@Configuration和@EnableAutoConfiguration。</li>
<li>@Configuration<br>等同于 Spring 的 XML 配置文件</li>
<li>@EnableAutoConfiguration<br>自动配置  </li>
<li>@Component  </li>
<li>@RestController <br><br>@Controller 和 @ResponseBody 的合集，表示这是个控制器，并将函数的返回值直接填入 HTTP 响应体中。</li>
<li>@Autowired<br>自动导入</li>
<li>@PathVariable<br>获取参数  </li>
<li>@JsonBackReference<br>解决嵌套外链问题  </li>
<li>@RepositoryRestResourcepublic</li>
</ul>
<h1 id="2-注解详解"><a href="#2-注解详解" class="headerlink" title="2 注解详解"></a>2 注解详解</h1><h3 id="SpringBootApplication"><a href="#SpringBootApplication" class="headerlink" title="@SpringBootApplication"></a>@SpringBootApplication</h3><p>申明让 SpringBoot 自动给程序进行必要的配置。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.example.myproject;</span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class Application&#123;</span><br><span class="line">  public static void main(String[] args)&#123;</span><br><span class="line">    SpringApplication.run(Application.class, args);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="ResponseBody"><a href="#ResponseBody" class="headerlink" title="@ResponseBody"></a>@ResponseBody</h2><p>表示改方法的返回结果直接写入 HTTP 报文的 response body 中。<br>在使用 @RequestMapping 后，返回值通常解析为跳转路径。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@RequestMapping(&quot;/test&quot;)</span><br><span class="line">@ResponseBody</span><br><span class="line">pulic String test()&#123;</span><br><span class="line">  return &quot;ok&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Controller"><a href="#Controller" class="headerlink" title="@Controller"></a>@Controller</h2><p>用于定义控制器类，在 Spring 项目中由控制器负责将用户发来的 URL 请求转发到对应的服务接口（service 层），一般这个注解在类中，通常方法要配合注解 @RequestMapping</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;/demoInfo&quot;)</span><br><span class="line">pulic class DemoController&#123;</span><br><span class="line">  @Autowired</span><br><span class="line">  private DemoInfoService demoInfoService;</span><br><span class="line"></span><br><span class="line">  @RequestMapping(&quot;/hello&quot;)</span><br><span class="line">  public String hello(Map&lt;String, Object&gt; map)&#123;</span><br><span class="line">    System.out.println(&quot;DemoController.hello()&quot;);</span><br><span class="line">    map.put(&quot;hello&quot;,&quot;from TemplateController.helloHtml&quot;);</span><br><span class="line">    return &quot;/hello&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="RestController"><a href="#RestController" class="headerlink" title="@RestController"></a>@RestController</h2><p>用于标注控制层组件，@ResponseBody 和 @Controller 的合集。</p>
<h2 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="@RequestMapping"></a>@RequestMapping</h2><p>提供路由信息，负责 URL 到 Controller 中的具体函数的映射</p>
<h2 id="EnableAutoConfiguration"><a href="#EnableAutoConfiguration" class="headerlink" title="@EnableAutoConfiguration"></a>@EnableAutoConfiguration</h2><p>SpringBoot 自动配置（auto-configuration）：尝试根据添加的 jar 依赖自动配置 Spring 应用。例如，如果 classpath 下存在 HSQLDB，并且没有手动配置任何数据库连接的 Beans，则 SpringBoot 将自动配置一个内存型( in-memory) 数据库。</p>
<h2 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan"></a>@ComponentScan</h2><p>定义扫描的路径，从中找标识了需要装配的类自动装配到 Spring 的 Bean 容器中。若不提供路径默认在同包内扫描。<br>默认装配标识了 @Controller, @Service, @Repository, @Component 注解的类到 Spring 容器中。<br>以上四个注解可以通过 value 指定 name。</p>
<h2 id="Configuraion"><a href="#Configuraion" class="headerlink" title="@Configuraion"></a>@Configuraion</h2><p>相当于传统的 XML 配置文件，可以使用 @ImportResource 注解加载 XML 配置文件。</p>
<h2 id="Import"><a href="#Import" class="headerlink" title="@Import"></a>@Import</h2><p>用来导入其他配置类  </p>
<h2 id="ImportResource"><a href="#ImportResource" class="headerlink" title="@ImportResource"></a>@ImportResource</h2><p>用来加载 XML 配置文件</p>
<h2 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a>@Autowired</h2><p>自动导入依赖的 Bean (byType 自动装配)</p>
<h2 id="Service"><a href="#Service" class="headerlink" title="@Service"></a>@Service</h2><p>一般用于修饰 Service 层的自建  </p>
<h2 id="Repository"><a href="#Repository" class="headerlink" title="@Repository"></a>@Repository</h2><p>确保 DAO 或者 Repositorys 提供异常转译。</p>
<h2 id="Bean"><a href="#Bean" class="headerlink" title="@Bean"></a>@Bean</h2><p>用于表示方法，表示该方法返回一个 Bean  </p>
<h2 id="Value"><a href="#Value" class="headerlink" title="@Value"></a>@Value</h2><p>注入 SpringBoot application.properties 配置的属性的值。  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Value(value = &quot;#&#123;message&#125;&quot;)</span><br><span class="line">private String message;</span><br></pre></td></tr></table></figure>

<h2 id="Inject"><a href="#Inject" class="headerlink" title="@Inject"></a>@Inject</h2><p>等价于默认的 @Autowired, 无 required 属性。</p>
<h2 id="Component"><a href="#Component" class="headerlink" title="@Component"></a>@Component</h2><p>泛指组件，当组件不好归类的时候，用这个注解进行标注  </p>
<h2 id="Qualifier"><a href="#Qualifier" class="headerlink" title="@Qualifier"></a>@Qualifier</h2><p>当有多个同一类型的 Bean 时，可以用 @Qualifier(“name”) 指定 Bean 的名字,提供更细粒度的控制。</p>
<h2 id="Resource-name-”name”-type-”type”"><a href="#Resource-name-”name”-type-”type”" class="headerlink" title="@Resource(name=”name”, type=”type”)"></a>@Resource(name=”name”, type=”type”)</h2><p>与 @Autowired 相同，区别为默认 byName 注入。</p>
]]></content>
      <categories>
        <category>notes</category>
      </categories>
  </entry>
  <entry>
    <title>SpringCloud</title>
    <url>/notes/SpringCloud.html</url>
    <content><![CDATA[<h1 id="0-目录"><a href="#0-目录" class="headerlink" title="0 目录"></a>0 目录</h1><p>[toc]</p>
<h1 id="1-基础知识"><a href="#1-基础知识" class="headerlink" title="1 基础知识"></a>1 基础知识</h1><ol>
<li><p>加载属性值  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;book.name&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br></pre></td></tr></table></figure></li>
<li><p>监控与管理: actuator 模块  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">compile(&quot;org.springframework.boot:spring-boot-starter-actuator&quot;)</span><br><span class="line">```  </span><br><span class="line">自动添加一批用于监控和获取配置的端点  </span><br><span class="line"></span><br><span class="line"># 2 服务治理：Spring Cloud Eureka  </span><br><span class="line">主要用来实现各个微服务实例的自动化注册与发现。</span><br><span class="line">高可用注册中心：所有结点既是服务提供方，又是服务消费方</span><br><span class="line">Eureka 服务治理基础架构的三个核心要素:  </span><br><span class="line">1. 服务注册中心(eureka-server): Eureka 提供的服务端，提供服务注册与发现的功能。  </span><br><span class="line">2. 服务提供者(DiscoveryClient): 提供服务的应用, 将自己提供的服务注册到 Eureka  </span><br><span class="line">3. 服务消费者(Ribbon, Feign等): 从服务注册中心获取服务列表.  </span><br><span class="line"></span><br><span class="line">## 2.1 配置详解  </span><br><span class="line">再实际使用 Spring Cloud Eureka 的过程中, 我们所作的配置内容几乎都是对 Eureka 客户端配置进行的操作  </span><br><span class="line">1. 服务注册相关的配置信息, 包括服务注册中心的地址, 服务获取的间隔时间, 可用区域等  </span><br><span class="line">2. 服务实例相关的配置信息, 包括服务实例的名称, IP地址, 端口号, 健康检查路径等  </span><br><span class="line"></span><br><span class="line">### 2.1.1 服务注册类配置  </span><br><span class="line">`org.springframework.cloud.netflix.eureka.EurekaClientConfigBean`  </span><br><span class="line">**指定注册中心**</span><br></pre></td></tr></table></figure>
<p>eureka.client.serviceUrl.defaultZone = http://<username>:<password>@host:port/eureka, url2, url3, …</password></username></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 2.1.2 服务实例类配置  </span><br><span class="line">`org.springframework.cloud.netflix.eureka.EurekaInstanceConfigBean`  </span><br><span class="line">使用 `eureka.instance.&lt;properties&gt;=&lt;value&gt;`的格式对标准化数据直接进行配置.  </span><br><span class="line">**实例名配置**  </span><br><span class="line">即 InstanceInfo 中的 instaceId 参数  </span><br><span class="line">默认值: 主机名  和 `$&#123;Spring.cloud.client.hostname&#125;:$&#123;spring.application.name&#125;:$&#123;spring.application.instance_id:$&#123;server.port&#125;&#125;`</span><br><span class="line">使用 `eureka.instance.instanceId` 进行配置  </span><br><span class="line"></span><br><span class="line">**健康检测**  </span><br><span class="line">可以通过以下配置将 Eureka 客户端的健康检测交给`spring-boot-actuator`模块的`/health`端点  </span><br><span class="line">1. 引入 `spring-boot-actuator` 模块的依赖</span><br><span class="line">2. 增加参数配置 `eureka.client.healthcheck.enabled=true`  </span><br><span class="line"></span><br><span class="line"># 3 客户端负载均衡 Spring Cloud Ribbon  </span><br><span class="line">实现客户端负载均衡:  </span><br><span class="line">1. 服务提供者将服务实例注册到一个注册中心或者多个相关联的注册中心</span><br><span class="line">2. 服务消费者直接直接通过`@LoadBalanced`修饰过的 RestTemplate 来实现面向服务的接口调用  </span><br><span class="line"></span><br><span class="line">## 3.1 RestTemplate  </span><br><span class="line">### 3.1.1 GET 请求  </span><br><span class="line">**`getForEntity`** 方法</span><br><span class="line">```java</span><br><span class="line">// getForEntity(String url, Class responseType, Map urlVariables)</span><br><span class="line">RestTemplate restTemplate = new RestTemplate();</span><br><span class="line">Map&lt;String, String&gt; params = new HashMap&lt;&gt;();</span><br><span class="line">params.put(&quot;name&quot;, &quot;data&quot;);</span><br><span class="line">ResponseEntity&lt;String&gt; responseEntity =</span><br><span class="line">  restTemplate.getForEntity(&quot;http://USER-SERVICE/user?name=&#123;name&#125;&quot;, String.class, params);</span><br><span class="line">String body = responseEntity.getBody();</span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>getForObject</strong><br>直接返回 response body, 无其它内容   </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// getForObject(String url, Class responseType, Object ... urlVariables);</span></span><br><span class="line">RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span><br><span class="line">User result = restTemplate.getForObject(uri, User.class);</span><br></pre></td></tr></table></figure>

<h3 id="3-1-2-POST-请求"><a href="#3-1-2-POST-请求" class="headerlink" title="3.1.2 POST 请求"></a>3.1.2 POST 请求</h3><ul>
<li><code>postForEntity(String url, Object requestData, Class reponseType, Object ... uriVariables)</code>  </li>
<li><code>postForObject(String url, Object requestData, Class repsonseTyp, Object ... uriVariables)</code></li>
</ul>
<h2 id="3-2-配置详解"><a href="#3-2-配置详解" class="headerlink" title="3.2 配置详解"></a>3.2 配置详解</h2><h3 id="3-2-1-自动化配置"><a href="#3-2-1-自动化配置" class="headerlink" title="3.2.1 自动化配置"></a>3.2.1 自动化配置</h3><p>在引入 Spring Cloud Ribbon 后, 项目自动化构建以下接口实现  </p>
<ul>
<li>IClientConfig: 客户端配置, <code>com.netflix.client.config.DefaultClientConfigIml</code></li>
<li>IRule: 负载均衡策列, <code>com.netflix.loadbalancer.ZoneAvoidanceRule</code></li>
<li>IPing: 实例检查策略, <code>com.netflix.loadbalancer.NoOpPing</code>, 默认所有服务实例可用  </li>
<li>ServerList<Server>: 服务实例清单的维护机制, <code>com.netflix.loadbalancer.ConfigurationBBasedServerList</code></Server></li>
<li>ServerListFilter<Server>: 服务实例清单过滤机制, <code>org.springframework.cloud.netflix.ribbon.ZonePreferenceServerListFilter</code>, 同区域服务实例优先</Server></li>
<li>ILoadBalancer: 复杂均衡器, <code>com.netflix.loadbalancer.ZoneAwareLoadBalancer</code>  </li>
</ul>
<h3 id="3-2-2-参数配置"><a href="#3-2-2-参数配置" class="headerlink" title="3.2.2 参数配置"></a>3.2.2 参数配置</h3><p><strong>全局配置</strong><br><code>ribbon.&lt;key&gt; = &lt;value&gt;</code><br><strong>指定客户端配置</strong><br><code>&lt;client&gt;.ribbon.&lt;key&gt; = &lt;value&gt;</code>  </p>
<h3 id="3-2-3-重试机制"><a href="#3-2-3-重试机制" class="headerlink" title="3.2.3 重试机制"></a>3.2.3 重试机制</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">loadbalancer:</span></span><br><span class="line">      <span class="attr">retry:</span></span><br><span class="line">        <span class="attr">enables:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">ConnectTimeout:</span> <span class="number">250</span></span><br><span class="line">  <span class="attr">ReadTimeout:</span> <span class="number">1000</span></span><br><span class="line">  <span class="attr">OkToRetryOnAllOperations:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">MaxAutoRetriesNextServer:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">MaxAutoRetries:</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启后当请求遇到故障时自动更换实例进行访问</span></span><br></pre></td></tr></table></figure>

<h1 id="4-服务容错保护-Spring-Cloud-Hystrix"><a href="#4-服务容错保护-Spring-Cloud-Hystrix" class="headerlink" title="4 服务容错保护: Spring Cloud Hystrix"></a>4 服务容错保护: Spring Cloud Hystrix</h1><p>Spring Cloud Hystrix 实现断路器, 线程隔离等一系列服务保护功能, 目标在于通过控制那些访问远程系统, 服务和第三方库的节点, 从而对延迟和故障提供更强大的容错能力.<br>Hystrix 具备服务降级, 服务熔断, 线程和信号隔离, 请求缓存, 请求合并和服务监控等功能.<br>Hystrix 使用命令模式将来自客户端的请求封装成一个对象.  </p>
<h2 id="4-1-使用详解"><a href="#4-1-使用详解" class="headerlink" title="4.1 使用详解"></a>4.1 使用详解</h2><h3 id="4-1-1-创建请求命令"><a href="#4-1-1-创建请求命令" class="headerlink" title="4.1.1 创建请求命令"></a>4.1.1 创建请求命令</h3><p>Hystrix 命令即 <code>HystrixCommand</code>, 用于封装具体的依赖服务调用逻辑.  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserCommand</span> <span class="keyword">extends</span> <span class="title">HystrixCommand</span>&lt;<span class="title">User</span>&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line">  <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">UserCommand</span><span class="params">(Setter setter, RestTemplate restTemplate, Long id)</span></span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(setter);</span><br><span class="line">    <span class="keyword">this</span>.restTemplate = restTemplate;</span><br><span class="line">    <span class="keyword">this</span>.id = id;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> User <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> restTemplate.getForObject(<span class="string">&quot;http://USER-SERVICE/users/&#123;1&#125;&quot;</span>, User.class, id);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>同步执行: <code>User u = new UserCommand(restTemplate, 1L).execute();</code></li>
<li>异步执行: <code>Future&lt;User&gt; futureUser = new UserCommand(restTemplate, 1L).queue();</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回一个发射多次的 Observable</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserObservableCommand</span> <span class="keyword">extends</span> <span class="title">HystrixObservableCommand</span>&lt;<span class="title">User</span>&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line">  <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">UserObservableCommand</span><span class="params">(Setter setter, RestTemplate restTemplate, Long id)</span></span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(setter);</span><br><span class="line">    <span class="keyword">this</span>.restTemplate = restTemplate;</span><br><span class="line">    <span class="keyword">this</span>.id = id;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> Observable&lt;User&gt; <span class="title">construct</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Observable.create(<span class="keyword">new</span> Observable.OnSubscribe&lt;User&gt;()&#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> User&gt; observer)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">          <span class="keyword">if</span>(!observer.isUnsubcribed())&#123;</span><br><span class="line">            User user = restTemplate.getForObject(<span class="string">&quot;http://USER-SERVICE/users/&#123;1&#125;&quot;</span>, User.class, id);</span><br><span class="line">            observer.onNext(user);</span><br><span class="line">            observer.onCompletes();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">          observer.onError(e);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-1-2-定义服务降级"><a href="#4-1-2-定义服务降级" class="headerlink" title="4.1.2 定义服务降级"></a>4.1.2 定义服务降级</h3><p>fallback 是 Hystrix 命令执行失败(错误, 超时, 线程池拒绝, 断路器熔断等)时使用的后备方法, 用于实现服务的降级处理逻辑.<br>在继承 <code>HystrixCommand</code> 的类中可以重载 <code>getFallback()</code> 方法.<br>在继承 <code>HystrixObservableCommand</code> 的类中可以重载 <code>resumeWithFallback</code> 方法.  </p>
<h3 id="4-1-3-异常处理"><a href="#4-1-3-异常处理" class="headerlink" title="4.1.3 异常处理"></a>4.1.3 异常处理</h3><p><strong>异常传播</strong><br>在执行 <code>HystrixCommand</code> 实现的方法中抛出异常时, 除了 <code>HystrixBadRequestException</code> 外均会进入服务降级逻辑, 可以通过注解忽略指定异常类型 <code>@HystrixCommand(ignoreExceptions = &#123;BadRequestException.class&#125;)</code><br><strong>异常获取</strong>  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@HystrixCommand(fallbackMethod = &quot;fallback1&quot;)</span></span><br><span class="line"><span class="function">User <span class="title">getUserById</span><span class="params">(String id)</span></span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;getUserById command failed&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">User <span class="title">fallback1</span><span class="params">(String id, Throwable e)</span></span>&#123;</span><br><span class="line">  <span class="keyword">assert</span> <span class="string">&quot;get UserById command failed&quot;</span>.equals(e.getMessage())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>命令名称, 分组以及线程池划分``</strong><br>通过设置命令组, Hystrix 会根据组来组织和统计命令的告警和仪表盘等信息, 默认情况下相同组名的命令使用同一个线程池  </p>
<h3 id="4-1-4-请求缓存"><a href="#4-1-4-请求缓存" class="headerlink" title="4.1.4 请求缓存"></a>4.1.4 请求缓存</h3><p>在高并发的场景下, Hystrix 提供了请求缓存的功能<br>当不同的外部请求处理逻辑调用了同一个依赖服务时, Hystrix 会根据 cacheKey 判断缓存.<br>可以通过<code>HystrixRequestCache.clear()</code>方法来进行缓存的清理.<br>使用 <code>@CacheResult</code> 开启缓存<br>使用 <code>@CacheKey</code> 指定缓存 key(可指定 object 的内部属性)<br>使用 <code>@CacheRemove</code> 来实现失效缓存的清理</p>
<h3 id="4-1-5-请求合并"><a href="#4-1-5-请求合并" class="headerlink" title="4.1.5 请求合并"></a>4.1.5 请求合并</h3><p>Hystrix 提供 <code>HystrixCollapser</code> 实现请求的合并以减少通信消耗和线程数的占用.  </p>
]]></content>
      <categories>
        <category>notes</category>
      </categories>
  </entry>
  <entry>
    <title>SpringMVC</title>
    <url>/notes/SpringMVC.html</url>
    <content><![CDATA[<h1 id="Spring-MVC-简介"><a href="#Spring-MVC-简介" class="headerlink" title="Spring MVC 简介"></a>Spring MVC 简介</h1><h2 id="第一个-Spring-MVC-应用"><a href="#第一个-Spring-MVC-应用" class="headerlink" title="第一个 Spring MVC 应用"></a>第一个 Spring MVC 应用</h2><h3 id="DispatcherServlet"><a href="#DispatcherServlet" class="headerlink" title="DispatcherServlet"></a>DispatcherServlet</h3><p>&emsp;&emsp;作为调度控制的 Servlet, 充当前端控制器<br><strong>配置信息如下:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line">  &lt;servlet-name&gt;springmvc&lt;/servlet-name&gt;</span><br><span class="line">  &lt;servlet-class&gt;</span><br><span class="line">    org.springframework.web.servlet.DispatcherServlet</span><br><span class="line">  &lt;/servlet-class&gt;</span><br><span class="line">  &lt;init-param&gt;</span><br><span class="line">    &lt;!-- 指定 Spring MVC 配置文件路径 --&gt;</span><br><span class="line">    &lt;param-name&gt;</span><br><span class="line">      contextConfigLocation</span><br><span class="line">    &lt;/param-name&gt;</span><br><span class="line">    &lt;param-value&gt;</span><br><span class="line">      /WEB-INF/springmvc-config.xml</span><br><span class="line">    &lt;/param-value&gt;</span><br><span class="line">    &lt;!-- 在 Web 应用启动时立即加载 --&gt;</span><br><span class="line">    &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</span><br><span class="line">&lt;/servlet&gt;</span><br><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">  &lt;servlet-name&gt;springmvc&lt;/servlet-name&gt;</span><br><span class="line">  &lt;url-pattern&gt;/&lt;/url-pattern&gt;</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure>
<h3 id="基于-Controller-接口的控制器"><a href="#基于-Controller-接口的控制器" class="headerlink" title="基于 Controller 接口的控制器"></a>基于 Controller 接口的控制器</h3><p>Spring MVC 被 Dispatcher 分发任务处理请求的 JAVA 类, 在 Spring2.5 版本以前, 实现的唯一方法时实现 <code>org.springframework.web.servlet.mvc.Controller</code> 接口.<br><strong>方法定义 <code>ModleAndView handleRequeset(HttpServletRequest request, HttpServletResponse response) throws Exception</code></strong>  </p>
<p><strong>springmvc-config.xml</strong>  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;</span><br><span class="line">    &lt;!--配置Handle, 映射&quot;/hello&quot;请求--&gt;</span><br><span class="line">    &lt;bean name=&quot;/hello&quot; class=&quot;SpringMVC.HelloController&quot;/&gt;</span><br><span class="line">    &lt;!--处理映射器将 bean 的 name 作为　url 进行查找, 需要在配置 Handle 时 指定 url--&gt;</span><br><span class="line">    &lt;bean class=&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;/&gt;</span><br><span class="line">    &lt;!-- SimpleControllerHandlerAdapter 是一个处理器适配器, 所有的适配器都要实现 HandlerAdapter 接口--&gt;</span><br><span class="line">    &lt;bean class=&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot;/&gt;</span><br><span class="line">    &lt;!-- 视图解析器 --&gt;</span><br><span class="line">    &lt;bean class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;/&gt;</span><br><span class="line">    &lt;!-- 基于注解的配置 --&gt;</span><br><span class="line">    &lt;!-- spring 可以自动去扫描 base-package 包下的 java 文件--&gt;</span><br><span class="line">    &lt;context:component-scan base-package=&quot;SpringMVC&quot;/&gt;</span><br><span class="line">    &lt;!-- 配置 annotation 类型的处理映射器--&gt;</span><br><span class="line">    &lt;bean class=&quot;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping&quot;/&gt;</span><br><span class="line">    &lt;!--配置 annotation 类型的处理适配器--&gt;</span><br><span class="line">    &lt;bean class=&quot;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter&quot;/&gt;</span><br><span class="line">    &lt;!----&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>
<h3 id="基于注解的控制器"><a href="#基于注解的控制器" class="headerlink" title="基于注解的控制器"></a>基于注解的控制器</h3><h2 id="Spring-MVC-执行的流程"><a href="#Spring-MVC-执行的流程" class="headerlink" title="Spring MVC 执行的流程"></a>Spring MVC 执行的流程</h2><p>控制器实际由两部分组成, Dispatcher 和 Controller  </p>
<ol>
<li>用户向服务器发送请求.</li>
<li>Dispatcher 截获请求并解析, 调用 HandlerMapping 获得该 Handler 配置的所有相关对象.</li>
<li>DispatcherServlet 根据获得的 Handler, 选择一个合适的 HandlerAdapter, 调用 Handler 实际处理请求的方法.  </li>
<li>提取请求冲的模型数据, 开始执行 Handler.  </li>
<li>Handler 执行完成后, 向 Dispatcher 返回一个包含视图名和模型的 ModelAndView 对象.</li>
<li>选择合适的 ViewResolver(视图解析器)</li>
<li>ViewResolver 结合 Model 和 View 来渲染视图  </li>
<li>将视图渲染结果返回给客户端.  </li>
</ol>
<h1 id="Spring-MVC-常用注解"><a href="#Spring-MVC-常用注解" class="headerlink" title="Spring MVC 常用注解"></a>Spring MVC 常用注解</h1><h2 id="Controller"><a href="#Controller" class="headerlink" title="@Controller"></a>@Controller</h2><p>&emsp;&emsp;用于 指示 Spring 类的实例是一个控制器, 可以支持同时处理过个请求动作.<br>&emsp;&emsp;Spring 使用扫描机制查找应用程序中所有基于注解的控制器类.  </p>
<p><strong>保证　Spring 能找到控制器类需要完成的两件事情：</strong>  </p>
<ol>
<li>在 Spring MVC 的配置文件的头文件中引入 spring-context  </li>
<li>使用 <a href="context:component-scan/">context:component-scan/</a> 元素, 该元素功能: 启动包扫描功能, 以便注册带有 @Controller, @Service, @repository, @Component 等注解类成为 Spring 的 bean<br><code>&lt;context:component-scan base-package=&quot;  &quot;/&gt;</code>  </li>
</ol>
<p><strong>用于参数绑定的注解</strong>(修饰处理方法参数)   </p>
<ol>
<li>处理 requset body 部分的注解: <code>@RequsetParam</code>, <code>@RequesBody  </code></li>
<li>处理 request uri 部分的注解: <code>@PathVariable  </code></li>
<li>处理 request header 部分的注解: <code>@RequestHeader</code>, <code>@CookieValue</code></li>
<li>处理 attribute 类型的注解: <code>@SessionAttributes</code>, <code>@ModelAttribute</code>  </li>
</ol>
<h2 id="RequestMapping-注解"><a href="#RequestMapping-注解" class="headerlink" title="@RequestMapping 注解"></a>@RequestMapping 注解</h2><p><strong>用作指示 Spring 用哪一个类或方法来处理请求动作, 该注解可用于类或方法</strong>  </p>
<h3 id="属性值"><a href="#属性值" class="headerlink" title="属性值"></a>属性值</h3><h4 id="value-属性"><a href="#value-属性" class="headerlink" title="value 属性"></a>value 属性</h4><p>&emsp;&emsp;将 url 映射到方法上  </p>
<h4 id="method-属性"><a href="#method-属性" class="headerlink" title="method 属性"></a>method 属性</h4><p>&emsp;&emsp; 指示该方法处理哪些 HTTP 请求方式<br>&emsp;&emsp; <code>method=&#123;RequestMethod.POST, RequestMethod.GET&#125;</code><br>&emsp;&emsp;<strong>如果没有指定属性值, 表示该方法处理任意 HTTP 请求方式</strong>  </p>
<h4 id="consumes-属性"><a href="#consumes-属性" class="headerlink" title="consumes 属性"></a>consumes 属性</h4><p>&emsp;&emsp;指定处理请求的 Content-Type<br>&emsp;&emsp;<code>consumes=&quot;application/json&quot;</code> 标识仅处理 request Content-Type 为 “application/json” 类型的请求  </p>
<h4 id="produces-属性"><a href="#produces-属性" class="headerlink" title="produces 属性"></a>produces 属性</h4><p>&emsp;&emsp;指定返回的内容类型 (必须是 request 请求头中 Accept 所包含的类型)<br>&emsp;&emsp;<code>produces=&quot;application/json&quot;</code></p>
<h4 id="params-属性"><a href="#params-属性" class="headerlink" title="params 属性"></a>params 属性</h4><p>&emsp;&emsp;指定 request 中必须包含某些参数值时才处理该请求.<br>&emsp;&emsp;<code>params=&quot;myParam=myValue&quot;</code><br>&emsp;&emsp;表示该方法仅处理包含名为 “myParam”, 值为”myValue” 的请求  </p>
<h4 id="headers-属性"><a href="#headers-属性" class="headerlink" title="headers 属性"></a>headers 属性</h4><p>&emsp;&emsp;指定 request 中必须包含某些特定的 header 值, 才能让该方法处理请求.<br>&emsp;&emsp;<code>headers=&quot;Referer=http://www.fkit.org&quot;</code><br>&emsp;&emsp;方法仅处理 request 的 header 中包含了指定了 “Referer” 请求头和对应值为 “<a href="http://www.fkit.org&quot;/">http://www.fkit.org&quot;</a></p>
<h3 id="请求处理方法可以出现的参数类型和返回值类型"><a href="#请求处理方法可以出现的参数类型和返回值类型" class="headerlink" title="请求处理方法可以出现的参数类型和返回值类型"></a>请求处理方法可以出现的参数类型和返回值类型</h3><h4 id="参数类型"><a href="#参数类型" class="headerlink" title="参数类型"></a>参数类型</h4><ol>
<li>javax.servlet.ServletRequest</li>
<li>javax.servlet.HttpServletRequest</li>
<li>javax.servlet.ServletResponse</li>
<li>javax.servlet.HttpServletResponse</li>
<li>javax.servlet.HttpSession</li>
<li>org.springframework.web.context.request.WebRequest</li>
<li>org.springframework.web.context.request.NativeWebRequest</li>
<li>java.util.getLocale</li>
<li>java.io.InputStream</li>
<li>java.io.Reader</li>
<li>java.io.OutputStream</li>
<li>java.io.Writer</li>
<li>java.security.Principal</li>
<li>HttpEntity&lt;?&gt;</li>
<li>java.util.Map</li>
<li>org.springframework.ui.Model</li>
<li>org.springframework.ui.ModelMap</li>
<li>org.springframework.web.servlet.mvc.support.RedirectAttributes</li>
<li>org.springframework.validation.Errors</li>
<li>org.springframework.validation.BindingResult</li>
<li>org.springframework.web.bind.support.SessionStatus</li>
<li>org.springframework.web.util.UriComponentsBuilder</li>
<li>@PathVariable, @MatrixVariable</li>
<li>@RequestParam, @RequestHeader, @RequestBody, @RequsetPart  </li>
</ol>
<p>&emsp;&emsp;<code>org.springframework.ui.Model</code> 类型, 包含了 Map 对象来存储数据, 如果方法中添加了 Model  参数, 则每次调用请求处理方法时, Spring MVC 都会创建 Model 对象, 并将其作为参数传递给方法.  </p>
<h4 id="返回值类型"><a href="#返回值类型" class="headerlink" title="返回值类型"></a>返回值类型</h4><ol>
<li>org.framework.web.portlet.ModelAndView</li>
<li>org.springframework.ui.Model</li>
<li>java.util.Map&lt;k, v&gt;</li>
<li>org.springframework.web.servlet.View</li>
<li>java.lang.String</li>
<li>HttpEntity 或 ResponseEntity</li>
<li>java.util.concurrent.Callable</li>
<li>org.springframework.web.context.request.async.DeferredResult</li>
<li>void</li>
</ol>
<h3 id="Model-和-ModelAndView"><a href="#Model-和-ModelAndView" class="headerlink" title="Model 和 ModelAndView"></a>Model 和 ModelAndView</h3><p>&emsp;&emsp;对于 MVC 框架, 控制器(Controller) 执行业务逻辑, 用于产生模型数据(Model), 而视图(View) 用于渲染模型数据<br>&emsp;&emsp;Model 仅包含数据, ModelAndView 同时包含视图, 均实现了 Map 接口<br><strong>添加数据<code>addObject(String attributeName, Object attribureValue)</code></strong><br><strong>ModleAndView 设置视图</strong><code>setViewName(String viewName)</code>  </p>
<h2 id="参数绑定注解"><a href="#参数绑定注解" class="headerlink" title="参数绑定注解"></a>参数绑定注解</h2><h3 id="RequestParam-注解"><a href="#RequestParam-注解" class="headerlink" title="@RequestParam 注解"></a>@RequestParam 注解</h3><p>&emsp;&emsp;用于将指定的请求参数赋值给方法中的形参  </p>
<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">类型</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">name/value</td>
<td align="left">String</td>
<td align="left">指定请求头绑定的名称</td>
</tr>
<tr>
<td align="left">required</td>
<td align="left">boolean</td>
<td align="left">参数是否必须绑定<del>(在请求url 中显示指明)</del></td>
</tr>
<tr>
<td align="left">default</td>
<td align="left">String</td>
<td align="left">如果没有传递参数而使用的默认值</td>
</tr>
</tbody></table>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public ModelAndView login(</span><br><span class="line">  @RequestParam(value=&quot;loginname&quot;, required=true, defaultValue=&quot;admin&quot;)</span><br><span class="line">  )</span><br></pre></td></tr></table></figure>

<h3 id="PathVariable-注解"><a href="#PathVariable-注解" class="headerlink" title="@PathVariable 注解"></a>@PathVariable 注解</h3><p>&emsp;&emsp;获得请求 URL 中的动态参数, 只支持一个类型为 String 的属性 value ,表示绑定的名称, 省略则默认绑定同名参数  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@RequestMapping(value=&quot;/pathVariableTest/&#123;userId&#125;&quot;)</span><br><span class="line">public void pathVariableTest(@PathVariable Integer userId)</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;如果请求的 URL 为 “<a href="http://localhost:8080/DataBindingTest/pathVariableTest/1&quot;">http://localhost:8080/DataBindingTest/pathVariableTest/1&quot;</a> 则自动将 URL 中模板变量{userId}} 绑定到 userId:Integer 上. 即 userId 变量将被赋值为 1  </p>
<h3 id="RequestHeader-注解"><a href="#RequestHeader-注解" class="headerlink" title="@RequestHeader 注解"></a>@RequestHeader 注解</h3><p>&emsp;&emsp;用于将请求的头信息映射到处理方法的参数上, 与 @RequestParam 用法<del>相同</del>相似</p>
<h3 id="CookieValue-注解"><a href="#CookieValue-注解" class="headerlink" title="@CookieValue 注解"></a>@CookieValue 注解</h3><p>&emsp;&emsp;映射 Cookie, <del>同上</del>  </p>
<h3 id="SessionAttributes-注解"><a href="#SessionAttributes-注解" class="headerlink" title="@SessionAttributes 注解"></a>@SessionAttributes 注解</h3><p>&emsp;&emsp;有选择地指定 Model 中的哪些属性需要转存到 HttpSession 对象当中  </p>
<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">类型</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">names/value</td>
<td align="left">String[]</td>
<td align="left">Model 中属性的名称, 即存储在 HttpSession 中的属性名称</td>
</tr>
<tr>
<td align="left">types</td>
<td align="left">Class&lt;?&gt;[]</td>
<td align="left">指定对象类型<del>参数是否必须绑定</del></td>
</tr>
</tbody></table>
<h3 id="ModelAttribute-注解"><a href="#ModelAttribute-注解" class="headerlink" title="@ModelAttribute 注解"></a>@ModelAttribute 注解</h3><p>&emsp;&emsp;将请求参数绑定到 Model 对象.<br>&emsp;&emsp;只支持一个类型为 String 的 value 属性, 表示绑定的属性名称.<br><strong>被该注解标识的方法会在 Controller 每个方法执行前被执行</strong>  </p>
]]></content>
      <categories>
        <category>notes</category>
      </categories>
  </entry>
  <entry>
    <title>Gradle</title>
    <url>/notes/gradle.html</url>
    <content><![CDATA[<h1 id="Gradle"><a href="#Gradle" class="headerlink" title="Gradle"></a>Gradle</h1><h2 id="构建基础"><a href="#构建基础" class="headerlink" title="构建基础"></a>构建基础</h2><p>&emsp;&emsp;Gradle 脚本采用 Groovy 书写</p>
<h3 id="Project-和-Task"><a href="#Project-和-Task" class="headerlink" title="Project 和 Task"></a>Project 和 Task</h3><p>&emsp;&emsp;任何一个 Gradle 构建都是由一个或多个 projects 组成.每个 project 包括许多可构建组成部分, 可以是一个 jar 包或者一个 web 应用, 也可以是一个由许多其他项目中产生的 jar 构成的 zip 包<br>&emsp;&emsp;Gradle 的 build-by-convention 来具体定义一个 project 到底该做什么<br>&emsp;&emsp;每个 Project 含有多个 Task, 每个 Task 都进行一<br>种原子操作  </p>
<h3 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h3><p>&emsp;&emsp; 可以在命令行运行 gradle 命令执行构建, 会从当前目录下寻找 build.gradle 文件来执行构建. 称 build.gradle 文件为构建 (配置) 脚本, 定义了一个 project 和一些默认的 task</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">task hello&#123;</span><br><span class="line">  doLast&#123;</span><br><span class="line">    println &#x27;hello world&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行: gradle -q hello (-q 参数的作用为控制 gradle 的日志级别, 可以保障只输出我们所需要的内容)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Output of gradle -q hello</span><br><span class="line">&gt; gradle -q hello</span><br><span class="line">hello world</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;定义了一个叫做 hello 的 task, 当执行 gradle hello 的时候, Gradle 会去调用 hello 这个任务执行给定操作 (实际上就是一个用 groovy 书写的闭包)</p>
<h3 id="快速定义任务"><a href="#快速定义任务" class="headerlink" title="快速定义任务"></a>快速定义任务</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">task hello &lt;&lt;&#123;</span><br><span class="line">  println &#x27;hello world&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Groovy 中 ‘ ‘ 和” “ 区别: 单引号定义的字符串不提供运算功能  </p>
</blockquote>
<h3 id="任务依赖"><a href="#任务依赖" class="headerlink" title="任务依赖"></a>任务依赖</h3><p>&emsp;&emsp;在两个任务之间通过 dependsOn 指明依赖关系, 对定义的先后顺序无要求<br>build.gradle</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">task hello &lt;&lt; &#123;</span><br><span class="line">  println &#x27;hello world!&#x27;</span><br><span class="line">&#125;</span><br><span class="line">task intro(dependsOn: hello) &lt;&lt;&#123;</span><br><span class="line">  println &quot;I&#x27;m Gradle&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Output of gradle -q intro  (这里跟继承好像…)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; gradle -q intro</span><br><span class="line">  hello world!</span><br><span class="line">  I&#x27;m Gradle</span><br></pre></td></tr></table></figure>

<h3 id="动态任务"><a href="#动态任务" class="headerlink" title="动态任务"></a>动态任务</h3><p>build.gradle</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4.times&#123;</span><br><span class="line">  counter -&gt;</span><br><span class="line">  task &quot;task$counter&quot; &lt;&lt;&#123;</span><br><span class="line">      println &quot;I&#x27;m task number $counter&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Output of gradle -q task1</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; gradle -q task1</span><br><span class="line">  I&#x27;m task number 1</span><br></pre></td></tr></table></figure>
<h3 id="任务操纵"><a href="#任务操纵" class="headerlink" title="任务操纵"></a>任务操纵</h3><p>&emsp;&emsp;任务被创建之后, 可以通过 API 进项相互访问.  </p>
<h4 id="增加依赖"><a href="#增加依赖" class="headerlink" title="增加依赖"></a>增加依赖</h4><p>build.gradle  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4.times&#123;</span><br><span class="line">  counter -&gt;</span><br><span class="line">  task &quot;task$counter&quot; &lt;&lt;&#123;</span><br><span class="line">    println &quot;I&#x27;m task number $counter&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">task0.dependsOn task2, task3</span><br></pre></td></tr></table></figure>
<p>Output of gradle -q task0</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; gradle -q task0</span><br><span class="line">I&#x27;m task number 2</span><br><span class="line">I&#x27;m task number 3</span><br><span class="line">I&#x27;m task number 0</span><br></pre></td></tr></table></figure>
<h4 id="增加行为"><a href="#增加行为" class="headerlink" title="增加行为"></a>增加行为</h4><p>build.gradle</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">task hello &lt;&lt;&#123;</span><br><span class="line">  println &#x27;Hello Earth&#x27;</span><br><span class="line">&#125;</span><br><span class="line">hello.doFirst&#123;</span><br><span class="line">  println &#x27;Hello Venus&#x27;</span><br><span class="line">&#125;</span><br><span class="line">hello.doLast&#123;</span><br><span class="line">  println &#x27;Hello mars&#x27;</span><br><span class="line">&#125;</span><br><span class="line">hello &lt;&lt;&#123;</span><br><span class="line">  println &#x27;Hello Jupiter&#x27;</span><br><span class="line">&#125;</span><br><span class="line">Output of gradle -q hello</span><br><span class="line">&gt; gradle -q hello</span><br><span class="line">Hello Venus</span><br><span class="line">Hello Earth</span><br><span class="line">Hello Mars</span><br><span class="line">Hello Jupiter</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;任务按照顺序执行行为<br>&emsp;&emsp;doFirst 和 doLast 可进行多次调用, 分别在任务的开端和结尾添加行为, &lt;&lt; 操作符为 doLast 简写<br>&emsp;&emsp;每个任务中的行为都是任务的属性 可以通过 <code>.</code>访问符号 访问</p>
<h4 id="增加自定义属性"><a href="#增加自定义属性" class="headerlink" title="增加自定义属性"></a>增加自定义属性</h4><p>&emsp;&emsp;通过 ext 设置属性, 如新增一个 myProperty的属性<br><code>ext.myProperty = &quot;myValue&quot;</code><br>build.gradle</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">task myTask&#123;</span><br><span class="line">  ext.myProperty = &quot;myValue&quot;</span><br><span class="line">&#125;</span><br><span class="line">task printTaskProperties &lt;&lt;&#123;</span><br><span class="line">  println myTask.myProperty</span><br><span class="line">&#125;</span><br><span class="line">Output of gradle -q printTaskProperties</span><br><span class="line">&gt; gradle -q printTaskProperties</span><br><span class="line">myValue</span><br></pre></td></tr></table></figure>
<h3 id="调用-Ant-任务-虽然没学过-Ant-就是了"><a href="#调用-Ant-任务-虽然没学过-Ant-就是了" class="headerlink" title="调用 Ant 任务 (虽然没学过 Ant 就是了)"></a>调用 Ant 任务 (虽然没学过 Ant 就是了)</h3><p>&emsp;&emsp;Ant 任务时 Gradle 中的一等公民. 自带一个 AntBuilder.  (<code>ant.</code> 调用??)</p>
<h3 id="定义方法-函数"><a href="#定义方法-函数" class="headerlink" title="定义方法(函数)"></a>定义方法(函数)</h3><p>&emsp;&emsp;与 JAVA 相似(相同??)<br>build.gradle  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">task loadfile &lt;&lt;&#123;</span><br><span class="line">  fileList(&#x27;./&#x27;).each&#123;</span><br><span class="line">    File file -&gt; ant.loadfile()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">File[] fileList(String dir)&#123;</span><br><span class="line">  file(dir).listFiles(&#123;file -&gt; file.isFile()&#125; as FileFileter).sort()</span><br><span class="line">&#125;</span><br><span class="line">Output of gradle -q loadfile</span><br><span class="line">&gt; gradle -q loadfile  </span><br><span class="line">I&#x27;m fond of build.gradle</span><br></pre></td></tr></table></figure>
<h3 id="定义默认任务"><a href="#定义默认任务" class="headerlink" title="定义默认任务"></a>定义默认任务</h3><p>&emsp;&emsp;大概就是 gradle 命令开始构建的时候会自动执行的任务<br>&emsp;&emsp;通过 <code>defaulTasks &#39;fun1&#39;,&#39;fun2&#39;</code> 关键字进行声明, <strong>只能声明一次, 多次声明只有最后一次声明有效, 不要求声明位置</strong>  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">task clean &lt;&lt;&#123;</span><br><span class="line">  println &quot;Default Cleanning&quot;</span><br><span class="line">&#125;</span><br><span class="line">task other &lt;&lt;&#123;</span><br><span class="line">  println &quot;I&#x27;m not a defaul task&quot;</span><br><span class="line">&#125;</span><br><span class="line">defaulTasks &#x27;clean&#x27;</span><br><span class="line">Output of gradle -q</span><br><span class="line">&gt; gradle -q</span><br><span class="line">Default Cleanning</span><br></pre></td></tr></table></figure>
<h3 id="Configuer-by-with-DAG-有向无环图"><a href="#Configuer-by-with-DAG-有向无环图" class="headerlink" title="Configuer by(with?) DAG(有向无环图)"></a>Configuer by(with?) DAG(有向无环图)</h3><p>&emsp;&emsp;(猜测)配置阶段完成后, Gradle 会生成一个有向五环图储存各个任务之前的关系  </p>
<h4 id="依赖任务的不同输出"><a href="#依赖任务的不同输出" class="headerlink" title="依赖任务的不同输出"></a>依赖任务的不同输出</h4><p>build gradle</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">task distribution &lt;&lt; &#123;</span><br><span class="line">  println &quot;We build the zip with version=$version&quot;</span><br><span class="line">&#125;</span><br><span class="line">task release(dependsOn:distribution) &lt;&lt;&#123;</span><br><span class="line">  println &quot;We release now&quot;</span><br><span class="line">&#125;</span><br><span class="line">gradle.taskGraph.whenReady&#123;</span><br><span class="line">  taskGraph -&gt;</span><br><span class="line">    if (taskGraph.hasTask(release))</span><br><span class="line">      version = &#x27;1.0&#x27;</span><br><span class="line">    else version = &#x27;1.0-SNAPSHOT&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&gt; gradle -q distribution</span><br><span class="line">We build the zip with version=1.0-SNAPSHOT</span><br><span class="line"></span><br><span class="line">&gt; gradle -q release</span><br><span class="line">We build the zip with version=1.0</span><br><span class="line">We release now</span><br></pre></td></tr></table></figure>
<p>whenReady 会在已发布的人物为之前影响到已发布任务的执行</p>
<h2 id="Java-构建入门"><a href="#Java-构建入门" class="headerlink" title="Java 构建入门"></a>Java 构建入门</h2><p>增加插件: apply plugin: ‘java’<br>标准目录结构:  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">project</span><br><span class="line">  +build</span><br><span class="line">  +src</span><br><span class="line">    +main</span><br><span class="line">      +java</span><br><span class="line">      +resources</span><br><span class="line">    +test</span><br><span class="line">      +java</span><br><span class="line">      +resources</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;Gradle 默认会从 <code>src/main/java</code> 搜寻打包源码，在 <code>src/test/java</code> 下搜寻测试源码。并且 <code>src/main/resources</code> 下的所有文件按都会被打包，所有 <code>src/test/resources</code> 下的文件 都会被添加到类路径用以执行测试。所有文件都输出到 <code>build</code> 下，打包的文件输出到 <code>build/libs</code> 下。</p>
<h3 id="构建项目"><a href="#构建项目" class="headerlink" title="构建项目"></a>构建项目</h3><p>&emsp;&emsp;一些常用 task</p>
<table>
<thead>
<tr>
<th align="center">task</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">build</td>
<td align="left">构建整个项目, 编译并执行单元测试,并将 <code>src/main/*</code> 下面的 class 和资源文件打包</td>
</tr>
<tr>
<td align="center">clean</td>
<td align="left">删除 build 目录以及所有构建完成的文件</td>
</tr>
<tr>
<td align="center">assemble</td>
<td align="left">编译并打包文件, 但不会执行单元测试</td>
</tr>
<tr>
<td align="center">check</td>
<td align="left">编译并测试代码</td>
</tr>
</tbody></table>
<h3 id="外部依赖"><a href="#外部依赖" class="headerlink" title="外部依赖"></a>外部依赖</h3><p>&emsp;&emsp;一个项目通常有许多外部依赖, 需要告诉 Gradle 如何找到并引用这些文件 (通常在某个仓库中). 仓库可以用来搜寻依赖或发布项目产物  </p>
<h4 id="添加-Maven-仓库"><a href="#添加-Maven-仓库" class="headerlink" title="添加 Maven 仓库"></a>添加 Maven 仓库</h4><p>build.gradle</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">repositories&#123;</span><br><span class="line">  mavenCentral()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dependencies&#123;</span><br><span class="line">  compile group: &#x27;commons-collections&#x27;, name:&#x27;commons-collections&#x27;, version:&#x27;3.2&#x27;</span><br><span class="line">  testCompile grou: &#x27;junit&#x27;, name:&#x27;junit&#x27;, version:&#x27;4.+&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="自定义配置-manifest"><a href="#自定义配置-manifest" class="headerlink" title="自定义配置 (manifest)"></a>自定义配置 (manifest)</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">version = &#x27;1.0&#x27;</span><br><span class="line">jar&#123;</span><br><span class="line">  manifest&#123;</span><br><span class="line">    attributrs &#x27;Implementation-Tilte&#x27;:&#x27;Gradle Quickstart&#x27;,&#x27;Implementation-Version&#x27;:version</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以执行 gradle properties 来得到项目的属性列表 (显示插件添加的属性值以及默认值)<br>可以重载 build 中的任务, 如修改 test 任务, 让它执行时添加一些系统属性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">test&#123;</span><br><span class="line">  setSystemProperties &#x27;property&#x27;:&#x27;value&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="发布-jar-包"><a href="#发布-jar-包" class="headerlink" title="发布 jar 包"></a>发布 jar 包</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">uploadArchives&#123;</span><br><span class="line">  repositories&#123;</span><br><span class="line">    flatDir&#123;</span><br><span class="line">      dirs &#x27;repos&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行 gradle uploadArchives 会在仓库:本地 repos 中发布 jar 包</p>
]]></content>
      <categories>
        <category>notes</category>
      </categories>
  </entry>
  <entry>
    <title>Java琐碎知识</title>
    <url>/notes/java.html</url>
    <content><![CDATA[<p>java 运算中 byte 在参与运算时会转换成 int<br>e.g<br> byte b1 = 5, b2 = 1;<br> b1 = b1 + b2;//b1+ b2 结果是 int<br> int 值赋给 byte 语法错误<br>简写隐含强制类型转换 b1+= b2 无语法错误<br>移位运算不超过原本位数 int &gt;&gt;33 会转化为 int<br>使用 jar cvf a.jar a* 命令<br>将 a 文件夹下的所有class 打包成 a.jar<br>this() 可以调用本类其他构造函数<br>this() super() 必须在第一句<br>protected 权限 子类和同包可以访问<br>hashTable 线程安全 不接受null<br>hashMap 非线程安全 接受Null</p>
<h3 id="lambda-表达式"><a href="#lambda-表达式" class="headerlink" title="lambda 表达式"></a>lambda 表达式</h3><h4 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h4><ol>
<li>一个代码块;  </li>
<li>参数;</li>
<li>自由变量的值(非参数而且不在代码中定义的变量)。</li>
</ol>
<p>lambda表达式中<strong>捕获(captured)<strong>的变量必须是</strong>实际上的最终变量(effectively final)</strong><br><em><strong>在java中lambda表达式就是闭包(closure)</strong></em></p>
<h4 id="表示形式"><a href="#表示形式" class="headerlink" title="表示形式:"></a>表示形式:</h4><p>   ( [参数]) -&gt; {表达式}<br>     <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">     (String first, String second) -&gt;&#123;</span><br><span class="line">       if(first.length()&lt; second.length;</span><br><span class="line">       return -1;</span><br><span class="line">       return 1;</span><br><span class="line">     &#125;</span><br><span class="line">     ```  </span><br><span class="line"></span><br><span class="line">如果可以推导出一个lambda表达式的参数类型,则可以忽略其类型.例如:</span><br><span class="line">```  </span><br><span class="line">Comparator&lt;String&gt; comp = (first, second) -&gt; //Same as (String first, String second)</span><br><span class="line">        first.length() - second.length(); // 无需指出返回类型,但返回类型必须相同</span><br></pre></td></tr></table></figure><br>如果参数只有一个并且这个参数的类型可以推导得出,可以省略小括号</p>
<pre><code> ActionListener listener = event -&gt;&#123;  //instead of (event) -&gt;&#123;
   System.out.println(&quot;The time is &quot; + new Date());
 &#125;
</code></pre>
<p><strong>最好把lambda表达式看成一个函数 而非对象</strong><br><strong>java中的lambda表达式只能转化为  函数式接口(只有一个抽象方法的接口)</strong></p>
<h4 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h4><h5 id="三种情况"><a href="#三种情况" class="headerlink" title="三种情况"></a>三种情况</h5><ul>
<li>object::instanceMethod  </li>
<li>Class::staticMethod</li>
<li>Class::instanceMethod<br>在前两种情况中,方法引用等价于提供方法参数的lambda表达式.如 System.out.println() 等价于<br>x -&gt; System.out.println(x),对于第三种情况,第一个参数会成为调用该方法的目标,如<br>String::compareToIgnoreCase 等价于 (x,y) -&gt; x.compareToIgnoreCase(y)  </li>
</ul>
<p><strong>可以使用 this::, super:: 构造器引用的写法 Class::new</strong>  </p>
<h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><h4 id="内部类的特殊语法规则"><a href="#内部类的特殊语法规则" class="headerlink" title="内部类的特殊语法规则"></a>内部类的特殊语法规则</h4><ol>
<li>每个内部类都有一个隐式的外部类引用 表达式<em>OuterClass.this</em>表示外围类引用</li>
<li>在外部类的作用域之外,可以这样引用内部类:<em>OuterClass.InnerClass</em></li>
<li>内部类不允许有static方法,且静态域都必须是final(静态域只能有一个实例,不过对于每个外部对象,会分别<br>有一个单独的内部类实例。如果这个域不是final,它可能就不是唯一的.)</li>
</ol>
]]></content>
      <categories>
        <category>notes</category>
      </categories>
  </entry>
  <entry>
    <title>kali</title>
    <url>/notes/kali.html</url>
    <content><![CDATA[<h1 id="1-安全渗透简介"><a href="#1-安全渗透简介" class="headerlink" title="1 安全渗透简介"></a>1 安全渗透简介</h1><p>渗透测试：通过模拟恶意黑客的攻击方法，来评估计算机网络系统安全的一种评估方法，这个过程包括对系统的任何弱点、技术缺陷或漏洞的主动分析。这个分析是从一个攻击者可能存在的位置来进行的，并且从这个位置有条件主动利用安全漏洞。</p>
<h1 id="2-扫描-WordPress"><a href="#2-扫描-WordPress" class="headerlink" title="2 扫描 WordPress"></a>2 扫描 WordPress</h1><h2 id="2-1-WordPress"><a href="#2-1-WordPress" class="headerlink" title="2.1 WordPress"></a>2.1 WordPress</h2><p>一个建站模板</p>
<h2 id="2-2-WPScan"><a href="#2-2-WPScan" class="headerlink" title="2.2 WPScan"></a>2.2 WPScan</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wpscan [options]</span><br><span class="line">// 获取帮助信息</span><br><span class="line">wpscan -h</span><br><span class="line">// 扫描指定ip</span><br><span class="line">wpscan -u 192.168.x.x</span><br><span class="line">// 列出用户名列表</span><br><span class="line">wpscan -u 192.168.x.x -e u vp</span><br><span class="line">// 通过字典穷举密码</span><br><span class="line">wpscan -u 192.168.x.x -e u --wordlist /root/wordlist.txt</span><br></pre></td></tr></table></figure>

<h1 id="3-信息收集"><a href="#3-信息收集" class="headerlink" title="3 信息收集"></a>3 信息收集</h1><h2 id="3-1-枚举服务"><a href="#3-1-枚举服务" class="headerlink" title="3.1 枚举服务"></a>3.1 枚举服务</h2><p>枚举：指一类程序，允许用户从一个网络中收集某一类的所有相关信息</p>
<h3 id="3-1-1-DNS-枚举"><a href="#3-1-1-DNS-枚举" class="headerlink" title="3.1.1 DNS 枚举"></a>3.1.1 DNS 枚举</h3><ol>
<li>DNSenum</li>
<li>fierce</li>
</ol>
<h3 id="3-1-2-SNMP-枚举"><a href="#3-1-2-SNMP-枚举" class="headerlink" title="3.1.2 SNMP 枚举"></a>3.1.2 SNMP 枚举</h3><p>简单网络管理协议(SNMP)是TCP/IP协议簇的一个应用层协议，工作在UDP 161端口，用于监控目标设备的操作系统、硬件设备、服务应用、软硬件配置、网络协议状态、设备性能及资源利用率、设备报错事件信息、应用程序状态等软硬件信息。</p>
<ol>
<li>snmpwalk<br>使用 SNMP 的 GETNEXT 请求，查询指定的所有 OID(SNMP 协议中的对象标识)树信息。</li>
<li>snmpcheck<br>将枚举 SNMP 的结果以可读的方式输出。</li>
</ol>
<h2 id="3-2-测试网络范围"><a href="#3-2-测试网络范围" class="headerlink" title="3.2 测试网络范围"></a>3.2 测试网络范围</h2><h3 id="3-2-1-域名查询工具-DMitry"><a href="#3-2-1-域名查询工具-DMitry" class="headerlink" title="3.2.1 域名查询工具 DMitry"></a>3.2.1 域名查询工具 DMitry</h3><p>查询 IP 或域名 WHOis 信息</p>
<h3 id="3-2-2-跟踪路由工具-Scapy"><a href="#3-2-2-跟踪路由工具-Scapy" class="headerlink" title="3.2.2 跟踪路由工具 Scapy"></a>3.2.2 跟踪路由工具 Scapy</h3>]]></content>
      <categories>
        <category>notes</category>
      </categories>
  </entry>
  <entry>
    <title>Ktorm</title>
    <url>/notes/ktorm-SQL_DSL.html</url>
    <content><![CDATA[<h1 id="1-连接管理"><a href="#1-连接管理" class="headerlink" title="1  连接管理"></a>1  连接管理</h1><h2 id="1-1-使用URL连接到数据库"><a href="#1-1-使用URL连接到数据库" class="headerlink" title="1.1 使用URL连接到数据库"></a>1.1 使用URL连接到数据库</h2><p>需要进行操作时创建新的连接后马上关闭.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">val database = Database.connect(</span><br><span class="line">  url = &quot;jdbc:mysql://localhost:3306/ktorm&quot;,</span><br><span class="line">  driver = &quot;com.mysql.jdbc.Driver&quot;,</span><br><span class="line">  user = &quot;root&quot;,</span><br><span class="line">  password = &quot;wsw980314&quot;</span><br><span class="line">  )</span><br></pre></td></tr></table></figure>
<h2 id="1-2-使用连接池"><a href="#1-2-使用连接池" class="headerlink" title="1.2 使用连接池"></a>1.2 使用连接池</h2><p>支持DBCP, C3P0, Druid等任意实现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">val dataSource = SingleConnectionDataSource()</span><br><span class="line">val database = Database.connect(dataSource)</span><br></pre></td></tr></table></figure>
<h2 id="1-3-手动连接管理"><a href="#1-3-手动连接管理" class="headerlink" title="1.3 手动连接管理"></a>1.3 手动连接管理</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// App 启动时创建连接直至结束时关闭</span><br><span class="line">val conn = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/ktorm&quot;)</span><br><span class="line"></span><br><span class="line">Runtime.getRuntime().addShutdownHook(</span><br><span class="line">    thread(start = false)&#123;</span><br><span class="line">      conn.close();</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">val database = Database.connect&#123;</span><br><span class="line">  object: Connection by conn&#123;</span><br><span class="line">    override fun close()&#123;</span><br><span class="line">      // 重写 close 方法保证连接不关闭</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="1-4-日志输出"><a href="#1-4-日志输出" class="headerlink" title="1.4  日志输出"></a>1.4  日志输出</h2><p>  默认情况下在创建<code>Database</code>对象时, Ktorm 会从 classpath 中检测目前使用的日志框架，并将日志委托给他。</p>
<h1 id="2-事物管理"><a href="#2-事物管理" class="headerlink" title="2 事物管理"></a>2 事物管理</h1><p>可使用 <code>SpringManagedTransactionManager</code>将事物委托给Spring框架</p>
<h1 id="3-Spring支持"><a href="#3-Spring支持" class="headerlink" title="3  Spring支持"></a>3  Spring支持</h1><p>Ktorm 对 Spring 的支持基于 Spring JDBC 模块，首先确保项目中存在相应依赖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">implementation &quot;org.springframework:spring-jdbc:$&#123;spring.version&#125;&quot;</span><br></pre></td></tr></table></figure>
<p>创建  Database 对象</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Confiuration</span><br><span class="line">class ktormConfiguration&#123;</span><br><span class="line">  @Autowired</span><br><span class="line">  lateinit var dataSource: dataSource</span><br><span class="line"></span><br><span class="line">  @Bean</span><br><span class="line">  fun database():Database&#123;</span><br><span class="line">    return Database.connectWithSpringSupport(dataSource)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/vincentlauvlwj/ktorm-example-spring-boot">Ktorm与SpringBoot集成</a></p>
<h1 id="4-定义表结构"><a href="#4-定义表结构" class="headerlink" title="4  定义表结构"></a>4  定义表结构</h1><h2 id="4-1-表对象"><a href="#4-1-表对象" class="headerlink" title="4.1  表对象"></a>4.1  表对象</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">object Department:Table&lt;Nothing&gt;(&quot;t_department&quot;)&#123;</span><br><span class="line">  val id by int(&quot;id&quot;).primaryKey()</span><br><span class="line">  val name by varchar(&quot;name&quot;)</span><br><span class="line">  val location by varchar(&quot;location&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>继承自<code>Table</code>类，并在构造方法中制定表明，泛型参数表明此表绑定到的实体类的类型。<br>类型定义函数的普遍特征：</p>
<ul>
<li>它们是<code>Table</code>类的扩展函数</li>
<li>名称一般对应于实际的SQL类型名称</li>
<li>接受一个代表列名称的参数</li>
<li>返回<code>Table&lt;E&gt;.ColumnRegistration&lt;C&gt;</code>，E为实体类类型，C为该列类型。</li>
<li>被委托的属性类型为<code>Column&lt;C&gt;</code></li>
</ul>
<h2 id="4-2-SqlType"><a href="#4-2-SqlType" class="headerlink" title="4.2  SqlType"></a>4.2  SqlType</h2><p>SqlType 是一个抽象类，它为 SQL 中的数据类型提供了统一的抽象，基于 JDBC，它封装了从 ResultSet 中获取数据，往 PreparedStatement 设置参数等通用的操作。<br>可用于扩展类型。详情见官方文档</p>
<p><code>implementation &quot;me.liuwj.ktorm:ktorm-jackson:$&#123;ktorm.version&#125;&quot;</code> 引入json对象的存取。　　</p>
<p>使用<code>transform</code>函数进行类型扩展，进行自定义的转换行为。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">val role by int(&quot;role&quot;).transform(&#123;UserRole.fromCode(it)&#125;, &#123;it.code&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="5-查询"><a href="#5-查询" class="headerlink" title="5  查询"></a>5  查询</h1><h2 id="5-1-Query对象"><a href="#5-1-Query对象" class="headerlink" title="5.1 Query对象"></a>5.1 Query对象</h2><ul>
<li>sql: 返回查询生成的SQL字符串</li>
<li>rowSet: 返回查询的结果集对象</li>
<li>totalRecords:</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">val query = database.from(Employees).select()</span><br><span class="line"></span><br><span class="line">query</span><br><span class="line">    .map &#123; row -&gt; Emp(row[Employees.id], row[Employees.name], row[Employees.salary]) &#125;</span><br><span class="line">    .filter &#123; it.salary &gt; 1000 &#125;</span><br><span class="line">    .sortedBy &#123; it.salary &#125;</span><br><span class="line">    .forEach &#123; println(it.name) &#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-2-获取查询结果"><a href="#5-2-获取查询结果" class="headerlink" title="5.2  获取查询结果"></a>5.2  获取查询结果</h2><p>Query对象实现了<code>Iteratable</code>接口</p>
<ul>
<li>离线可用：关闭连接后仍然可以正常从Query中获取数据</li>
<li>索引访问运算符：重载了[]，通过传入指定<code>Column</code>对象来获取某列数据</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for(row in database.from(Employees).select())&#123;</span><br><span class="line">  var id: Int? = row[Employees.id]</span><br><span class="line">  var name: String? = row[Employees.name]</span><br><span class="line">  var salary: Long? = row[Employees.salary]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-3-from"><a href="#5-3-from" class="headerlink" title="5.3  from"></a>5.3  from</h2><p><code>Database</code>的扩展函数，把一个表对象包装为<code>QuerySource</code>对象</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fun Database.from(table: BaseTable&lt;*&gt;):QuerySource</span><br></pre></td></tr></table></figure>

<h2 id="5-4-select"><a href="#5-4-select" class="headerlink" title="5.4  select"></a>5.4  select</h2><p> <code>QuerySource</code>的扩展函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fun QuerySource.select(vararg columns:ColumnDeclaring&lt;*&gt;):Query</span><br><span class="line"></span><br><span class="line">database</span><br><span class="line">  .from(Employees)</span><br><span class="line">  .select(max(Employees.salary) - min(Employees.salary))</span><br><span class="line">  .forEach(row -&gt; println(row.getLong(1)))</span><br></pre></td></tr></table></figure>

<h2 id="5-5-selectDistinct"><a href="#5-5-selectDistinct" class="headerlink" title="5.5  selectDistinct"></a>5.5  selectDistinct</h2><p><code>QuerySource</code>的扩展函数，对应<code>SQL</code>中<code>select distinct</code>操作，与<code>select</code>用法一致</p>
<h2 id="5-6-where"><a href="#5-6-where" class="headerlink" title="5.6  where"></a>5.6  where</h2><p><code>Query</code>的扩展函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">inline fun Query.where(block: ()-&gt;ColumnDeclaring&lt;Boolean&gt;): Query</span><br><span class="line">val query = database</span><br><span class="line">  .from(Employees)</span><br><span class="line">  .select(Employees.salary)</span><br><span class="line">  .where&#123;(Employees.deparmentId eq 1) and (Employees.name like &quot;%vince%&quot;)&#125;</span><br><span class="line"></span><br><span class="line">Ktorm 提供的 infix函数: and, or, eq, like, greater, less 等</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">val query = database</span><br><span class="line">  .from(Employees)</span><br><span class="line">  .select(Employees.salary)</span><br><span class="line">  .whereWithConditions&#123;</span><br><span class="line">    if(departmentId != null)&#123;</span><br><span class="line">      it+= Employees.departmentId eq departmentId</span><br><span class="line">    &#125;</span><br><span class="line">    if(managerId != null)&#123;</span><br><span class="line">      it += Employees.managerId eq managerId</span><br><span class="line">    &#125;</span><br><span class="line">    if(name != null)&#123;</span><br><span class="line">      it += Employees.name like &quot;%$&#123;name&#125;%&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-7-groupBy-having"><a href="#5-7-groupBy-having" class="headerlink" title="5.7 groupBy/having"></a>5.7 groupBy/having</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">val t = Employees.aliased(&quot;t&quot;)</span><br><span class="line">val query = database</span><br><span class="line">  .from(t)</span><br><span class="line">  .select(t.departmentId, avg(t.salary))</span><br><span class="line">  .groupBy(t.departmentId)</span><br><span class="line">  .having&#123; avg(t.salary) greater 100.0&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-8-orderBy"><a href="#5-8-orderBy" class="headerlink" title="5.8 orderBy"></a>5.8 orderBy</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fun Query.orderBy(vararg orders: OderByExpression): Query</span><br><span class="line"></span><br><span class="line">fun ColumnDeclaring&lt;*&gt;.asc():orderByExpression</span><br><span class="line">fun ColumnDeclaring&lt;*&gt;.desc():orderByExpression</span><br><span class="line"></span><br><span class="line">val query = database</span><br><span class="line">  .from(Employees)</span><br><span class="line">  .select(Employees.name)</span><br><span class="line">  .orderBy(Employees.salary.desc())</span><br></pre></td></tr></table></figure>

<h2 id="5-9-limit"><a href="#5-9-limit" class="headerlink" title="5.9  limit"></a>5.9  limit</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fun Query.limit(offset:Int, limit:Int): Query</span><br></pre></td></tr></table></figure>

<h2 id="5-10-union-unionAll"><a href="#5-10-union-unionAll" class="headerlink" title="5.10  union/unionAll"></a>5.10  union/unionAll</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">val query = database</span><br><span class="line">  .from(Employees)</span><br><span class="line">  .select(Employees.id)</span><br><span class="line">  .union(</span><br><span class="line">    Departments.select(Departments.id)</span><br><span class="line">    )</span><br><span class="line">  .unionAll(</span><br><span class="line">    Departments.select(Departments.id)</span><br><span class="line">    )</span><br><span class="line">  .orderBy(Employees.id.desc())</span><br></pre></td></tr></table></figure>

<h2 id="5-11-aliased"><a href="#5-11-aliased" class="headerlink" title="5.11 aliased"></a>5.11 aliased</h2><p>提供列别名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">val deptId = Employees.deparmentId.aliased(&quot;dept_id&quot;)</span><br><span class="line">val t = Employees.aliased(&quot;t&quot;)</span><br></pre></td></tr></table></figure>
<p>Table对象的aliased返回Table<E>函数不含有原表信息，因此若想用表别名则表的描述如下：　　</E></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">open class Employees(alias:String?):Table&lt;Nothing&gt;(&quot;t_department&quot;, alias)&#123;</span><br><span class="line">  companion object: Employees(null)</span><br><span class="line">  override fun aliased(alias: String) = Employees(alias)</span><br><span class="line">  val id by int(&quot;id&quot;).primaryKey()</span><br><span class="line">  val name by varchar(&quot;name&quot;)</span><br><span class="line">  val job by varchar(&quot;job&quot;)</span><br><span class="line">  val managerId by int(&quot;manager_id&quot;)</span><br><span class="line">  val hireDate by date(&quot;hire_date&quot;)</span><br><span class="line">  val salary by long(&quot;salary&quot;)</span><br><span class="line">  val departmentId by int(&quot;department_id&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="6-联表"><a href="#6-联表" class="headerlink" title="6  联表"></a>6  联表</h1><h2 id="6-1-连接函数"><a href="#6-1-连接函数" class="headerlink" title="6.1   连接函数"></a>6.1   连接函数</h2><table>
<thead>
<tr>
<th>连接类型</th>
<th>扩展函数名</th>
<th>对应关键字</th>
</tr>
</thead>
<tbody><tr>
<td>内连接</td>
<td>innerJoin</td>
<td>inner join</td>
</tr>
<tr>
<td>左连接</td>
<td>leftJoin</td>
<td>left leftJoin</td>
</tr>
<tr>
<td>右连接</td>
<td>rightJoin</td>
<td>right join</td>
</tr>
<tr>
<td>交叉连接</td>
<td>crossJoin</td>
<td>cross join</td>
</tr>
</tbody></table>
<p>连接函数都是<code>QuerySource</code>的扩展函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">val query = database</span><br><span class="line">  .from(Employees)</span><br><span class="line">  .leftJoin(Departments, on=Employees.departmentId eq Departments.id)</span><br><span class="line">  .select(Employees.name, Departments.name)</span><br><span class="line">  .where&#123; Employees.salary greater 100L&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-2-扩展连接类型"><a href="#6-2-扩展连接类型" class="headerlink" title="6.2  扩展连接类型"></a>6.2  扩展连接类型</h2><p>见官方文档　　<br>MySQL自然连接支持：<code>implementation &quot;me.liuwj.ktorm:ktorm-support-mysql:$&#123;ktorm.version&#125;&quot;</code></p>
<h1 id="7-增删改"><a href="#7-增删改" class="headerlink" title="7 增删改"></a>7 增删改</h1><h2 id="7-1-插入"><a href="#7-1-插入" class="headerlink" title="7.1 插入"></a>7.1 插入</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 返回受影响的记录数</span><br><span class="line">fun&lt;T: BaseTable&lt;*&gt;&gt; Database.insert(table:T, block:AssignmentBuilder.(T)-&gt;Unit):Int</span><br><span class="line">database.insert(Employees)&#123;</span><br><span class="line">  it.name to &quot;jerry&quot;</span><br><span class="line">  it.job to &quot;trainee&quot;</span><br><span class="line">  it.managerId to 1</span><br><span class="line">  it.hireDate to LocalDate.now()</span><br><span class="line">  it.salary to 50</span><br><span class="line">  it.departmentId to 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 返回自动生成的主键</span><br><span class="line">val id = database.insertAndGenerateKey(Employees)&#123;</span><br><span class="line">  it.name to &quot;jerry&quot;</span><br><span class="line">  it.job to &quot;trainee&quot;</span><br><span class="line">  it.managerId to 1</span><br><span class="line">  it.hireDate to LocalDate.now()</span><br><span class="line">  it.salary to 50</span><br><span class="line">  it.departmentId to 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//插入多条数据</span><br><span class="line">database.batchInsert(Employees)&#123;</span><br><span class="line">database.batchInsert(Employees) &#123;</span><br><span class="line">    item &#123;</span><br><span class="line">        it.name to &quot;jerry&quot;</span><br><span class="line">        it.job to &quot;trainee&quot;</span><br><span class="line">        it.managerId to 1</span><br><span class="line">        it.hireDate to LocalDate.now()</span><br><span class="line">        it.salary to 50</span><br><span class="line">        it.departmentId to 1</span><br><span class="line">    &#125;</span><br><span class="line">    item &#123;</span><br><span class="line">        it.name to &quot;linda&quot;</span><br><span class="line">        it.job to &quot;assistant&quot;</span><br><span class="line">        it.managerId to 3</span><br><span class="line">        it.hireDate to LocalDate.now()</span><br><span class="line">        it.salary to 100</span><br><span class="line">        it.departmentId to 2</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//转移数据</span><br><span class="line">database</span><br><span class="line">  .from(Departments)</span><br><span class="line">  .select(Departments.name,Departments.location)</span><br><span class="line">  .where&#123;Departments.id eq 1&#125;</span><br><span class="line">  .insertTo(Departments. Departments.name, Departments.location)</span><br></pre></td></tr></table></figure>

<h2 id="7-2-更新"><a href="#7-2-更新" class="headerlink" title="7.2  更新"></a>7.2  更新</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fun &lt;T:BaseTable&lt;*&gt;&gt; Database.update(table:T, block:UpdateStatementBuilder.(T)-&gt;Unit)</span><br><span class="line"></span><br><span class="line">database.update(Employees)&#123;</span><br><span class="line">  it.job to &quot;engineer&quot;</span><br><span class="line">  it.managerId to null</span><br><span class="line">  it.salary to it.salary + 100</span><br><span class="line">  where&#123;</span><br><span class="line">    it.id eq 2</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//批量更新数据</span><br><span class="line">database.batchUpdate(Departments)&#123;</span><br><span class="line">  for(i in 1..2)&#123;</span><br><span class="line">    item&#123;</span><br><span class="line">      it.location to &quot;Hong Kong&quot;</span><br><span class="line">      where&#123;</span><br><span class="line">        it.id eq i</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="7-3-删除"><a href="#7-3-删除" class="headerlink" title="7.3  删除"></a>7.3  删除</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fun &lt;T :BaseTable&lt;*&gt;&gt; Database.delete(table:T, predicate:(T)-&gt;ColumnDeclaring&lt;Boolean&gt;): Int</span><br><span class="line"></span><br><span class="line">database.delete(Employees)&#123; it.id eq 4&#125;</span><br></pre></td></tr></table></figure>

<h1 id="8-运算符"><a href="#8-运算符" class="headerlink" title="8  运算符"></a>8  运算符</h1><p><a href="https://ktorm.liuwj.me/zh-cn/operators.html">运算符</a></p>
<h1 id="9-方言与原生-SQL"><a href="#9-方言与原生-SQL" class="headerlink" title="9  方言与原生 SQL"></a>9  方言与原生 SQL</h1><p><code>Ktorm</code> 核心库仅对标准 SQL 提供了支持<br><a href="https://ktorm.liuwj.me/zh-cn/dialects-and-native-sql.html">方言模块列表</a><br>v2.4后只需引入依赖即可<br>调用原生SQL</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">val names = database.useConnection&#123;</span><br><span class="line">  conn-&gt;</span><br><span class="line">    val sql = &quot;&quot;&quot;</span><br><span class="line">      select name from t_employee</span><br><span class="line">      where department_id = ?</span><br><span class="line">      order by id</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    conn.preparedStatement(sql).use&#123;</span><br><span class="line">      statement -&gt;</span><br><span class="line">        statement.setInt(1,1)</span><br><span class="line">        statement.executeQuery().iterable().map&#123;it.getString(1)&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">names.forEach&#123; println(it)&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>notes</category>
      </categories>
  </entry>
  <entry>
    <title>Markdown语法整理</title>
    <url>/notes/markdown.html</url>
    <content><![CDATA[<p>#目录<br>[toc]</p>
<h1 id="1-Markdown-基本语法"><a href="#1-Markdown-基本语法" class="headerlink" title="1 Markdown 基本语法"></a>1 Markdown 基本语法</h1><h2 id="1-1-斜体和粗体"><a href="#1-1-斜体和粗体" class="headerlink" title="1.1 斜体和粗体"></a>1.1 斜体和粗体</h2><p><em>斜体</em><br><strong>粗体</strong><br><del>删除线</del></p>
<h2 id="1-2-分级标题"><a href="#1-2-分级标题" class="headerlink" title="1.2 分级标题"></a>1.2 分级标题</h2><h2 id="1-3-超链接"><a href="#1-3-超链接" class="headerlink" title="1.3 超链接"></a>1.3 超链接</h2><p><a href="http://www.baidu.com/">百度地址</a></p>
<p>使用&lt;&gt;包裹的链接<a href="http://example.com/">http://example.com/</a></p>
<h2 id="1-4-锚点"><a href="#1-4-锚点" class="headerlink" title="1.4 锚点"></a>1.4 锚点</h2><p>跳转到<a href="#%E7%9B%AE%E5%BD%95">目录</a></p>
<h2 id="1-5-列表"><a href="#1-5-列表" class="headerlink" title="1.5 列表"></a>1.5 列表</h2><h3 id="1-5-1-无序列表"><a href="#1-5-1-无序列表" class="headerlink" title="1.5.1 无序列表"></a>1.5.1 无序列表</h3><ul>
<li>无序列表一</li>
<li>无序列表二</li>
</ul>
<h3 id="1-5-2-有序列表"><a href="#1-5-2-有序列表" class="headerlink" title="1.5.2 有序列表"></a>1.5.2 有序列表</h3><ol>
<li>有序列表1</li>
<li>有序列表2</li>
</ol>
<h2 id="1-6-引用"><a href="#1-6-引用" class="headerlink" title="1.6 引用"></a>1.6 引用</h2><blockquote>
<p>无意义的占位文字</p>
</blockquote>
<h2 id="1-7-插入图像"><a href="#1-7-插入图像" class="headerlink" title="1.7 插入图像"></a>1.7 插入图像</h2><p><img src="http://ww2.sinaimg.cn/large/56d258bdjw1eugeubg8ujj21kw16odn6.jpg" alt="美丽花儿" title="美丽花儿"></p>
<h2 id="1-8-注脚"><a href="#1-8-注脚" class="headerlink" title="1.8 注脚"></a>1.8 注脚</h2><p>使用 Markdown<a href="Markdown%E6%98%AF%E4%B8%80%E7%A7%8D%E7%BA%AF%E6%96%87%E6%9C%AC%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80">^1</a>可以效率的书写文档</p>
<h2 id="1-9-LaTeX-公式"><a href="#1-9-LaTeX-公式" class="headerlink" title="1.9 LaTeX 公式"></a>1.9 LaTeX 公式</h2><p>$ 表示行内公式 $E=mc^2$<br>$$ 表示整行公式 $$E=mc^2$$<br><a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference">MathJax</a>公式参考</p>
<h2 id="1-10-流程图"><a href="#1-10-流程图" class="headerlink" title="1.10 流程图"></a>1.10 流程图</h2><p><a href="./mermaid%E6%96%87%E6%A1%A3.pdf">mermaid文档</a></p>
<pre class="mermaid">graph LR
 A-->B
 A---C
 B-.-D
 C-.->D</pre>

<h2 id="1-11-表格"><a href="#1-11-表格" class="headerlink" title="1.11 表格"></a>1.11 表格</h2><table>
<thead>
<tr>
<th align="left">左对齐</th>
<th align="right">右对齐</th>
<th align="center">居中</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td align="right">2</td>
<td align="center">3</td>
</tr>
</tbody></table>
<h2 id="1-12-分割线"><a href="#1-12-分割线" class="headerlink" title="1.12 分割线"></a>1.12 分割线</h2><hr>
<h2 id="1-13-代码"><a href="#1-13-代码" class="headerlink" title="1.13 代码"></a>1.13 代码</h2><p><code>scanf()</code>行内代码<br>多行代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello world\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>$\boxed{E=mc^2}$</p>
]]></content>
      <categories>
        <category>notes</category>
      </categories>
  </entry>
  <entry>
    <title>Numpy</title>
    <url>/notes/numpy.html</url>
    <content><![CDATA[<h1 id="1-Ndarray-对象"><a href="#1-Ndarray-对象" class="headerlink" title="1  Ndarray 对象"></a>1  Ndarray 对象</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">numpy.array(<span class="built_in">object</span>, dtype=<span class="literal">None</span>, copy=<span class="literal">True</span>, order=<span class="literal">None</span>, subok=<span class="literal">False</span>, ndmin=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>object</td>
<td>数组或嵌套的序列</td>
</tr>
<tr>
<td>dtype</td>
<td>数组元素的数据类型,可选</td>
</tr>
<tr>
<td>copy</td>
<td>对象是否需要复制, 可选</td>
</tr>
<tr>
<td>order</td>
<td>创建数组的样式, C为行方向, F为列方向</td>
</tr>
<tr>
<td>subok</td>
<td>漠然返回一个与基类类型一致的数组</td>
</tr>
<tr>
<td>ndmin</td>
<td>指定生成数组的最小维度</td>
</tr>
</tbody></table>
<h1 id="2-数据类型对象-dtype"><a href="#2-数据类型对象-dtype" class="headerlink" title="2  数据类型对象 dtype"></a>2  数据类型对象 dtype</h1><p>用来描述与数组对应的内存区域如何实用, 描述了数据以下几个方面:  </p>
<ol>
<li>数据的类型</li>
<li>数据的大小</li>
<li>数据的字节顺序</li>
<li>在结构化类型的情况下, 字段的名称]每个字段的数据类型和每个字段所取得内存块的部分</li>
<li>如果数据类型是子数据, 那么它的形状和数据类型是什么  </li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">numpy.dtype(<span class="built_in">object</span>, align, copy)</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>object</td>
<td>要转换为的数据类型对象</td>
</tr>
<tr>
<td>align</td>
<td>是否将其继续字节对齐</td>
</tr>
<tr>
<td>copy</td>
<td>复制 dtype 对象, 若为 false 则是对内置数据类型对象的引用</td>
</tr>
</tbody></table>
<h1 id="3-数组属性"><a href="#3-数组属性" class="headerlink" title="3  数组属性"></a>3  数组属性</h1><table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>ndarray.ndim</td>
<td>秩, 即轴的数量或维度的数量</td>
</tr>
<tr>
<td>ndarray.shape</td>
<td>数组的维度</td>
</tr>
<tr>
<td>ndarray.size</td>
<td>数组元素的总个数</td>
</tr>
<tr>
<td>ndarray.dtype</td>
<td>ndarray 对象的元素类型</td>
</tr>
<tr>
<td>ndarray.itemsize</td>
<td>ndarray 对象中每个元素的大小, 以字节为单位</td>
</tr>
<tr>
<td>ndarray.flags</td>
<td>ndarray 对象的内存信息</td>
</tr>
<tr>
<td>ndarray.real</td>
<td>ndarray 元素的实部</td>
</tr>
<tr>
<td>ndarray.imag</td>
<td>ndarray 元素的虚部</td>
</tr>
<tr>
<td>ndarray.data</td>
<td>包含实际数组元素的缓冲区</td>
</tr>
</tbody></table>
<h1 id="4-创建数组"><a href="#4-创建数组" class="headerlink" title="4  创建数组"></a>4  创建数组</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">numpy.empty(shape, dtype=<span class="built_in">float</span>, order=<span class="string">&#x27;C&#x27;</span>) <span class="comment"># 生成未初始化的数组  </span></span><br><span class="line">numpy.zeros(shape, dtype=<span class="built_in">float</span>, order=<span class="string">&#x27;C&#x27;</span>) <span class="comment"># 生成初始值为0的数组</span></span><br><span class="line">numpy.ones(shape, dtype=<span class="literal">None</span>, order=<span class="string">&#x27;C&#x27;</span>)   <span class="comment"># 生成初始值为1的数组</span></span><br></pre></td></tr></table></figure>

<h1 id="5-从已有的数组创建数组"><a href="#5-从已有的数组创建数组" class="headerlink" title="5  从已有的数组创建数组"></a>5  从已有的数组创建数组</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">numpy.asarray(a, dtype=<span class="literal">None</span>, order=<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># count 读取数据的数量, -1 表示全部数据</span></span><br><span class="line"><span class="comment"># offset 读取的起始位置</span></span><br><span class="line">numpy.frombuffer(buffer, dtype=<span class="built_in">float</span>, count=-<span class="number">1</span>, offset=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从可迭代的对象中构建</span></span><br><span class="line">numpy.fromiter(iterable, dtype, count=-<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<h1 id="6-从数值范围创建数组"><a href="#6-从数值范围创建数组" class="headerlink" title="6 从数值范围创建数组"></a>6 从数值范围创建数组</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成连续数据</span></span><br><span class="line">numpy.arange(start, stop, step, dtype)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成等差数列, retstep 为 True 时显示间距(此时返回结果为一个 tuple)</span></span><br><span class="line">numpy.linspace(start, stop, num=<span class="number">50</span>, endpoint=<span class="literal">True</span>, retstep=<span class="literal">False</span>, dtype=<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成等比数列, base 为的底数 base ** start 到 base ** stop 的 num 个</span></span><br><span class="line">numpy.logspace(start, stop, num=<span class="number">50</span>, endpoint=<span class="literal">True</span>, base=<span class="number">10.0</span>, dtype=<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="7-切片和索引"><a href="#7-切片和索引" class="headerlink" title="7  切片和索引"></a>7  切片和索引</h1><p>使用 python 的 slice 类进行切片</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = np.arange(<span class="number">10</span>)</span><br><span class="line">s = <span class="built_in">slice</span>(<span class="number">2</span>, <span class="number">7</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>( a[s])</span><br></pre></td></tr></table></figure>
<p>冒号<code>:</code> 的解释:<br>如果只放了一个参数, 如[2], 则只取单个元素.<br>如果为[2:], 表示从索引为 2 开始以后的所有项都将被提取.<br>如果为[:2], 表示提取到索引为 2(不包含) 的所有元素<br>如果为[::3], 表示步长为 3</p>
<h1 id="8-高级索引"><a href="#8-高级索引" class="headerlink" title="8  高级索引"></a>8  高级索引</h1><h2 id="8-1-整数数组索引"><a href="#8-1-整数数组索引" class="headerlink" title="8.1  整数数组索引"></a>8.1  整数数组索引</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">x = np.array(</span><br><span class="line">  [</span><br><span class="line">    [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">    [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">    [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>],</span><br><span class="line">    [<span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>]</span><br><span class="line">  ]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">rows = np.array([ [<span class="number">0</span>, <span class="number">0</span>], [<span class="number">3</span>, <span class="number">3</span>]])</span><br><span class="line">cols = np.array([ [<span class="number">0</span>, <span class="number">2</span>], [<span class="number">0</span>, <span class="number">2</span>]])</span><br><span class="line"></span><br><span class="line">y = x[rows, cols]</span><br><span class="line"><span class="built_in">print</span>(y)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">  y = [</span></span><br><span class="line"><span class="string">    [0, 2]</span></span><br><span class="line"><span class="string">    [9, 11]</span></span><br><span class="line"><span class="string">  ]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="8-2-布尔索引"><a href="#8-2-布尔索引" class="headerlink" title="8.2  布尔索引"></a>8.2  布尔索引</h2><p>通过布尔运算来获取符合指定条件的元素的数组  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x  = np.array( [[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>]])</span><br><span class="line"><span class="built_in">print</span>( x [x &gt; <span class="number">1</span>])</span><br></pre></td></tr></table></figure>

<h1 id="9-广播-Broadcast"><a href="#9-广播-Broadcast" class="headerlink" title="9  广播(Broadcast)"></a>9  广播(Broadcast)</h1><p>广播: 对不同形状(shape)的数组进行数值计算的方式, 对数组的运算通常在相应的元素上进行<br>若运算输入数组形状对不齐且其中之一在某个维度上长度为一, 则将该维重复至于高维长度相同再进行按位运算  </p>
<h1 id="10-迭代数组"><a href="#10-迭代数组" class="headerlink" title="10 迭代数组"></a>10 迭代数组</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = np.arange(<span class="number">0</span>, <span class="number">60</span>, <span class="number">5</span>)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> np.nditer(a, order=<span class="string">&#x27;C&#x27;</span>):</span><br><span class="line">  <span class="built_in">print</span>(x, end=<span class="string">&quot;, &quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 若 a, b 可广播</span></span><br><span class="line"><span class="keyword">for</span> x, y <span class="keyword">in</span> np.nditer([a,b]):</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;%d:%d&quot;</span> % (x,y) ,end=<span class="string">&quot;, &quot;</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>notes</category>
      </categories>
  </entry>
  <entry>
    <title>uml</title>
    <url>/notes/uml.html</url>
    <content><![CDATA[<p>UML 一图流复习</p>
<blockquote>
<p>可考最早原文地址：<a href="https://www.jianshu.com/p/0cd7df8a7789">https://www.jianshu.com/p/0cd7df8a7789</a></p>
</blockquote>
<p><img src="/notes/uml.htm/uml.png"></p>
]]></content>
      <categories>
        <category>notes</category>
      </categories>
  </entry>
  <entry>
    <title>Java高并发编程详解</title>
    <url>/notes/%E3%80%8AJava%E9%AB%98%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E8%AF%A6%E8%A7%A3%E3%80%8B.html</url>
    <content><![CDATA[<h1 id="3-Thread-API-的详细介绍"><a href="#3-Thread-API-的详细介绍" class="headerlink" title="3 Thread API 的详细介绍"></a>3 Thread API 的详细介绍</h1><h2 id="3-1-线程-Sleep"><a href="#3-1-线程-Sleep" class="headerlink" title="3.1 线程 Sleep"></a>3.1 线程 Sleep</h2><p>在 JDK1.5 以后， JDK 引入了一个静态枚举类 TimeUnit，对 sleep 方法进行了封装，如:</p>
<ul>
<li>Thread.sleep(12_257_088L);</li>
<li>TimeUnit.HOURS.sleep(3);</li>
<li>TimeUnit.MINUTES.sleep(24);</li>
<li>TimeUnit.SECONDS.sleep(17);</li>
<li>TimeUnit.MILISECOND.sleep(88);</li>
</ul>
<h2 id="3-2-线程-yield"><a href="#3-2-线程-yield" class="headerlink" title="3.2 线程 yield"></a>3.2 线程 yield</h2><p>一个启发式方法，其会提醒调度器我愿意放弃当前的 CPU 资源，如果 CPU 的资源不紧张，则会忽略<br>这种提醒。</p>
<h2 id="3-3-设置线程的优先级"><a href="#3-3-设置线程的优先级" class="headerlink" title="3.3 设置线程的优先级"></a>3.3 设置线程的优先级</h2><ul>
<li>pulic final void setPriority(int newPriority)</li>
<li>pulic final int getPriority()</li>
</ul>
<h2 id="3-4-获取线程-ID"><a href="#3-4-获取线程-ID" class="headerlink" title="3.4 获取线程 ID"></a>3.4 获取线程 ID</h2><ul>
<li>public long getID()</li>
</ul>
<p>线程的 ID 在整个 JVM 进程中都是唯一的，且从0开始递增</p>
<h2 id="3-5-获取当前线程"><a href="#3-5-获取当前线程" class="headerlink" title="3.5 获取当前线程"></a>3.5 获取当前线程</h2><ul>
<li>pulic static Thread currentThread()</li>
</ul>
<p>用于返回当前执行进程的引用</p>
<h2 id="3-6-设置线程上下文类加载器"><a href="#3-6-设置线程上下文类加载器" class="headerlink" title="3.6 设置线程上下文类加载器"></a>3.6 设置线程上下文类加载器</h2><ul>
<li>public ClassLoader getContextClassLoader()<br>获取线程上下文的类加载器，如果没有修改则保持与父线程同样的类加载器。</li>
<li>public void setContextClassLoader()</li>
</ul>
<h2 id="3-7-线程-interrupt"><a href="#3-7-线程-interrupt" class="headerlink" title="3.7 线程 interrupt"></a>3.7 线程 interrupt</h2><p>打断目标线程的阻塞状态</p>
<ul>
<li>public void interrupt()</li>
<li>public static boolean interrupted() 检查当前线程是否被中断过，并将 flag 置 false</li>
<li>public boolean isInterrupted() 检查该线程是否被中断</li>
</ul>
<p>如果当前线程 <code>interruptFalg == true</code> 则其在执行阻塞方法时会立即打断，并在异常处理中隐<br>式擦除 flag</p>
<h2 id="3-8-线程-join"><a href="#3-8-线程-join" class="headerlink" title="3.8 线程 join"></a>3.8 线程 join</h2><p>join 某个线程 A, 会使当前线程等待，并阻塞至线程 A 结束生命周期或者超时。</p>
<h1 id="4-线程安全与数据同步"><a href="#4-线程安全与数据同步" class="headerlink" title="4 线程安全与数据同步"></a>4 线程安全与数据同步</h1><h2 id="synchronized-关键字"><a href="#synchronized-关键字" class="headerlink" title="synchronized 关键字"></a>synchronized 关键字</h2><p>synchronized 关键字包括 <code>monitor enter</code> 和 <code>monitor exit</code> 两个 JVM 指令，且成对出现。<br>保证当线程进入或进出临界区时刷新缓存。<br>synchronized(mutex) 准确地讲应该是某线程获取了与 mutex 关联的 monitor 锁<br>synchronized 修饰的方法自动取持有这个方法的对象的锁(非静态方法找调用对象，静态方法找类)</p>
]]></content>
      <categories>
        <category>notes</category>
      </categories>
  </entry>
  <entry>
    <title>一些琐碎配置</title>
    <url>/notes/%E4%B8%80%E4%BA%9B%E9%85%8D%E7%BD%AE.html</url>
    <content><![CDATA[<h3 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h3><h4 id="安装-vundle-插件"><a href="#安装-vundle-插件" class="headerlink" title="安装 vundle 插件"></a>安装 vundle 插件</h4>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir -p ~/.vim/bundle</span><br><span class="line">git clone https://github.com/gmarik/Vundle.vim.git ~/.vim/bundle/Vundle.vim</span><br></pre></td></tr></table></figure>
<h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>:PluginInstall</td>
<td>安装在 vimrc 中配置的插件</td>
</tr>
<tr>
<td>:PluginClean</td>
<td>清理已经在 vimrc 中删除的插件</td>
</tr>
<tr>
<td>:PluginUpdate</td>
<td>更新插件</td>
</tr>
<tr>
<td>:PluginSearch</td>
<td>搜索插件，<code>:PluginSearch html</code> 搜索包含  html  关键词的插件</td>
</tr>
</tbody></table>
<h3 id="apm-国内源"><a href="#apm-国内源" class="headerlink" title="apm 国内源"></a>apm 国内源</h3><p>.atom/.apm/.apmrc</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">registry=https://registry.npm.taobao.org/</span><br><span class="line">strict-ssl=false</span><br></pre></td></tr></table></figure>
<h3 id="markdown-相关插件"><a href="#markdown-相关插件" class="headerlink" title="markdown 相关插件"></a>markdown 相关插件</h3><ul>
<li><strong>markdown-preview-enhanced</strong><br>CTRL+SHIFT+M 预览 MARKDOWN<br>CTRL+SHIFT+X 预览</li>
<li><strong>markdown-scroll-sync</strong>  同步滚动</li>
<li><strong>language-markdown</strong> 代码增强</li>
<li><strong>markdown-image-paste</strong> 图片粘贴<br>将图片复制到剪贴板 –&gt; 在 markdown 中新起一行 –&gt; 输入文件名 –&gt;  CTRL+v</li>
<li><strong>markdown-table-editor</strong> 表格编辑 (tab&amp;enter)</li>
</ul>
<h3 id="编程通用插件"><a href="#编程通用插件" class="headerlink" title="编程通用插件"></a>编程通用插件</h3><ul>
<li><strong>regex-railroad-diagram</strong> 正则表达式图形化</li>
<li><strong>linter</strong> 语法检查</li>
<li><strong>atom-beautify</strong> 代码格式化 CTRL+ALT+b</li>
<li><strong>highlight-selected</strong> 高亮所选变量</li>
</ul>
<h3 id="一些琐碎插件"><a href="#一些琐碎插件" class="headerlink" title="一些琐碎插件"></a>一些琐碎插件</h3><ul>
<li><strong>atom-file-icons</strong></li>
<li><strong>atom-html-preview</strong> CTRL+SHIFT+H</li>
<li><strong>platformio-ide-terminal</strong> 在 atom 中启动一个命令行</li>
<li><strong>script</strong> 直接运行脚本　</li>
<li><strong>advanced-open-file</strong> ctrl+alt+o 打开文件</li>
<li><strong>relative-numbers</strong> 显示相对行号</li>
<li><strong>trans-en-zh</strong> 翻译插件，选中后按alt+q</li>
</ul>
<h3 id="Python-相关插件"><a href="#Python-相关插件" class="headerlink" title="Python 相关插件"></a>Python 相关插件</h3><ul>
<li><strong>hydrogen</strong> 使用 jupyter 方式浏览代码</li>
<li><strong>kite</strong> 代码补全，帮助文档，示例代码模板等<br>bash -c “$(wget -q -O - <a href="https://linux.kite.com/dls/linux/current)&quot;%E5%AE%89%E8%A3%85%E5%BC%95%E6%93%8E">https://linux.kite.com/dls/linux/current)&quot;安装引擎</a></li>
<li><strong>python-tools</strong> 定义跳转</li>
<li><strong>linter-flake8</strong> 语法检测</li>
</ul>
<h3 id="Latex-相关插件"><a href="#Latex-相关插件" class="headerlink" title="Latex 相关插件"></a>Latex 相关插件</h3><ol>
<li>安装准备<br> <code>sudo apt install texlive-full</code> 安装 texlive</li>
<li>插件<ul>
<li><strong>language-latex</strong></li>
<li><strong>latex</strong><ul>
<li>CTRL+ALT+B 编译</li>
<li>首先在设置里将引擎改为 xelatex</li>
</ul>
</li>
<li><strong>pdf-view</strong> ### vim-mode + <strong>vim-mode-plus</strong> + <strong>ex-mode</strong> 补全 vim-mode 中缺失的命令模式 ### 一些快捷键 +  CTRL+g 跳转到指定行</li>
</ul>
</li>
</ol>
<h3 id="一些路径"><a href="#一些路径" class="headerlink" title="一些路径"></a>一些路径</h3><p>JAVA_HOME=/usr/lib/jvm/java-1.11.0-openjdk-amd64<br>JRE_HOME=/usr/lib/jvm/java-1.11.0-openjdk-amd64/jre  </p>
<h3 id="一些命令"><a href="#一些命令" class="headerlink" title="一些命令"></a>一些命令</h3><p><strong>which</strong>:在PATH变量指定的路径中，搜索某个系统命令的位置，并且返回第一个搜索结果。<br><strong>whereis</strong>:whereis命令只能用于程序名的搜索，而且只搜索二进制文件（参数-b）、man说明文件（参数-m）和源代码文件（参数-s）。如果省略参数，则返回所有信息。<br><strong>locate</strong>:配合数据库查看文件位置。<br><strong>find</strong>:实际搜寻硬盘查询文件名称。<br><strong>ln</strong>:为文件创建链接，-s 创建软链接  </p>
<h3 id="一些配置"><a href="#一些配置" class="headerlink" title="一些配置"></a>一些配置</h3><p><code>echo &quot;set -o vi&quot; &gt;&gt; ~/.bashrc</code>  修改 bash 为 vim 方式操作</p>
<h3 id="一些工具"><a href="#一些工具" class="headerlink" title="一些工具"></a>一些工具</h3><ul>
<li><strong>tldr</strong> 查看各种命令的常用命令</li>
<li><strong>mathpix</strong> snap 安装，截图转 Latex 公式</li>
</ul>
<h3 id="鼠标代替键盘套装"><a href="#鼠标代替键盘套装" class="headerlink" title="鼠标代替键盘套装"></a>鼠标代替键盘套装</h3><ul>
<li> 浏览器的 vimium 插件</li>
<li> <strong>keynav</strong><blockquote>
<p><a href="https://blog.csdn.net/qq_42691708/article/details/81054821">keynav的使用</a></p>
</blockquote>
</li>
</ul>
<h3 id="pip"><a href="#pip" class="headerlink" title="pip"></a>pip</h3><pre><code>pip install xxx -i mirror.com/...
</code></pre>
<ul>
<li>阿里云 <a href="http://mirrors.aliyun.com/pypi/simple/">http://mirrors.aliyun.com/pypi/simple/</a></li>
<li>豆瓣  <a href="http://pypi.douban.com/simple/">http://pypi.douban.com/simple/</a></li>
<li>清华大学  <a href="https://pypi.tuna.tsinghua.edu.cn/simple/">https://pypi.tuna.tsinghua.edu.cn/simple/</a></li>
<li>中国科学技术大学  <a href="http://pypi.mirrors.ustc.edu.cn/simple/">http://pypi.mirrors.ustc.edu.cn/simple/</a></li>
<li>华中科技大学  <a href="http://pypi.hustunique.com/">http://pypi.hustunique.com/</a></li>
</ul>
<h3 id="mongodb"><a href="#mongodb" class="headerlink" title="mongodb"></a>mongodb</h3><p>启动命令：<code>mongod --dbpath D:\db</code><br>管理工具：adminMongo</p>
<h3 id="elasticSearch"><a href="#elasticSearch" class="headerlink" title="elasticSearch"></a>elasticSearch</h3><p>管理工具：Kibana  </p>
]]></content>
      <categories>
        <category>notes</category>
      </categories>
  </entry>
  <entry>
    <title>杂谈</title>
    <url>/vscode/nothing.html</url>
    <content><![CDATA[<h3 id="1-语音输入插件"><a href="#1-语音输入插件" class="headerlink" title="1 语音输入插件"></a>1 语音输入插件</h3><p>在和某同事聊天的过程中产生了在 vscode 中使用语音输入的想法，搜索了一番发现出于隐私政策等原因目前 vscode 插件无法直接调用媒体，只能进行二次开发。 悲。</p>
]]></content>
      <categories>
        <category>vscode</category>
      </categories>
      <tags>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>vscode 可用插件</title>
    <url>/vscode/%E6%8F%92%E4%BB%B6.html</url>
    <content><![CDATA[<h1 id="0-计数"><a href="#0-计数" class="headerlink" title="0 计数"></a>0 计数</h1><p><img src="/vscode/%E6%8F%92%E4%BB%B6.htm/%E6%8F%92%E4%BB%B6%E6%80%BB%E6%95%B0.png" alt="插件总数"><br>左侧边栏快放不下了，靠。  </p>
<h3 id="1-Notes"><a href="#1-Notes" class="headerlink" title="1 Notes"></a>1 Notes</h3><h3 id="2-Bookmarks"><a href="#2-Bookmarks" class="headerlink" title="2 Bookmarks"></a>2 Bookmarks</h3><h3 id="3-Blockman"><a href="#3-Blockman" class="headerlink" title="3 Blockman"></a>3 Blockman</h3><h3 id="4-TodoTree"><a href="#4-TodoTree" class="headerlink" title="4 TodoTree"></a>4 TodoTree</h3><h3 id="5-Leetcode"><a href="#5-Leetcode" class="headerlink" title="5 Leetcode"></a>5 Leetcode</h3><blockquote>
<p>LeetCode.vscode-leetcode</p>
</blockquote>
<p>直接在 vscode 上刷题的利器<br><img src="/vscode/%E6%8F%92%E4%BB%B6.htm/leetcode.gif" alt="demo"></p>
<h3 id="6-GitLens"><a href="#6-GitLens" class="headerlink" title="6 GitLens"></a>6 GitLens</h3><h3 id="7-ZenTabs"><a href="#7-ZenTabs" class="headerlink" title="7 ZenTabs"></a>7 ZenTabs</h3><blockquote>
<p>hitode909.zentabs</p>
</blockquote>
<p>好心大哥做的 <code>Atom</code> 插件迁移，功能暂时还没有补全。<br>限制同时打开的tab页数量 </p>
<h3 id="8-Extension-Pack-for-Java"><a href="#8-Extension-Pack-for-Java" class="headerlink" title="8 Extension Pack for Java"></a>8 Extension Pack for Java</h3><blockquote>
<p>vscjava.vscode-java-pack  </p>
</blockquote>
<p>微软提供的 Java 工具合集</p>
]]></content>
      <categories>
        <category>vscode</category>
      </categories>
      <tags>
        <tag>vscode</tag>
        <tag>plugin</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 基本配置</title>
    <url>/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA&amp;%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/hexo%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE.html</url>
    <content><![CDATA[<h1 id="1-友链设置"><a href="#1-友链设置" class="headerlink" title="1 友链设置"></a>1 友链设置</h1><p>_config.${主题名}.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">friends_link:</span></span><br><span class="line">  <span class="string">Ayer主题:</span> <span class="comment">#网站名称</span></span><br><span class="line">    <span class="comment">#网站地址</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">https://github.com/Shen-Yu/hexo-theme-ayer</span></span><br><span class="line">    <span class="comment">#网站图片(可忽略不写)</span></span><br><span class="line">    <span class="attr">img:</span> <span class="string">/images/ayer.png</span></span><br><span class="line">  <span class="string">Hexo官网:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">https://hexo.io</span></span><br><span class="line">    <span class="attr">img:</span> <span class="string">https://cdn.jsdelivr.net/gh/Shen-Yu/cdn/img/hexo.png</span></span><br><span class="line">  <span class="string">Hexo图表插件:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">https://github.com/Shen-Yu/hexo-tag-chart</span></span><br><span class="line">    <span class="attr">img:</span> <span class="string">https://cdn.jsdelivr.net/gh/Shen-Yu/cdn/img/hexo-tag-chart.png</span></span><br><span class="line">  <span class="string">我的Leetcode:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">https://leetcode.com/shiweiwong</span></span><br><span class="line">    <span class="attr">img:</span> <span class="string">https://leetcode.com/_next/static/images/logo-ff2b712834cf26bf50a5de58ee27bcef.png</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>博客搭建&amp;使用笔记</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo 直接插入图片</title>
    <url>/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA&amp;%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/hexo%E7%9B%B4%E6%8E%A5%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87.html</url>
    <content><![CDATA[<h3 id="1-插件安装"><a href="#1-插件安装" class="headerlink" title="1 插件安装"></a>1 插件安装</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure>

<h3 id="2-代码修改"><a href="#2-代码修改" class="headerlink" title="2 代码修改"></a>2 代码修改</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">&#x27;cheerio&#x27;</span>);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基于 hexo-asset-image 插件修改  </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 搜索字符串中子串 m, 第 i 次出现的位置</span></span><br><span class="line"><span class="comment"> * http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>str 待匹配字符串 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>m 子串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>i 搜索位置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns </span>字符串中子串 m, 第 i 次出现的位置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPosition</span>(<span class="params">str, m, i</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.split(m, i).join(m).length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> version = <span class="built_in">String</span>(hexo.version).split(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">hexo.extend.filter.register(<span class="string">&#x27;after_post_render&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> config = hexo.config;</span><br><span class="line">  <span class="keyword">if</span>(config.post_asset_folder)&#123;</span><br><span class="line">    <span class="keyword">var</span> link = data.permalink;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(version.length &gt; <span class="number">0</span> &amp;&amp; <span class="built_in">Number</span>(version[<span class="number">0</span>]) == <span class="number">3</span>)</span><br><span class="line">       <span class="keyword">var</span> beginPos = getPosition(link, <span class="string">&#x27;/&#x27;</span>, <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">       <span class="keyword">var</span> beginPos = getPosition(link, <span class="string">&#x27;/&#x27;</span>, <span class="number">3</span>) + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;.../about/index.html&quot;.</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> endPos = link.lastIndexOf(<span class="string">&#x27;\.&#x27;</span>);</span><br><span class="line">    link = link.substring(beginPos, endPos);</span><br><span class="line">    <span class="keyword">var</span> toprocess = [<span class="string">&#x27;excerpt&#x27;</span>, <span class="string">&#x27;more&#x27;</span>, <span class="string">&#x27;content&#x27;</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; toprocess.length; i++)&#123;</span><br><span class="line">      <span class="keyword">var</span> key = toprocess[i];</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">var</span> $ = cheerio.load(data[key], &#123;</span><br><span class="line">        <span class="attr">ignoreWhitespace</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">xmlMode</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">lowerCaseTags</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">decodeEntities</span>: <span class="literal">false</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      $(<span class="string">&#x27;img&#x27;</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ($(<span class="built_in">this</span>).attr(<span class="string">&#x27;src&#x27;</span>))&#123;</span><br><span class="line">            </span><br><span class="line">          <span class="comment">// For windows style path, we replace &#x27;\&#x27; to &#x27;/&#x27;.</span></span><br><span class="line">          <span class="keyword">var</span> src = $(<span class="built_in">this</span>).attr(<span class="string">&#x27;src&#x27;</span>).replace(<span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">            </span><br><span class="line">          <span class="keyword">if</span>(!<span class="regexp">/http[s]*.*|\/\/.*/</span>.test(src) &amp;&amp;</span><br><span class="line">              !<span class="regexp">/^\s*\//</span>.test(src)) &#123;</span><br><span class="line">              <span class="comment">// For &quot;about&quot; page, the first part of &quot;src&quot; can&#x27;t be removed.</span></span><br><span class="line">              <span class="comment">// In addition, to support multi-level local directory.</span></span><br><span class="line">              <span class="comment">// 去掉数组中的空串</span></span><br><span class="line">              <span class="keyword">var</span> linkArray = link.split(<span class="string">&#x27;/&#x27;</span>).filter( <span class="function">(<span class="params">elem</span>) =&gt;</span> elem !== <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">              <span class="keyword">var</span> srcArray = src.split(<span class="string">&#x27;/&#x27;</span>).filter(<span class="function">(<span class="params">elem</span>) =&gt;</span> elem !== <span class="string">&#x27;&#x27;</span> &amp;&amp; elem !== <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">              </span><br><span class="line">              <span class="keyword">if</span>(srcArray.length &gt; <span class="number">1</span>)&#123;</span><br><span class="line">                srcArray.shift();</span><br><span class="line">              &#125;</span><br><span class="line">              src = srcArray.join(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">              $(<span class="built_in">this</span>).attr(<span class="string">&#x27;src&#x27;</span>, config.root + link + <span class="string">&#x27;/&#x27;</span> + src);</span><br><span class="line">              <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">&quot;update link as:--&gt;&quot;</span>+config.root + <span class="built_in">decodeURIComponent</span>(link) + <span class="string">&quot;/&quot;</span> +  src);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">&quot;no src attr, skipped...&quot;</span>);</span><br><span class="line">            <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info($(<span class="built_in">this</span>));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      data[key] = $.html();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="3-引用图片"><a href="#3-引用图片" class="headerlink" title="3 引用图片"></a>3 引用图片</h3><p>按照如下格式创建同名文件夹存储图片，然后按照 <code>MarkDown</code> 标准语法引入图片即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--- example.md</span><br><span class="line">|--+ example</span><br><span class="line">| ----head.jpeg</span><br></pre></td></tr></table></figure>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">这是代替图片的文字，随便写</span>](<span class="link">head.jpeg</span>)</span><br></pre></td></tr></table></figure>

<p><img src="/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA&%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/hexo%E7%9B%B4%E6%8E%A5%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87.htm/LENA.png" alt="经典LENA!"></p>
]]></content>
      <categories>
        <category>博客搭建&amp;使用笔记</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo 配置 mermaid 支持</title>
    <url>/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA&amp;%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/hexo%E9%85%8D%E7%BD%AEmermaid%E6%94%AF%E6%8C%81.html</url>
    <content><![CDATA[<h1 id="1-插件安装"><a href="#1-插件安装" class="headerlink" title="1 插件安装"></a>1 插件安装</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-filter-mermaid-diagrams</span><br></pre></td></tr></table></figure>
<h1 id="2-在适当位置引入-mermaid-库"><a href="#2-在适当位置引入-mermaid-库" class="headerlink" title="2 在适当位置引入 mermaid 库"></a>2 在适当位置引入 mermaid 库</h1><p>我这里是<code>$&#123;主题&#125;/layout/_partial/footer.ejs</code>, 也可以加在其他位置，但是要确保每个页面都能加载到<br>搞不懂为什么 <code>hexo-filter-mermaid-diagrams</code> 插件只做了将 <code>mermaid</code> 代码渲染成 <code>html</code> 这一步，没有直接引入 <code>mermaid</code> 库。<br>这里就不搞了，直接修改主题手动引入比较方便，懒得弄。  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&#x27;https://cdn.jsdelivr.net/npm/mermaid@10.3.0/+esm&#x27;</span>&gt;&lt;/script&gt; </span><br></pre></td></tr></table></figure>

<h1 id="3-其他"><a href="#3-其他" class="headerlink" title="3 其他"></a>3 其他</h1><p>搞不懂 js 加载顺序和 hexo&amp;nodejs 框架的话，那是另外一个故事，这里不进行记录。</p>
]]></content>
      <categories>
        <category>博客搭建&amp;使用笔记</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>mermaid</tag>
      </tags>
  </entry>
  <entry>
    <title>加密文章插件</title>
    <url>/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA&amp;%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/%E5%8A%A0%E5%AF%86%E6%96%87%E7%AB%A0%E6%8F%92%E4%BB%B6.html</url>
    <content><![CDATA[<h3 id="1-安装插件"><a href="#1-安装插件" class="headerlink" title="1 安装插件"></a>1 安装插件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-blog-encrypt --save</span><br></pre></td></tr></table></figure>
<h3 id="2-配置文件"><a href="#2-配置文件" class="headerlink" title="2 配置文件"></a>2 配置文件</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">encrypt:</span> </span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">abstract:</span> <span class="string">你知道的太多了</span></span><br><span class="line">    <span class="attr">message:</span> <span class="string">你知道的太多了</span></span><br></pre></td></tr></table></figure>

<h3 id="3-文章-front-matter-中的配置"><a href="#3-文章-front-matter-中的配置" class="headerlink" title="3 文章 front-matter 中的配置"></a>3 文章 front-matter 中的配置</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hello World</span><br><span class="line">password: 123456</span><br><span class="line">abstract: 你知道的太多了</span><br><span class="line"><span class="section">message: 你知道的太多了</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>博客搭建&amp;使用笔记</category>
      </categories>
      <tags>
        <tag>plugin</tag>
        <tag>bolg</tag>
      </tags>
  </entry>
  <entry>
    <title>录屏相关软件推荐</title>
    <url>/%E5%A5%BD%E7%94%A8%E7%9A%84%E8%BD%AF%E4%BB%B6&amp;%E6%8F%92%E4%BB%B6/%E5%BD%95%E5%B1%8F%E7%9B%B8%E5%85%B3.html</url>
    <content><![CDATA[<h1 id="1-snipaste"><a href="#1-snipaste" class="headerlink" title="1 snipaste"></a>1 snipaste</h1><blockquote>
<p><a href="https://www.microsoft.com/store/productid/9P1WXPKB68KX?ocid=pdpshare">Mircrosoft store 分享链接</a><br>一个好用的截图软件, 截图+贴图</p>
</blockquote>
<p><img src="/%E5%A5%BD%E7%94%A8%E7%9A%84%E8%BD%AF%E4%BB%B6&%E6%8F%92%E4%BB%B6/%E5%BD%95%E5%B1%8F%E7%9B%B8%E5%85%B3.htm/snipaste.gif" alt="snipaste演示"></p>
<h1 id="2-ScreenToGif"><a href="#2-ScreenToGif" class="headerlink" title="2 ScreenToGif"></a>2 ScreenToGif</h1><blockquote>
<p><a href="www.screentogif.com">官网</a><br><a href="https://www.microsoft.com/store/productid/9N3SQK8PDS8G?ocid=pdpshare">Microsoft store分享链接</a></p>
</blockquote>
<p><img src="/%E5%A5%BD%E7%94%A8%E7%9A%84%E8%BD%AF%E4%BB%B6&%E6%8F%92%E4%BB%B6/%E5%BD%95%E5%B1%8F%E7%9B%B8%E5%85%B3.htm/screentogif.gif" alt="ScreenToGif演示"></p>
<h1 id="3-carnac——显示键盘输入插件"><a href="#3-carnac——显示键盘输入插件" class="headerlink" title="3  carnac——显示键盘输入插件"></a>3  carnac——显示键盘输入插件</h1><blockquote>
<p><a href="https://github.com/Code52/carnac/releases">官方仓库地址</a><br>一个用于演示、屏幕广播和帮助您成为更好的键盘用户的键盘日志和演示实用程序。</p>
</blockquote>
<p>这是一个简短的演示，右下角显示了我目前的输入。<br><img src="/%E5%A5%BD%E7%94%A8%E7%9A%84%E8%BD%AF%E4%BB%B6&%E6%8F%92%E4%BB%B6/%E5%BD%95%E5%B1%8F%E7%9B%B8%E5%85%B3.htm/carnac.gif" alt="demo"></p>
]]></content>
      <categories>
        <category>好用的软件&amp;插件</category>
      </categories>
      <tags>
        <tag>软件推荐</tag>
        <tag>截图</tag>
        <tag>录屏</tag>
      </tags>
  </entry>
  <entry>
    <title>生成项目目录组件 tree-cli</title>
    <url>/%E5%A5%BD%E7%94%A8%E7%9A%84%E8%BD%AF%E4%BB%B6&amp;%E6%8F%92%E4%BB%B6/%E7%94%9F%E6%88%90%E9%A1%B9%E7%9B%AE%E7%9B%AE%E5%BD%95%E7%BB%84%E4%BB%B6tree-cli.html</url>
    <content><![CDATA[<blockquote>
<p><a href="https://github.com/MrRaindrop/tree-cli">https://github.com/MrRaindrop/tree-cli</a></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g tree-cli</span><br></pre></td></tr></table></figure>
<p>** windows下应当使用 treee命令 **<br><img src="/%E5%A5%BD%E7%94%A8%E7%9A%84%E8%BD%AF%E4%BB%B6&%E6%8F%92%E4%BB%B6/%E7%94%9F%E6%88%90%E9%A1%B9%E7%9B%AE%E7%9B%AE%E5%BD%95%E7%BB%84%E4%BB%B6tree-cli.htm/tree.gif" alt="DEMO"></p>
]]></content>
      <categories>
        <category>好用的软件&amp;插件</category>
      </categories>
      <tags>
        <tag>tree-cli</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>在小米平板6上使用vscode</title>
    <url>/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/%E5%9C%A8%E5%B0%8F%E7%B1%B3%E5%B9%B3%E6%9D%BF6%E4%B8%8A%E4%BD%BF%E7%94%A8vscode.html</url>
    <content><![CDATA[<p>使用 termux 安装 code-server, 随后使用浏览器安装离线应用。</p>
<h1 id="1-安装-termux"><a href="#1-安装-termux" class="headerlink" title="1 安装 termux"></a>1 安装 termux</h1><blockquote>
<p><a href="https://termux.dev/en/">https://termux.dev/en/</a><br>Termux 是一个 Android 终端模拟器, 可以直接运行的 Linux 环境应用。<br>在这个环境下只默认安装了基本的软件包，但是可以使用 APT 包管理器安装其他应用程序。  </p>
</blockquote>
<ol>
<li>它用 proot 加载的 linux rootfs ——用户态的 chroot ，基于 linux ptrace 函数。</li>
<li>它的维护团队，编译了一堆(近千个)用于扩展 android console 的命令行工具，包括 “安卓版的linux桌面环境” —— xfce(这不同于proot出来的linux中运行的xfce)。</li>
</ol>
<h1 id="2-安装-proot-distro-并加载-debian"><a href="#2-安装-proot-distro-并加载-debian" class="headerlink" title="2 安装 proot-distro 并加载 debian"></a>2 安装 proot-distro 并加载 debian</h1><blockquote>
<p>proot-distro <a href="https://github.com/termux/proot-distro">https://github.com/termux/proot-distro</a></p>
</blockquote>
<p>PRoot 的 Bash 脚本包装器，可管理基于 chroot 的 Linux 发行版。不需要root或任何特殊的ROM、内核。<br>PRoot-Distro 并不是虚拟机，这是一个基于 PRoot 实用程序的容器环境管理器，能够模拟“chroot”和“mount-bind”。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;初始化储存&quot;</span></span><br><span class="line">termux-setup-storage</span><br><span class="line"><span class="string">&quot;更换镜像源&quot;</span></span><br><span class="line">termux-change-repo</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;加载 debian 内核&quot;</span></span><br><span class="line">apt install proot-distro</span><br><span class="line">proot-distro install debian</span><br><span class="line">proot-distro login debian</span><br></pre></td></tr></table></figure>
<p>此时已经可以在平板上运行完整 Linux 应用程序。</p>
<h1 id="3-安装-code-server-并保存为离线应用"><a href="#3-安装-code-server-并保存为离线应用" class="headerlink" title="3 安装 code-server 并保存为离线应用"></a>3 安装 code-server 并保存为离线应用</h1><blockquote>
<p><a href="https://github.com/coder/code-server">https://github.com/coder/code-server</a></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://code-server.dev/install.sh | sh</span><br></pre></td></tr></table></figure>

<p>小米浏览器访问 <code>localhost:8080</code>，并根据提示安装为离线应用程序</p>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>-小米平板6 -开发工具</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/%E6%A8%A1%E6%9D%BF%E4%BB%A3%E7%A0%81/Trie(Prefix_Tree).html</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Trie</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> isLeaf;</span><br><span class="line">        Node[] children = <span class="keyword">new</span> Node[<span class="number">26</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    Node root = <span class="keyword">new</span> Node();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Trie</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">        Node cur  = root;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c: word.toCharArray())&#123;</span><br><span class="line">            <span class="keyword">if</span>(cur.children[c-<span class="string">&#x27;a&#x27;</span>] == <span class="keyword">null</span>)</span><br><span class="line">                cur.children[c-<span class="string">&#x27;a&#x27;</span>] = <span class="keyword">new</span> Node();</span><br><span class="line">            cur = cur.children[c-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        cur.isLeaf = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">search</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">        Node cur = root;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c: word.toCharArray())&#123;</span><br><span class="line">            <span class="keyword">if</span>(cur.children[c-<span class="string">&#x27;a&#x27;</span>] == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            cur = cur.children[c-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cur.isLeaf;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">startsWith</span><span class="params">(String prefix)</span> </span>&#123;</span><br><span class="line">        Node cur = root;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c: prefix.toCharArray())&#123;</span><br><span class="line">            <span class="keyword">if</span>(cur.children[c-<span class="string">&#x27;a&#x27;</span>] == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            cur = cur.children[c-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your Trie object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * Trie obj = new Trie();</span></span><br><span class="line"><span class="comment"> * obj.insert(word);</span></span><br><span class="line"><span class="comment"> * boolean param_2 = obj.search(word);</span></span><br><span class="line"><span class="comment"> * boolean param_3 = obj.startsWith(prefix);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>模板代码</category>
      </categories>
  </entry>
  <entry>
    <title></title>
    <url>/%E6%A8%A1%E6%9D%BF%E4%BB%A3%E7%A0%81/gcd.html</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(m &lt; n) <span class="keyword">return</span> gcd(n, m);</span><br><span class="line">    <span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (n != <span class="number">0</span>) &#123;</span><br><span class="line">        tmp = m % n;</span><br><span class="line">        m = n;</span><br><span class="line">        n = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lcm</span><span class="params">(<span class="keyword">int</span> n1, <span class="keyword">int</span> n2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n1 == n2) <span class="keyword">return</span> n1;</span><br><span class="line">    <span class="keyword">return</span> n1 / gcd(n1, n2) * n2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>模板代码</category>
      </categories>
  </entry>
  <entry>
    <title>java 琐碎语法整理</title>
    <url>/%E7%90%90%E7%A2%8E%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/java%E8%AF%AD%E6%B3%95.html</url>
    <content><![CDATA[<ul>
<li>带标签的 break, 用于跳出多层循环，定义于 while, do, for 的开头，使用于 break, continue 后<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">OUTER: <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)&#123;</span><br><span class="line">        <span class="keyword">break</span> OUTER; <span class="comment">// 直接跳出外层循环</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>琐碎知识整理</category>
      </categories>
  </entry>
  <entry>
    <title>pytorch</title>
    <url>/%E7%90%90%E7%A2%8E%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/pytorch.html</url>
    <content><![CDATA[<ul>
<li>@ 和 * 运算符： <code>@</code> 表示常见的矩阵乘法, <code>*</code> 为对应元素相乘</li>
<li>以<code>tensor</code>为元素的<code>list</code>，转为<code>tensor</code><br><code>batch_pred_scores = torch.cat(tuple(batch_pred_scores), 0)</code></li>
</ul>
]]></content>
      <categories>
        <category>琐碎知识整理</category>
      </categories>
      <tags>
        <tag>pytorch</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>vue 琐碎知识整理</title>
    <url>/%E7%90%90%E7%A2%8E%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/vue.html</url>
    <content><![CDATA[<ol>
<li><p>v-model 默认绑定值<br> 在父组件为子组件使用 <code>v-model</code> 绑定模型时，默认绑定到子组件的 <code>value</code> 属性上，并消化 <code>input</code> 事件。</p>
</li>
<li></li>
</ol>
]]></content>
      <categories>
        <category>琐碎知识整理</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>为什么很多题目都对1e9+7取模？</title>
    <url>/%E7%90%90%E7%A2%8E%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/%E5%85%B3%E4%BA%8Eleetcode%E4%B8%BA%E4%BB%80%E4%B9%88%E5%AF%B91e9+7%E5%8F%96%E6%A8%A1.html</url>
    <content><![CDATA[<blockquote>
<p>转载自 <a href="https://blog.csdn.net/weixin_44337445/article/details/105853068">https://blog.csdn.net/weixin_44337445/article/details/105853068</a></p>
</blockquote>
<h4 id="取模出现在什么场景下"><a href="#取模出现在什么场景下" class="headerlink" title="取模出现在什么场景下"></a>取模出现在什么场景下</h4><p>出现在大数阶乘或者是大数的排列组合，一般要求对输出结果进行取模。  </p>
<h4 id="为什么用这种数"><a href="#为什么用这种数" class="headerlink" title="为什么用这种数"></a>为什么用这种数</h4><p>其实不止1e9+7，还有1e9+9和998244353。这三个数都是一个质数，同时小于2的30次方 。<br>这种数的奇妙之处在于：</p>
<ol>
<li>如果原数是<code>int</code>，那么所有模过的数之间的加法操作必然不会溢出<code>int</code></li>
<li>如果原数是<code>long</code>, 那么所有模过的数两两相乘必然不会溢出<code>long</code></li>
</ol>
<p>没用的知识增加了.jpg</p>
]]></content>
      <categories>
        <category>琐碎知识整理</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>mod</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/%E7%90%90%E7%A2%8E%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/%E5%90%84%E7%A7%8D%E5%91%BD%E4%BB%A4%E9%80%9F%E6%9F%A5.html</url>
    <content><![CDATA[<h2 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>


<h2 id="linux-终端"><a href="#linux-终端" class="headerlink" title="linux 终端"></a>linux 终端</h2><p>ctrl+c 结束正在运行的程序，发送 SIGINT 信号<br>ctrl+d 结束输入或退出shell<br>ctrl+s 暂停屏幕输出<br>ctrl+q 恢复屏幕输出<br>ctrl+l 清屏，【是字母L的小写】等同于Clear</p>
]]></content>
      <categories>
        <category>琐碎知识整理</category>
      </categories>
  </entry>
  <entry>
    <title>模板代码——字典树</title>
    <url>/%E7%90%90%E7%A2%8E%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/%E5%AD%97%E5%85%B8%E6%A0%91.html</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Trie</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TrieNode</span></span>&#123;</span><br><span class="line">        TrieNode[] children = <span class="keyword">new</span> TrieNode[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">boolean</span> isWord;</span><br><span class="line">    &#125;</span><br><span class="line">    TrieNode root = <span class="keyword">new</span> TrieNode();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Trie</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildDict</span><span class="params">(String[] dict)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(String s: dict)&#123;</span><br><span class="line">            TrieNode cur = root;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">char</span> c: s.toCharArray())&#123;</span><br><span class="line">                <span class="keyword">if</span>(cur.children[c-<span class="string">&#x27;a&#x27;</span>] == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    cur.children[c-<span class="string">&#x27;a&#x27;</span>] = <span class="keyword">new</span> TrieNode();</span><br><span class="line">                &#125;</span><br><span class="line">                cur = cur.children[c-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            cur.isWord = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(<span class="keyword">char</span>[] cs, TrieNode root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c: cs)&#123;</span><br><span class="line">            <span class="keyword">if</span>(root.children[c-<span class="string">&#x27;a&#x27;</span>] == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            root = root.children[c-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root.isWord;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>琐碎知识整理</category>
      </categories>
      <tags>
        <tag>trie</tag>
      </tags>
  </entry>
  <entry>
    <title>没什么用的小知识</title>
    <url>/%E7%90%90%E7%A2%8E%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/%E6%B2%A1%E4%BB%80%E4%B9%88%E7%94%A8%E7%9A%84%E5%B0%8F%E7%9F%A5%E8%AF%86.html</url>
    <content><![CDATA[<ul>
<li>VCS 是 version control system 的缩写</li>
<li>Java Double.MIN_VALUE 指的是最小正数，用 Double.NEGATIVE_INFINITY 表示负无穷（-1.0 / 0.0）</li>
</ul>
]]></content>
      <categories>
        <category>琐碎知识整理</category>
      </categories>
  </entry>
  <entry>
    <title>安排</title>
    <url>/%E9%9A%8F%E7%AC%94/TODO.html</url>
    <content><![CDATA[<h1 id="1-博客记录相关"><a href="#1-博客记录相关" class="headerlink" title="1 博客记录相关"></a>1 博客记录相关</h1><ol>
<li>整理 vscode 各种插件的安装和使用</li>
<li>整理 hexo 插件和使用方式</li>
<li>找一下之前的论文笔记</li>
<li>整理浏览器插件和脚本  </li>
<li>整理系统的一些配置  </li>
<li>linux 系统运维相关的东西和环境  </li>
</ol>
<h1 id="2-来山东要做的几件事情"><a href="#2-来山东要做的几件事情" class="headerlink" title="2 来山东要做的几件事情"></a>2 来山东要做的几件事情</h1><ol>
<li>爬泰山</li>
<li>吃九转大肠&amp;葱烧海参</li>
<li>看黄河</li>
<li>跑半马</li>
</ol>
<h1 id="3-其他"><a href="#3-其他" class="headerlink" title="3 其他"></a>3 其他</h1><ol>
<li><del>日常用笔记本的 C 盘满了得清空一下</del>  已经通过从 D 盘切一块补到 C 盘解决，早晚 C 盘要比 D 盘大</li>
<li>突然奇想，github.io 似乎也可以作为摄影图床</li>
<li>修改一下代码使得能够兼容预览和发布之后的效果，并且重新打包成 hexo 插件发布。    </li>
</ol>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>日报</title>
    <url>/%E9%9A%8F%E7%AC%94/%E6%97%A5%E6%8A%A5.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="4ef59b8ae0f55d954770136102a15d178ba9a967b7f68f68db58a4d0f0299c67"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">你知道的太多了</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>神の未知领域</title>
    <url>/%E9%9A%8F%E7%AC%94/%E7%A5%9E%E3%81%AE%E6%9C%AA%E7%9F%A5%E9%A2%86%E5%9F%9F.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="596fe26415f3f846259d353fe7b3eb38fe49f91503129558b2edb2a052d2c7ba">3b7a161d493d4415abccc0a181745221fadba51813c384879988f07d7a7c920ec5b94b474688695655a0483091dadfd2bcaa70c8670caa342099b618b19b324e26cd3b21c72beb5d06ad67804e0aec89c54a43144defe5df58a1a5bd1394b6d3c2cb79f9488294c1c5a19a864277df43e5e852492ec2b8d155a9bdf809f2aa6bc4423308bb16986be19394af7fd804713792591977959eb179cdd89a1a5c391f05da773914d8697a196df4262141c89d26d3c27df9e34ab40a7d3f47f79f8ca016e3c4a89b144f4ef4bc6e976eb02b121884b0252257150f25e8f02f0fb92528394930138f0af548d723bf26e4f01c614c220f99f090afb74637f365c1d67b112fca74d14ee0cc3c0db42002b5843ef314334614b31001b3a4443219820cd6cb4f64c4f548f12501b81e352b4ec2185034b092870cea1a67a505204ec77fa926389228de600f9ad411d5e325d61b05ec05696e5dd86e5dfe4fdf36278a73209aca257126fceacf457925f6dce6a9829d1912e7f700688b9b88a10437b66e8cb6de7d15bc634107ca993bdf04218393df2d31d64c47251884eb87c9b3758a8205c77ed1f38b74bc93f69c05b08b95c86b8bbc2f11406866141263c56d9d09b8f415ac502dfecc70406a3ed56db7057dacda439f3c29a5964e69f3ac5a0ceff876f74277e57e3cfdc6a69fac0c8671aa35518727ebd30de7a9f61a9b436213a3320fad536b69a8690588f6ff796d57aa19b92dcc38e6eef98abfc32edde74a248271d6298a6074be8c74eb8eed1aec606544105132e7d59fd91632f5a706c5246bd3ae548d92a8ae41bdc3c022db36d2a7ddc5deb2d292fee333dc1d36a0d673f8025ad1cb189a09ac9fe0caec2b3d9c9678fa41b98fff29c1d76027f3b42fc163a1ee3ae4b2291dc29c9d45d95e58176f6b58545676d960b34baa5cfac4f8e4deeb4dd7d87547b18f01ec2aa5c38ee6c63409a5e680494888f7baa31d1eec54786625eeec2752eb3cb76fc41b912adf93ee73bf7bf9bf527a05548cd3a694800d8ed0e29c755d51307aa1d4654f3999d5b4af64728338194c4ee34a395495b684626b9e81769a52d69dca47fc2b1ea1700587caf8a39bc66b27ebf7b265d422955d867b74e668de865304109b4a4fde235d9fe77834c551101bc617267275b90aaba469c3dfbcdb0fe331b7ce8fe185364ca6185036844facd52891c8aea54535ad68e03cf2851885b3cc02fb40e7763ae7b156df6953d6238c789097f99f7641e092663db0bb34a325a1c5e55b43974df877f9b047a22a3fa82e5780e03519079c4ebfab36a84beda2db430e11ac6bb9e8a58263241d859a53c7bc0efa36940a1e390aa09a8233085c1acdf3e71620716dc9f604052df93f3836956e10887f8031d2f8c276052093023b6ce417af65421f41926425afc6a3228463a40f62c10ff0feec838b562f4178ff772c8d66524c9251d502b81b511190f14459d95c7152559bbd164da562ad27d34551502dc65adae86cbb4a56a4db9b089ad1e5fc48f448809beda31e6deb77f4a1e2333b40743738d0d215b08f2706cc7424ca53cf7f776fc8104fc97cda4dd9a23493b257d2dc99c6c92ba648e8ec9fa863da5ccd8d38bf22a003ac2009b6faf3a8d1088bc1f16a42bd471b784ee8492e59a8d1810fc87bacc8b1d124481cf8fb448c34da5879f93edefbe995b48c017e175a7c2f92718a5aaf3b6d4808af3e7ab499375c08d9daef07194351031ae04808789020e4</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">你知道的太多了</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>ctf 简介</title>
    <url>/ctfhub/ctf%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/ctf%E7%AE%80%E4%BB%8B.html</url>
    <content><![CDATA[<p>CTF（Capture The Flag，夺旗赛）CTF 的前身是传统黑客之间的网络技术比拼游戏，起源于 1996 年第四届 DEFCON，以代替之前黑客们通过互相发起真实攻击进行技术比拼的方式。</p>
<p>CTF是一种流行的信息安全竞赛形式，其英文名可直译为“夺得Flag”，也可意译为“夺旗赛”。其大致流程是，参赛团队之间通过进行攻防对抗、程序分析等形式，率先从主办方给出的比赛环境中得到一串具有一定格式的字符串或其他内容，并将其提交给主办方，从而夺得分数。为了方便称呼，我们把这样的内容称之为“Flag”。</p>
<p>flag所表示的为目标服务器上存储的一些敏感机密的信息, 这些信息正常情况下是不能对外暴露的。选手利用目标的一些漏洞，获取到flag，其表示的即为在真实的黑客攻击中窃取到的机密信息。</p>
<p>一般情况下flag拥有固定格式为flag{xxxxx}，有些比赛会把flag关键词替换，例如我们CTFHub平台的flag为ctfhub{xxxxx}，利用固定格式来反推flag也是一种常见的解题思路</p>
<p>通常来说CTF是以团队为单位进行参赛。每个团队3-5人(具体根据主办方要求决定)，在整个比赛过程中既要每个选手拥有某个方向的漏洞挖掘能力，也要同队选手之间的相互配合。</p>
]]></content>
      <categories>
        <category>ctfhub</category>
        <category>ctf基础知识</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/ctfhub/ctf%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E7%AB%9E%E8%B5%9B%E6%A8%A1%E5%BC%8F.html</url>
    <content><![CDATA[<h1 id="11"><a href="#11" class="headerlink" title="11"></a>11</h1>]]></content>
      <categories>
        <category>ctfhub</category>
        <category>ctf基础知识</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring</title>
    <url>/notes/Spring.html</url>
    <content><![CDATA[<blockquote>
<p><a href="https://www.w3cschool.cn/wkspring/dcu91icn.html">Spring 体系结构</a></p>
</blockquote>
<h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h1><ul>
<li>创建一个 java bean 对象<br></li>
</ul>
<p><strong>可以用 kotlin</strong> :<code>data class Helloworld（var message:String = &quot;helloWorld&quot;)</code></p>
<ul>
<li>在 src 下 创建 Beans.xml 文件对 javaBean 进行注册<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;bean id=&quot;helloWorld&quot; class=&quot;Helloworld&quot;&gt;</span><br><span class="line">  &lt;property name=&quot;message&quot; value=&quot;Hello World&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></li>
<li>创建应用上下文 读取数据 <br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var context = ClassPathXmlApplicationContext(&quot;Beans.xml&quot;)</span><br><span class="line">var obj: test = context.getBean(&quot;test&quot;) as test</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="Ioc-容器"><a href="#Ioc-容器" class="headerlink" title="Ioc 容器"></a>Ioc 容器</h1><p>&emsp;&emsp;**IoC <em>Inversion of Control</em> 把创建对象的权利交给框架 **<br>&emsp;&emsp;Spring 容器是 Spring 框架的核心, 容器创建、连接、配置对象, 并管理他们的声明周期.<br>&emsp;&emsp;Spring 容器通过依赖注入 (DI) 来管理组件.</p>
<center>![Spring 容器](https://img.w3cschool.cn/attachments/image/wk/wkspring/ioc1.jpg)</center>
<center>Spring IoC 容器利用 Java 的 POJO 类和配置元数据来生成完全配置和可执行的系统或应用程序  

<p><strong>初始化容器-&gt;context.getBean()获取 Bean 的实例</strong></p>
<h2 id="Spring-提供的两种不同类型的容器"><a href="#Spring-提供的两种不同类型的容器" class="headerlink" title="Spring 提供的两种不同类型的容器"></a>Spring 提供的两种不同类型的容器</h2><ul>
<li><strong>Spring BeanFactory 容器</strong><br> 最基本的容器, 给 DI 提供了最基本的支持</li>
<li><strong>Spring ApplicationContext 容器</strong><br>添加了更多企业特定的功能, 如从一个属性文件中解析文本信息的能力, 包括 BeanFactory 容器的所有功能  </li>
</ul>
<h2 id="BeanFactory-容器"><a href="#BeanFactory-容器" class="headerlink" title="BeanFactory 容器"></a>BeanFactory 容器</h2><p>&emsp;&emsp;最简单的容器, 主要的功能是为依赖注入 (DI) 提供支持.<br>&emsp;&emsp;最常用的借口实现时 XmlBeanFactory 类, 该容器从一个 XML 文件中读取配置元数据, 由这些元数据来生成一个被配置化的系统或应用<br>&emsp;&emsp;BeanFactory 只在资源宝贵的移动设备或者基于 applet 的应用当中 (用不到了吧 applet凉了)<br><strong>生成一个 XmlBeanFactory 对象</strong> <code>XmlBeanFactory factory = new XmlBeanFactory(new ClassPathResource(&quot;Beans.xml&quot;))</code><br>通过 ClassPathResource 加载路径 CLASSPATH 下可用的 bean 配置文件</p>
<h2 id="ApplicationContext-容器"><a href="#ApplicationContext-容器" class="headerlink" title="ApplicationContext 容器"></a>ApplicationContext 容器</h2><p>&emsp;&emsp;除了可以加载配置文件中定义的 bean, 将所有的 bean 集中到一起进行分配外, 还增加了企业所需要的功能, 比如, 从属性文件中解析文本信息和事件传递给所指定的监听器.<br>&emsp;&emsp;在 org.springframework.context.ApplicationContextinterface 接口中定义<br>最常用的 ApplicationContext 接口实现:  </p>
<ul>
<li><strong>FileSystemXmlApplicationContext</strong><br>该容器从 XML 文件中加载已被定义的 bean, 需要给构造器提供 XML 文件的完整路径</li>
<li><strong>ClassPathXmlApplicationContext</strong><br>不需要提供 XML 文件的完整路径, 只需正确的配置 CLASSPATH 即可.</li>
<li><strong>WebXmlApplicationContext</strong><br>从一个 web 应用程序的范围内加载在 XML 文件中已被定义的 bean</li>
</ul>
<h2 id="Bean-定义"><a href="#Bean-定义" class="headerlink" title="Bean 定义"></a>Bean 定义</h2><p>&emsp;&emsp;bean 对象由容器管理, 由容器提供的配置元数据创建.<br><strong>三种配置方式:</strong></p>
<ul>
<li>xml 的配置文件</li>
<li>注解</li>
<li>java</li>
</ul>
<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">class</td>
<td align="left">强制性要求, 制定用来创建 bean 的bean类</td>
</tr>
<tr>
<td align="left">name</td>
<td align="left">指定唯一的 bean 标识符, 可以使用 ID 和/或 name 属性来指定 bean 的标识符</td>
</tr>
<tr>
<td align="left">scope</td>
<td align="left">指定作用域</td>
</tr>
<tr>
<td align="left">constructor-arg/<br>properties/<br>autowirin mode</td>
<td align="left">用来注入依赖关系 (以后会讨论)</td>
</tr>
<tr>
<td align="left">lazy-initialization mode</td>
<td align="left">延迟初始化, 在第一次被请求时创建实例 (而不是启动时)</td>
</tr>
<tr>
<td align="left">init-method</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">destroy-method</td>
<td align="left"></td>
</tr>
</tbody></table>
<h2 id="Bean-作用域"><a href="#Bean-作用域" class="headerlink" title="Bean 作用域"></a>Bean 作用域</h2><ul>
<li><strong>singleton</strong><br> 将 bean 的定义限制在每一个 Spring IoC 容器中, 单一实例 (返回同一个实例) (默认)</li>
<li><strong>protype</strong> <br> 每次需要的时候都返回一个新的实例</li>
<li><strong>只在 web-aware Spring ApplicationContext 中有效的作用域</strong><ul>
<li><strong>request</strong></li>
<li><strong>session</strong></li>
<li><strong>global-session</strong> (全局会话)</li>
</ul>
</li>
</ul>
<h2 id="Bean-生命周期"><a href="#Bean-生命周期" class="headerlink" title="Bean 生命周期"></a>Bean 生命周期</h2><h3 id="init-method"><a href="#init-method" class="headerlink" title="init-method"></a>init-method</h3><p>org.springframework.beans.factory.InitializingBean 接口指定一个单一的方法：<br><code>void afterPropertiesSet() throws Exception</code><br>可以使 Bean 类实现这个接口  </p>
<p>或者在 xml 配置文件中 通过 init-method 指定一个返回值为空的函数<br><code>&lt;bean id=&quot;exampleBean&quot; class=&quot;examples.ExampleBean&quot; init-method=&quot;init&quot;</code>  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class ExampleBean&#123;</span><br><span class="line">  public void init()&#123;</span><br><span class="line">    // do some initialization work</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="destroy-method"><a href="#destroy-method" class="headerlink" title="destroy-method"></a>destroy-method</h3><p>与 init-method 相同<br>org.springframework.beans.factory.DisposableBean 接口指定一个单一的方法：<br><code>void destroy() throws Exception;</code></p>
<p>&emsp;&emsp;如果在非 web 应用程序环境中使用 Spring 的 IoC 容器；例如在丰富的客户端桌面环境中；那么在 JVM 中你要注册关闭 hook。这样做可以确保正常关闭，为了让所有的资源都被释放，可以在单个 beans 上调用 destroy 方法。</p>
<p>&emsp;&emsp;建议不要使用 InitializingBean 或者 DisposableBean 的回调方法，因为 XML 配置在命名方法上提供了极大的灵活性。 (W3C School原文, 然而我觉得不行  )</p>
<h3 id="默认的初始化和销毁方法"><a href="#默认的初始化和销毁方法" class="headerlink" title="默认的初始化和销毁方法"></a>默认的初始化和销毁方法</h3><p>在 xml 文件的开端为所有在该配置文件中注册的 Bean 指定默认的 初始化和销毁方法  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;</span><br><span class="line">    default-init-method=&quot;init&quot;</span><br><span class="line">    default-destroy-method=&quot;destroy&quot;&gt;</span><br><span class="line"></span><br><span class="line">   &lt;bean id=&quot;...&quot; class=&quot;...&quot;&gt;</span><br><span class="line">       &lt;!-- collaborators and configuration for this bean go here --&gt;</span><br><span class="line">   &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>
<h2 id="后置处理器"><a href="#后置处理器" class="headerlink" title="后置处理器"></a>后置处理器</h2><p>&emsp;&emsp;BeanPostProcessor 接口定义了许多回调方法, 贯穿 Bean 各个生命周期的前后 (类似过滤器?)<br>&emsp;&emsp;可配置多个 BeanPostProcessor, 通过 Ordered 接口提供的 order 属性来确定执行顺序<br>&emsp;&emsp;BeanPostProcessor 可以对 bean（或对象）实例进行操作，这意味着 Spring IoC 容器实例化一个 bean 实例，然后 BeanPostProcessor 接口进行它们的工作。<br>&emsp;&emsp;** 声明的时候不必指明 id/name (指明了也没实际作用) **</p>
<h2 id="定义继承"><a href="#定义继承" class="headerlink" title="定义继承"></a>定义继承</h2><p>&emsp;&emsp;与 java类的继承无关, 但概念相同.<br>&emsp;&emsp;<strong>通过指定 parent 属性实现</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;bean id=&quot;helloWorld&quot; class=&quot;com.tutorialspoint.HelloWorld&quot;&gt;</span><br><span class="line">      &lt;property name=&quot;message1&quot; value=&quot;Hello World!&quot;/&gt;</span><br><span class="line">      &lt;property name=&quot;message2&quot; value=&quot;Hello Second World!&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;bean id=&quot;helloIndia&quot; class=&quot;com.tutorialspoint.HelloIndia&quot; parent=&quot;helloWorld&quot;&gt;</span><br><span class="line">      &lt;property name=&quot;message1&quot; value=&quot;Hello India!&quot;/&gt;</span><br><span class="line">      &lt;property name=&quot;message3&quot; value=&quot;Namaste India!&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>
<p>** 类文件中 两个类可以无继承关系, <em>定义的继承?</em>**</p>
<h3 id="定义模板"><a href="#定义模板" class="headerlink" title="定义模板"></a>定义模板</h3><p>可以创建一个 Bean 定义模板，被其他子 bean 定义使用。在定义一个 Bean 定义模板时，不指定 class 属性，而应该指定带 true 值的抽象属性，如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">   &lt;bean id=&quot;beanTeamplate&quot; abstract=&quot;true&quot;&gt;</span><br><span class="line">      &lt;property name=&quot;message1&quot; value=&quot;Hello World!&quot;/&gt;</span><br><span class="line">      &lt;property name=&quot;message2&quot; value=&quot;Hello Second World!&quot;/&gt;</span><br><span class="line">      &lt;property name=&quot;message3&quot; value=&quot;Namaste India!&quot;/&gt;</span><br><span class="line">   &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">   &lt;bean id=&quot;helloIndia&quot; class=&quot;com.tutorialspoint.HelloIndia&quot; parent=&quot;beanTeamplate&quot;&gt;</span><br><span class="line">      &lt;property name=&quot;message1&quot; value=&quot;Hello India!&quot;/&gt;</span><br><span class="line">      &lt;property name=&quot;message3&quot; value=&quot;Namaste India!&quot;/&gt;</span><br><span class="line">   &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>
<h2 id="依赖注入-DI-Dependency-Injection"><a href="#依赖注入-DI-Dependency-Injection" class="headerlink" title="依赖注入  DI ( Dependency Injection)"></a>依赖注入  DI ( Dependency Injection)</h2><p>&emsp;&emsp;当一个 bean 实例引用到了另外一个 bean 实例时 Spring 帮助我们创建依赖 bean 实例并传递 (注入) 到另一个 bean 中  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// TextEditor 依赖于 SpellChecker</span><br><span class="line">pulic class TextEditor&#123;</span><br><span class="line">  private SpellChecker spellChecker</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="基于构造函数的依赖注入"><a href="#基于构造函数的依赖注入" class="headerlink" title="基于构造函数的依赖注入"></a>基于构造函数的依赖注入</h3><p>&emsp;&emsp;在构造函数中传递引用对象的值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- Definition for textEditor bean --&gt;</span><br><span class="line">&lt;bean id=&quot;textEditor&quot; class=&quot;com.tutorialspoint.TextEditor&quot;&gt;</span><br><span class="line">  &lt;!-- 显式指明 构造函数 参数 (按照声明顺序)--&gt;</span><br><span class="line">  &lt;constructor-arg ref=&quot;spellChecker&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Definition for spellChecker bean --&gt;</span><br><span class="line">&lt;bean id=&quot;spellChecker&quot;   class=&quot;com.tutorialspoint.SpellChecker&quot;&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">```  </span><br><span class="line">如果使用 type 属性显式指定了构造函数参数的类型, 容器也可以与简单类型匹配的类型.如:  </span><br></pre></td></tr></table></figure>
<beans>
  <bean id="exampleBean" class="examples.ExampleBean">
    <constructor-arg type="int" value="2001">
    <constructor-arg type="java.lang.String" value="Zara">
  </constructor-arg></constructor-arg></bean>
</beans>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">最好的在构造函数中传递引用的方式, 使用 index 来显式指定构造函数参数的索引.  </span><br></pre></td></tr></table></figure>
<beans>

   <bean id="exampleBean" class="examples.ExampleBean">
      <constructor-arg index="0" value="2001">
      <constructor-arg index="1" value="Zara">
   </constructor-arg></constructor-arg></bean>

</beans>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">** 传递引用用 *ref*, 传递值用 *value***</span><br><span class="line">### 基于设置函数的依赖注入  </span><br><span class="line">&amp;emsp;&amp;emsp;`&lt;property name=&quot;&quot; value/ref=&quot;&quot;`  </span><br><span class="line">&amp;emsp;&amp;emsp;看做 bean 的一个属性  </span><br><span class="line">#### 使用 p-namespace 重写 property 配置</span><br></pre></td></tr></table></figure>
<bean id="john-classic" class="com.example.Person">
     <property name="name" value="John Doe">
     <property name="spouse" ref="jane">
</property></property></bean>
<!-- p-namespace 重写 -->
<bean id="john-classic" class="com.example.Person" p:name="John Doe" p:spouse-ref="jane" <figure><table><tr><td class="code"><pre><span class="line">**-ref** 部分表明这不是一个直接的值, 而是对另一个 bean 的引用.</span><br><span class="line">### 使用内部  Bean 注入  </span><br><span class="line">inner beans -----&gt; 在其他 bean 的范围内定义的 bean</span><br></pre></td></tr></table>
<bean id="textEditor" class="com.tutorialspoint.TextEditor">
      <property name="spellChecker">
         <bean id="spellChecker" class="com.tutorialspoint.SpellChecker">
       </bean></property>
</bean>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">### 注入集合  </span><br><span class="line">&amp;emsp;&amp;emsp;当属性是 List, Set, Map, Props 时 可以使用如下</span><br></pre></td></tr></table></figure>
  <property name="addressList">
    <list>
      <value>value1</value>
    </list>
  </property>
  ...
    <map>
      <entry key="1" value="VALUE1">
    </entry></map>
  ...
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 自动装配</span><br><span class="line">## byName (id/name)</span><br><span class="line">&amp;emsp;&amp;emsp;这种模式由属性名称指定自动装配。Spring 容器看作 beans，在 XML 配置文件中 beans 的 auto-wire 属性设置为 byName。然后，它尝试将它的属性与配置文件中定义为相同名称的 beans 进行匹配和连接。如果找到匹配项，它将注入这些 beans，否则，它将抛出异常。  </span><br><span class="line">&amp;emsp;&amp;emsp;例如，在配置文件中，如果一个 bean 定义设置为自动装配 byName，并且它包含 spellChecker 属性（即，它有一个 setSpellChecker(...) 方法），那么 Spring 就会在 配置文件 beans.xml 中查找定义名为 spellChecker 的 bean，并且用它来设置这个属性。(基于 set)仍然可以使用 &lt;property&gt; 标签连接其余的属性。下面的例子将说明这个概念。  </span><br><span class="line">## byType  (class)</span><br><span class="line">&amp;emsp;&amp;emsp;这种模式由属性类型指定自动装配。Spring 容器看作 beans，在 XML 配置文件中 beans 的 autowire 属性设置为 byType。然后，如果它的 type 恰好与配置文件中 beans 中的一个相匹配，它将尝试匹配和连接它的属性。如果找到匹配项，它将注入这些 beans，否则，它将抛出异常。</span><br><span class="line">## 由构造函数自动装配</span><br><span class="line">&amp;emsp;&amp;emsp;与 byType 相似，它应用于构造器参数。配置文件中 beans 的 autowire 属性设置为 constructor。会尝试把它的构造函数的参数与配置文件中 beans 名称中的一个进行匹配和连线。如果找到匹配项，它会注入这些 bean，否则，它会抛出异常。</span><br><span class="line"># 注解</span><br><span class="line">&amp;emsp;&amp;emsp;使用 @Autowired 注解, 必须事先声明 AutowiredAnnotationBeanPostProcesser 的 Bean  </span><br><span class="line">&amp;emsp;&amp;emsp;`&lt;bean class=&quot;org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcesser&quot;/&gt;`  </span><br><span class="line">&amp;emsp;&amp;emsp;类似的,   </span><br><span class="line">&amp;emsp;&amp;emsp;@Required ----&gt; RequiredAnnotationBeanPostProcessor  </span><br><span class="line">&amp;emsp;&amp;emsp;@Resource, @PostConstruct, @PreDestroy ----&gt; CommonAnnotationBeanPostProcessor  </span><br><span class="line">&amp;emsp;&amp;emsp;@PersistenceContext ----&gt; PersistenceAnnotationBeanPostProcessor  </span><br><span class="line">**可以使用 &lt;context:annotation-config/&gt; 隐式地向 Spring 容器注册以上四个 Bean**  </span><br><span class="line">另外, 在使用注解的时候一辩会配置扫描包路径选项:  </span><br><span class="line">`&lt;context:component-scan base-package=&quot;pack.pack&quot;/&gt;`  </span><br><span class="line">使用该配置时也包含了自动注入上述 processor 的功能</span><br><span class="line"></span><br><span class="line">## @Required 注解</span><br><span class="line">&amp;emsp;&amp;emsp;应用于 **set** 方法, 表明该属性必须必须在 XML 中配置`&lt;property name=&quot; &quot;, value/ref=&quot;&quot;&gt;`, 否则容器就会抛出一个 `BeanInitialiaationException` 异常</span><br></pre></td></tr></table></figure>
@Required
public void setXXX(Type xxx){
}
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## @Autowired 注解</span><br><span class="line">&amp;emsp;&amp;emsp;可以对属性, 方法及构造函数进行标注, 完成自动装配的动作  </span><br><span class="line">&amp;emsp;&amp;emsp;首先 byType, 如果找到多个, 则 byName  可以使用 @Qualifier(&quot;name&quot;) 指定</span><br><span class="line">&amp;emsp;&amp;emsp;如果查询的结果为空, 则会抛出异常, 可用 @Autowired(required=false) 解决</span><br><span class="line"></span><br><span class="line">## 基于 java 的配置  </span><br><span class="line">&amp;emsp;&amp;emsp; @Configuration 和 @Bean 注解  </span><br><span class="line">### @Configuration 注解    </span><br><span class="line">&amp;emsp;&amp;emsp;表示这个类可以使用 Spring IoC 容器作为 Bean 定义的来源  </span><br><span class="line">### @Bean 注解  </span><br><span class="line">&amp;emsp;&amp;emsp;返回一个对象, 被注册成上下文 Bean.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
@Configuration
public class HelloWorldConfig {
   @Bean
   public HelloWorld helloWorld(){
      return new HelloWorld();
   }
}
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">等同于  </span><br></pre></td></tr></table></figure>
<beans>
   <bean id="helloWorld" class="com.tutorialspoint.HelloWorld">
</bean></beans>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## @Import 注解  </span><br><span class="line">&amp;emsp;&amp;emsp;允许从另一个配置类中加载 @Bean 定义  </span><br></pre></td></tr></table></figure>
@Configuration
@Import(ConfigA.class)
public class ConfigB {
   @Bean
   public B a() {
      return new A();
   }
}
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&amp;emsp;&amp;emsp;实例化上下文时, 只需要提供 ConfigB 类  </span><br></pre></td></tr></table></figure>
public static void main(String[] args) {
   ApplicationContext ctx =
   new AnnotationConfigApplicationContext(ConfigB.class);
   // now both beans A and B will be available...
   A a = ctx.getBean(A.class);
   B b = ctx.getBean(B.class);
}
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## 声明周期回调  </span><br><span class="line">`@Bean(initMethod = &quot;&quot;, destroyMethod = &quot;&quot;)`  </span><br><span class="line">## 指定 Bean 的范围   </span><br><span class="line">&amp;emsp;&amp;emsp;默认范围是单实例, 用 @Scope 注解方法修改</span><br></pre></td></tr></table></figure>
@Scope("prototype")
   public Foo foo() {
      return new Foo();
   }
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## 事件处理</span><br><span class="line">&amp;emsp;&amp;emsp;当处理 bean 时, ApplicationContext 发布某些事件.  </span><br><span class="line">&amp;emsp;&amp;emsp;通过 AppliccationEvent 类和 ApplicationListener 接口处理事件  </span><br><span class="line"></span><br><span class="line">序号|Spring 内置事件|描述</span><br><span class="line">:-:|:-:|:-</span><br><span class="line">1|ContextRefreshedEvent| ApplicationContext 被初始化或刷新时发布</span><br><span class="line">2|ContextStartedEvent|当使用 ConfigurableApplicationContext 接口中的 start() 方法启动 ApplicationContext 时发布.可以调查数据库, 或者在接受到这个事件后重启任何停止的应用程序.</span><br><span class="line">3|ContextStoppedEvent|使用 ConfigurableApplicationContext 接口中的 stop() 方法停止 ApplicationContext 时发布(~~生命周期??~~)</span><br><span class="line">4|ContextClosedEvent| 使用~接口的 close() 关闭 ApplicationContext 时发布. 此时该上下文到达生命周期末端, 不能被刷新或者重启</span><br><span class="line">5|RequestHandledEvent| web-specific 事件, 告诉所有 bean HTTP 请求已经被处理  </span><br><span class="line"></span><br><span class="line">**Spring 事件处理是单线程的,所以如果一个事件被发布，直至并且除非所有的接收者得到的该消息，该进程被阻塞并且流程将不会继续.**</span><br><span class="line"></span><br><span class="line">### 监听上下文事件  </span><br><span class="line">&amp;emsp;&amp;emsp;需实现 ApplicationListener 接口  </span><br><span class="line">&amp;emsp;&amp;emsp;[自定义事件](https://www.w3cschool.cn/wkspring/7jho1ict.html)</span><br><span class="line"></span><br><span class="line"># Spring 框架的 AOP  </span><br><span class="line">AOP,Aspect Oriented Programming 面向切面编程.  </span><br><span class="line">在运行时, 动态地将代码切入到指定类的指定方法, 指定位置上的变成思想就是面向切面的编程  </span><br><span class="line">切入到指定类指定方法的代码片段称为切面，而切入到哪些类、哪些方法则叫切入点。  </span><br><span class="line">Spring AOP 模块提供拦截器来拦截一个应用程序，例如，当执行一个方法时，你可以在方法执行之前或之后添加额外的功能。  </span><br><span class="line"></span><br><span class="line">[** AOP 术语**](https://www.cnblogs.com/yangyquin/p/5462488.html)  </span><br><span class="line">1. **切面(Aspect)**&lt;br&gt; 一个关注点的模块化, 这个关注点可能会横切多个对象.</span><br><span class="line">2. **连接点(Joinpoint)**&lt;br&gt; 程序能够应用通知/增强 (Advice) 的一个时机, 例如方法被调用时,异常被抛出时等等</span><br><span class="line">3. **通知(Advice)**&lt;br&gt; 在切面的某个特定个的连接点上执行的动作.  </span><br><span class="line">4. **切入点(Pointcut)**&lt;br&gt; 匹配连接点的断言. 通知和一个切入点表达式关联, 并在满足这个切入点的连接点上运行</span><br><span class="line">5. **引入(Introduction)**&lt;br&gt; 用来给一个类型声明额外的方法或属性.  </span><br><span class="line">6. **目标对象(Target Object)**&lt;br&gt; 被切面所通知的对象.</span><br><span class="line">7. **AOP 代理(AOP Proxy)** &lt;br&gt; AOP 框架创建的对象, 用来实现切面契约( 例如通知方法执行等等 )</span><br><span class="line">8. **织入(Weaving)**&lt;br&gt;把切面连接到其他的应用程序类型或者对象上, 并创建一个被通知的对象.  </span><br><span class="line"></span><br><span class="line">**通知类型**  </span><br><span class="line">+ 前置通知 **Before advice**  : 在某连接点之前执行的通知. 不能阻止连接点之前的执行流程(除非抛出一个异常).</span><br><span class="line">+ 后置通知 **After returning advice**: 在某个连接点正常完成后执行的通知.</span><br><span class="line">+ 异常通知 **After throwing advice** : 在方法抛出异常退出时执行的通知.</span><br><span class="line">+ 最终通知 **After (finally) advice**: 当某个连接点退出时执行的通知 (不论时正常返回还是异常退出)</span><br><span class="line">+ 环绕通知 **Around Advice**: 环绕通知可以在方法调用前后完成自定义的行为, 也会 选择是否继续执行连接点或者直接返回它自己的返回值或抛出异常来结束执行  </span><br><span class="line"></span><br><span class="line">## Spring AOP 的功能和目标  </span><br><span class="line">**使用纯 Java 实现 不需专门的编译过程, 不需控制类装载器层次 **  </span><br><span class="line">**仅支持使用方法调用作为连接点** 如果需要把成员变量的访问和更新也作为通知的连接点, 可以使用其他语言, 如 AspectJ**</span><br><span class="line"></span><br><span class="line">## Spring 提供的四种实现 AOP 的方式  </span><br><span class="line"></span><br><span class="line">1. 经典的基于代理的 AOP</span><br><span class="line">2. @AspectJ 注解驱动的切面</span><br><span class="line">3. 纯 [POJO](https://www.cnblogs.com/chengzixin/p/6698435.html) 切面</span><br><span class="line">4. 注入式 AspectJ 切面  </span><br><span class="line"></span><br><span class="line">## 基于代理的 AOP  </span><br><span class="line">1. 创建通知: 实现接口</span><br><span class="line">  + Before(前)  org.apringframework.aop.MethodBeforeAdvice</span><br><span class="line">  + After-returning(返回后) org.springframework.aop.AfterReturningAdvice</span><br><span class="line">  + After-throwing(抛出后) org.springframework.aop.ThrowsAdvice</span><br><span class="line">  + Arround(周围) org.aopaliance.intercept.MethodInterceptor</span><br><span class="line">2. 定义切入点和通知者: 在 Spring 配置文件中配置这些信息  </span><br><span class="line">3. 使用 ProxyFactoryBean 来生成代理  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">**举个栗子:**  </span><br><span class="line">**AOPBeanConfig.xml**</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemalocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

<pre><code>&lt;bean id=&quot;sleepHelper&quot; class=&quot;AOP.SleepHelper&quot;/&gt;
&lt;bean id=&quot;human&quot; class=&quot;AOP.Human&quot;/&gt;
&lt;!--使用 org.springframework.aop.support.JdkRegexpMethodPointcut 来定义正则表达式切入点--&gt;
&lt;bean id=&quot;sleepHelperPointcut&quot; class=&quot;org.springframework.aop.support.JdkRegexpMethodPointcut&quot;&gt;
    &lt;!--pattern 指定了正则表达式, 匹配所有 sleep 方法--&gt;
    &lt;property name=&quot;pattern&quot; value=&quot;.*sleep&quot;/&gt;

&lt;/bean&gt;
&lt;!--将切入点和通知结合起来--&gt;
&lt;bean id=&quot;sleepHelperAdvisor&quot; class=&quot;org.springframework.aop.support.DefaultPointcutAdvisor&quot;&gt;
    &lt;property name=&quot;advice&quot; ref=&quot;sleepHelper&quot;/&gt;
    &lt;property name=&quot;pointcut&quot; ref=&quot;sleepHelperPointcut&quot;/&gt;
&lt;/bean&gt;

&lt;bean id=&quot;humanProxy&quot; class=&quot;org.springframework.aop.framework.ProxyFactoryBean&quot;&gt;
    &lt;property name=&quot;target&quot; ref=&quot;human&quot;/&gt;
    &lt;property name=&quot;interceptorNames&quot; value=&quot;sleepHelperAdvisor&quot;/&gt;
    &lt;property name=&quot;proxyInterfaces&quot; value=&quot;AOP.Sleepable&quot;/&gt;
&lt;/bean&gt;
</code></pre>
</beans>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line">package AOP;</span><br><span class="line"></span><br><span class="line">public class Human implements Sleepable &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void sleep() &#123;</span><br><span class="line">        System.out.println(&quot;睡觉!睡觉!睡觉!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package AOP;</span><br><span class="line"></span><br><span class="line">public interface Sleepable &#123;</span><br><span class="line">    void sleep();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package AOP;</span><br><span class="line">/*</span><br><span class="line">* 定义 AOP 中的通知类</span><br><span class="line">* */</span><br><span class="line"></span><br><span class="line">import org.springframework.aop.AfterReturningAdvice;</span><br><span class="line">import org.springframework.aop.MethodBeforeAdvice;</span><br><span class="line"></span><br><span class="line">import java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line">public class SleepHelper implements MethodBeforeAdvice, AfterReturningAdvice &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void afterReturning(Object returnValue, Method method, Object[] args, Object target) throws Throwable &#123;</span><br><span class="line">        System.out.println(&quot;起床之前穿衣服&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void before(Method method, Object[] args, Object target) throws Throwable &#123;</span><br><span class="line">        System.out.println(&quot;睡觉之前脱衣服&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">```  </span><br><span class="line">**运行结果**</span><br></pre></td></tr></table></figure>
睡觉之前脱衣服
睡觉!睡觉!睡觉!
起床之穿衣服
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 自动代理  </span><br><span class="line">&amp;emsp;&amp;emsp;让切点和通知进行自动匹配  </span><br><span class="line">**配置文件**:</span><br></pre></td></tr></table></figure>
<bean id="sleepHelper" class="test.spring.aop.bean.SleepHelper">
  </bean>
  <bean id="sleepAdvisor" class="org.springframework.aop.support.RegexpMethodPointcutAdvisor">
    <property name="advice" ref="sleepHelper">
    <property name="pattern" value=".*sleep">
  </property></property></bean>
  <bean id="human" class="test.spring.aop.bean.Human">
  </bean>
  <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator">
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line">public class Test &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        ApplicationContext appCtx = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);</span><br><span class="line">        Sleepable sleeper = (Sleepable)appCtx.getBean(&quot;human&quot;);</span><br><span class="line">        sleeper.sleep();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">```  </span><br><span class="line">&amp;emsp;&amp;emsp;声明 *org.springframework.aop.framework.autoproxy.DefaultPointcutAdvisor* 就能为方法匹配的 bean 自动创建代理.  </span><br><span class="line"></span><br><span class="line">## 使用 AspectJ 提供的注解</span><br></pre></td></tr></table></figure>
package AOP;
/*
* 定义 AOP 中的通知类
* @Aspect的注解来标识切面
* @Pointcut指定切点
* @Before 和 @AfterReturning 指定了运行时的通知 (在注解中传入切点的名称)
* */

<p>import org.aspectj.lang.annotation.AfterReturning;<br>import org.aspectj.lang.annotation.Aspect;<br>import org.aspectj.lang.annotation.Before;<br>import org.aspectj.lang.annotation.Pointcut;<br>@Aspect<br>public class SleepHelper {</p>
<pre><code>public SleepHelper()&#123;

&#125;

@Pointcut(&quot;execution(* *.sleep())&quot;)
public void sleeppoint()&#123;&#125;

@Before(&quot;sleeppoint()&quot;)
public void beforeSleep()&#123;
    System.out.println(&quot;睡觉前要脱衣服!&quot;);
&#125;

@AfterReturning(&quot;sleeppoint()&quot;)
public void afterSleep()&#123;
    System.out.println(&quot;睡醒了要穿衣服！&quot;);
&#125;
</code></pre>
<p>}</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">然后我们在Spring配置文件上下点功夫,首先是增加AOP的XML命名空间和声明相关schema</span><br></pre></td></tr></table></figure>
<p>命名空间:<br>xmlns:aop=”<a href="http://www.springframework.org/schema/aop&quot;">http://www.springframework.org/schema/aop&quot;</a><br>schema声明:<br><a href="http://www.springframework.org/schema/aop">http://www.springframework.org/schema/aop</a><br><a href="http://www.springframework.org/schema/aop/spring-aop-2.0.xsd">http://www.springframework.org/schema/aop/spring-aop-2.0.xsd</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">然后加上这个标签:  </span><br><span class="line">`&lt;aop:aspectj-autoproxy/&gt;` 有了这个Spring就能够自动扫描被@Aspect标注的切面了</span><br><span class="line"></span><br><span class="line">## 使用Spring来定义纯粹的POJO切面</span><br><span class="line">前面我们用到了&lt;aop:aspectj-autoproxy/&gt;标签,Spring在aop的命名空间里面还提供了其他的配置元素:  </span><br><span class="line">`&lt;aop:advisor&gt; `定义一个AOP通知者  </span><br><span class="line">`&lt;aop:after&gt; `后通知  </span><br><span class="line">`&lt;aop:after-returning&gt;` 返回后通知   </span><br><span class="line">`&lt;aop:after-throwing&gt;` 抛出后通知  </span><br><span class="line">`&lt;aop:around&gt;` 周围通知  </span><br><span class="line">`&lt;aop:aspect&gt;` 定义一个切面  </span><br><span class="line">`&lt;aop:before&gt;` 前通知   </span><br><span class="line">`&lt;aop:config&gt;`  顶级配置元素，类似于&lt;beans&gt;这种东西  </span><br><span class="line">`&lt;aop:pointcut&gt;` 定义一个切点  </span><br><span class="line"></span><br><span class="line">我们用AOP标签来实现睡觉这个过程:</span><br><span class="line">代码不变，只是修改配置文件,加入AOP配置即可:</span><br></pre></td></tr></table></figure>
<p><a href="aop:config">aop:config</a><br>    &lt;aop:aspect ref=”sleepHelper”&gt;<br>    &lt;aop:before method=”beforeSleep” pointcut=”execution(* *.sleep(..))”/&gt;<br>    &lt;aop:after method=”afterSleep” pointcut=”execution(* *.sleep(..))”/&gt;<br>    <br></p>
<pre><code>
</code></pre>
</bean></bean></center>]]></content>
      <categories>
        <category>notes</category>
      </categories>
  </entry>
  <entry>
    <title>JavaWeb</title>
    <url>/notes/java_web.html</url>
    <content><![CDATA[<p>HTML(<em>HyperText Markup Language</em>)<br><a href="http://www.runoob.com/servlet/servlet-client-request.html">http://www.runoob.com/servlet/servlet-client-request.html</a><br>URL(<em>Uniform Resource Locator</em>) 代表资源的地址信息 &lt;协议&gt;//&lt;主机&gt;:&lt;端口&gt;/&lt;路径&gt;<br>URN(<em>Uniform Resource Name</em>) 代表某个资源独一无二的名称<br>URI(<em>Uniform Resource Identifier</em>) 用于标识某一互联网资源名称的字符串<br>HTTP(<em>HyperText Transfer Protocol</em>)</p>
<ol>
<li>支持客户/服务器模式</li>
<li>灵活</li>
<li>无连接</li>
<li>无状态 协议对事物处理无记忆能力  </li>
</ol>
<p>***{</p>
<p>}</p>
<h1 id="大写加粗的没保存的N多行猴年马月可能会补的笔记"><a href="#大写加粗的没保存的N多行猴年马月可能会补的笔记" class="headerlink" title="大写加粗的没保存的N多行猴年马月可能会补的笔记"></a>大写加粗的没保存的N多行猴年马月可能会补的笔记</h1><p>.<br>.<br>.<br>.<br>.  </p>
<hr>
<h5 id="application-java内置对象"><a href="#application-java内置对象" class="headerlink" title="application(java内置对象)"></a>application(java内置对象)</h5><p>代表当前程序,存在于服务器的内存空间中,应用一旦启动,就会自动生成一个application对象,直到应用关<br>闭才会被销毁,可以给多个用户共享一些全局信息,比如当前在线人数等等.</p>
<h5 id="config"><a href="#config" class="headerlink" title="config"></a>config</h5><p>在实际的项目中JSP一般用于模板技术,即位于表示层 很少使用config对象配置JSP 在servelet较常用<br>配置信息来自web应用程序的部署描述符(web.xml文件)  </p>
<h5 id="page"><a href="#page" class="headerlink" title="page"></a>page</h5><p>类似与java编程中的this指针,指向JSP页面本身.  </p>
<h2 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h2><h3 id="JDBC概述"><a href="#JDBC概述" class="headerlink" title="JDBC概述"></a>JDBC概述</h3><h4 id="ODBC-Open-Database-Connectivity"><a href="#ODBC-Open-Database-Connectivity" class="headerlink" title="ODBC(Open Database Connectivity)"></a>ODBC(Open Database Connectivity)</h4><p>可以通过同一接口访问不同数据库服务　　</p>
<h4 id="JDBC-Java-Database-Connectivity"><a href="#JDBC-Java-Database-Connectivity" class="headerlink" title="JDBC(Java Database Connectivity)"></a>JDBC(Java Database Connectivity)</h4><p>用JAVA实现ODBC  </p>
<h5 id="JDBC组成"><a href="#JDBC组成" class="headerlink" title="JDBC组成"></a>JDBC组成</h5><ol>
<li>JDBC API 面向开发人员</li>
<li>JDBC Driver API 面向底层应用程序开发商  </li>
</ol>
<h5 id="JDBC编程流程"><a href="#JDBC编程流程" class="headerlink" title="JDBC编程流程"></a>JDBC编程流程</h5><ol>
<li>加载驱动</li>
<li>打开连接</li>
<li>执行查询</li>
<li>处理结果</li>
<li>清理环境  </li>
</ol>
<h5 id="JDBC事务处理"><a href="#JDBC事务处理" class="headerlink" title="JDBC事务处理"></a>JDBC事务处理</h5><p>事务:不可分割的工作单位,一组sql语句<br>事务的四个基本特征:  </p>
<ol>
<li>原子性</li>
<li>一致性 事务执行前后数据库都处于一致性状态,数据库的完整性约束没有被破坏  </li>
<li>隔离性 事务之间相互独立  </li>
<li>永久性<br>java 静态代码块 static{} 可以为类中变量初始化 当jvm加载到该类的时候会执行类中的静态代码块</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Connection con = //获取连接</span><br><span class="line">DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/xx&quot;,&quot;user&quot;,&quot;password&quot;);</span><br><span class="line">Statement st = con.createStatement(); //创建语句</span><br><span class="line">st.executeUpdate(&quot;sql语句&quot;); //增删改操作</span><br><span class="line">st.executeQuery(&quot;sql语句&quot;); //查操作返回类型为ResultSet</span><br><span class="line">ResultSet rs = st.executeQuery(&quot;sql语句&quot;);</span><br><span class="line">while(rs.next())&#123;</span><br><span class="line">  rs.getXXX(columnLabel:&quot;&quot;)</span><br><span class="line">&#125;</span><br><span class="line">rs.close();st.close();con.close();</span><br></pre></td></tr></table></figure>
<h6 id="PreparedStatement"><a href="#PreparedStatement" class="headerlink" title="PreparedStatement"></a>PreparedStatement</h6><p>　　PreparedStatement 实例包含已编译的 SQL 语句。这就是使语句“准备好”。包含于 Prepared-<br>Statement 对象中的 SQL 语句可具有一个或多个 IN 参数。IN参数的值在 SQL 语句创建时未被指定。<br>相反的，该语句为每个 IN 参数保留一个问号（“？”）作为占位符。每个问号的值必须在该语句执行之前，<br>通过适当的setXXX 方法来提供。<br>　　由于 PreparedStatement 对象已预编译过，所以其执行速度要快于 Statement 对象。因此，<br>多次执行的 SQL 语句经常创建为 PreparedStatement 对象，以提高效率。  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  Stringsql = &quot;select * from people where id = ? and name = ?&quot;;</span><br><span class="line">  Preparedstatement ps = connection.preparestatement(sql);</span><br><span class="line">  ps.setint(1,id);</span><br><span class="line">  ps.setstring(2,name);</span><br><span class="line">  Resultset rs = ps.executequery();</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">### Servlet</span><br><span class="line">#### 简介  </span><br><span class="line">Servlet---servlet+applet 运行在服务器端的小程序  </span><br><span class="line">Servlet 是一种特殊的 Java 类 遵循 Java 语法 同时要遵循 Servlet 标准  </span><br><span class="line">Servlet 与 HTTP 联系紧密, 使用 Servlet 几乎可以处理所有 HTTP 协议内容</span><br><span class="line">##### Servlet功能  </span><br><span class="line">1. 读取客户端 (浏览器) 发送的数据. 包括网页上的 HTML 表单, cookies, 媒体类型和浏览器能理解的压缩格式等.  </span><br><span class="line">2. 发送数据到客户端 (主要是浏览器). 包括文本文件, 二进制文件, Excel. 告诉客户端被返回的文档类型 (如 HTML), 设置 cookies 和缓存参数, 以及其他类似的任务等.  </span><br><span class="line">#### Servlet 生命周期  </span><br><span class="line">init() --&gt; service() --&gt; destroy()  </span><br><span class="line">##### init()  </span><br><span class="line">&amp;emsp;&amp;emsp;只在第一次创建 Servlet 时调用, 简单地创建或加载一些数据, 这些数据将被用于 Servlet 的整个生命周期.</span><br><span class="line">##### service()   </span><br><span class="line">&amp;emsp;&amp;emsp;servlet 执行实际任务的主要方法, Servlet 容器 (即 Web 服务器) 调用 service() 方法来处理来自客户端的请求, 并返回格式化的数据. 每次服务器接收到一个 Servlet 请求时, 服务器会产生一个新的线程并调用 service() 方法.  </span><br><span class="line">##### doGet()  </span><br><span class="line">&amp;emsp;&amp;emsp;GET 请求来自于一个 URL 的正常请求, 或者一个未指定 METHOD 的　HTML 表单,用于向服务器请求数据, 由 Servlet 的 doGet() 方法处理.  </span><br><span class="line">##### doPost()  </span><br><span class="line">&amp;emsp;&amp;emsp;POST 请求来自于一个指定了 METHOD 为 POST 的 HTML 表单, 用于向服务器发送数据, 由 Servlet的 doPost() 方法处理  </span><br><span class="line">##### destroy()</span><br><span class="line">&amp;emsp;&amp;emsp;该方法只会在 Servlet 生命周期结束时被调用一次, 执行一些清理活动, 如关闭数据连接, 停止后台线程, 把 Cookie 列表或点击计数器写入到磁盘等. 在调用该方</span><br><span class="line">法后, servlet 对象被标记为垃圾回收. 但是并不会被立即回收, 再回收之前访问不会再重新初始化.  </span><br><span class="line">##### 流程图</span><br><span class="line">1. 第一个到达服务器的 HTTP 请求被委派到 Servlet 容器;  </span><br><span class="line">2. Servlet 容器在调用 service 容器之前加载 Servlet;  </span><br><span class="line">3. Servlet 容器处理由多个线程产生的多个请求, 每个线程执行一个单一的 Servlet 实例的 service() 方法.  </span><br><span class="line"></span><br><span class="line">![Servlet 生命周期](http://www.runoob.com/wp-content/uploads/2014/07/Servlet-LifeCycle.jpg)</span><br><span class="line">##### Servlet 配置  </span><br><span class="line">1. 在 web.xml 里 配置文件</span><br><span class="line">2. 使用 Annotation(标识)  </span><br><span class="line"></span><br><span class="line">###### Servlet 在 web.xml 里的配置信息  </span><br></pre></td></tr></table></figure>
<servlet>
      <servlet-name>HelloServlet</servlet-name>myServlet.HelloServlet // 指明对应 Class 文件
</servlet>
<servlet-mapping>
      <servlet-name>HelloServlet</servlet-name>
      <url-pattern>/Hello</url-pattern> // 指明外部链接的访问标识符
</servlet-mapping>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">`&lt;servlet&gt;` 和 `&lt;servlet-mapping&gt;` 成对出现 通过 `&lt;servlet-name&gt;` 标签联系在一起  </span><br><span class="line">###### Annotation  </span><br><span class="line">&amp;emsp;&amp;emsp;在类前</span><br></pre></td></tr></table></figure>
@WebServlet(
    name="Hello",
    urlPatterns={"/hello.view"},
    loadOnStartup=1
)
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#### Servlet 表单数据</span><br><span class="line">##### get 方法  </span><br><span class="line">&amp;emsp;&amp;emsp;用于向页面请求发送已编码的用户信息.页面和已编码的信息中间用 ? 字符分割. 如:</span><br><span class="line">`http://www.test.com/hello?key1=value&amp;key2=value`  </span><br><span class="line">&amp;emsp;&amp;emsp;请求的信息暴露在 url 中, 且最多只能有 1024 个字符.  </span><br><span class="line">&amp;emsp;&amp;emsp;使用 QUERY_STRING 头传递, Servlet 使用 doGet() 方法处理该请求  </span><br><span class="line">##### post 方法</span><br><span class="line">&amp;emsp;&amp;emsp;信息不会出现在 url 中, 而是把这些信息作为一个单独的信息, 以标准输出的格式传送到后台程序. Servlet 使用 doPost() 方法处理该请求  </span><br><span class="line">##### 使用 Servlet 读取表单数据</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">* getParameter()   调用req.getParameter(String name) 方法来获取表单的值  </span><br><span class="line">* getParameters() 如果参数出现一次以上, 则调用该方法, 并返回多个值, 例如复选框  </span><br><span class="line">* getParameterNames() 获取当前请求中所有参数的完整列表  </span><br><span class="line"></span><br><span class="line">**如果表单中含有中文数据则需要进行转码**  </span><br></pre></td></tr></table></figure>
String name = new String(
  request.getParameter("name").getBytes("ISO8859-1"),
  "UTF-8"
  )
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[练习代码](https://github.com/a627265026/Tim/blob/master/ServletForForm)</span><br><span class="line"></span><br><span class="line">#### HTTP 响应/请求  </span><br><span class="line"></span><br><span class="line">浏览器中重要的请求头信息  </span><br><span class="line"></span><br><span class="line"> 头信息 | 描述</span><br><span class="line"> :- | :-</span><br><span class="line"> Accept|指定浏览器或其他客户端可以处理的 MIME 类型, Image/png 或 Image/jpeg是最常见的两种可能值</span><br><span class="line"> Accept-Charset|指定浏览器可以用来显示信息的字符集. 如 ISO-859-1</span><br><span class="line"> Accept-Encoding|编码类型. 值 gzip 或 compress 是最常见的两种类型</span><br><span class="line"> Accept-Language|指定客户端的首选语言, 在这种情况下, Servlet 会产和那个多种语言的结果</span><br><span class="line"> Authorization|用于客户端在访问受密码保护的网页时识别自己的身份</span><br><span class="line"> Connection|指示客户端是否可以处理持久 HTTP 连接, Keep-Alive 意味着使用了持久连接</span><br><span class="line"> Content-Length|只适用于 POST 请求, 以字节为单位给出 POST 数据的大小</span><br><span class="line"> Cookie|把之前发送到浏览器的 cookies 返回到服务器</span><br><span class="line"> Host|指定原始的 URL 中的主机和端口</span><br><span class="line"> If-Modified-Since|条件Get, 表示只有当页面在指定的日期后已更改时才会返回新的界面, 否则返回一个 304 代码. 表示 Not Modified</span><br><span class="line"> If-Unmodified-Since|与If-Modified-Since 相反, 只有当资源早于指定日期时才会获取  </span><br><span class="line"> Referer|指示所指向的 Web 页的 URL. 例如, 如果在网页1, 点击一个链接到网页二, 当浏览器请求网页2时, 网页1的 URL 就会包含在 Referer 头信息中</span><br><span class="line"> User-Agent|识别发出请求的浏览器或其他客户端, 使服务器根据客户端的不同返回不同的内容  </span><br><span class="line"></span><br><span class="line">读取 HTTP 头的方法</span><br><span class="line">1.	Cookie[] getCookies()</span><br><span class="line">返回客户端发送该请求的所有的 Cookie 对象。</span><br><span class="line">2.	Enumeration getAttributeNames()</span><br><span class="line">返回包含提供给该请求可用的属性名称。</span><br><span class="line">3.	Enumeration getHeaderNames()</span><br><span class="line">返回在该请求中包含的所有的头名。</span><br><span class="line">4.	Enumeration getParameterNames()</span><br><span class="line">返回在该请求中包含的参数的名称。</span><br><span class="line">5.	HttpSession getSession()</span><br><span class="line">返回与该请求关联的当前 session 会话，或者如果请求没有 session 会话，则创建一个。</span><br><span class="line">6.	HttpSession getSession(boolean create)</span><br><span class="line">返回与该请求关联的当前 HttpSession，或者如果没有当前会话，且 create 为 真，则返回一个新的 session 会话。</span><br><span class="line">7.	Locale getLocale()</span><br><span class="line">基于 Accept-Language 头，返回客户端接受内容的首选的区域设置。</span><br><span class="line">8.	Object getAttribute(String name)</span><br><span class="line">以对象形式返回已命名属性的值，如果没有给定名称的属性存在，则返回 null。</span><br><span class="line">9.	ServletInputStream getInputStream()</span><br><span class="line">使用 ServletInputStream，以二进制数据形式检索请求的主体。</span><br><span class="line">10.	String getAuthType()</span><br><span class="line">返回用于保护 Servlet 的身份验证方案的名称，例如，&quot;BASIC&quot; 或 &quot;SSL&quot;，如果JSP没有受到保护则返回 null。</span><br><span class="line">11.	String getCharacterEncoding()</span><br><span class="line">返回请求主体中使用的字符编码的名称。</span><br><span class="line">12.	String getContentType()</span><br><span class="line">返回请求主体的 MIME 类型，如果不知道类型则返回 null。</span><br><span class="line">13.	String getContextPath()</span><br><span class="line">返回指示请求上下文的请求 URI 部分。</span><br><span class="line">14.	String getHeader(String name)</span><br><span class="line">以字符串形式返回指定的请求头的值。</span><br><span class="line">15.	String getMethod()</span><br><span class="line">返回请求的 HTTP 方法的名称，例如，GET、POST 或 PUT。</span><br><span class="line">16.	String getParameter(String name)</span><br><span class="line">以字符串形式返回请求参数的值，或者如果参数不存在则返回 null。</span><br><span class="line">17.	String getPathInfo()</span><br><span class="line">当请求发出时，返回与客户端发送的 URL 相关的任何额外的路径信息。</span><br><span class="line">18.	String getProtocol()</span><br><span class="line">返回请求协议的名称和版本。</span><br><span class="line">19.	String getQueryString()</span><br><span class="line">返回包含在路径后的请求 URL 中的查询字符串。</span><br><span class="line">20.	String getRemoteAddr()</span><br><span class="line">返回发送请求的客户端的互联网协议（IP）地址。</span><br><span class="line">21.	String getRemoteHost()</span><br><span class="line">返回发送请求的客户端的完全限定名称。</span><br><span class="line">22.	String getRemoteUser()</span><br><span class="line">如果用户已通过身份验证，则返回发出请求的登录用户，或者如果用户未通过身份验证，则返回 null。</span><br><span class="line">23.	String getRequestURI()</span><br><span class="line">从协议名称直到 HTTP 请求的第一行的查询字符串中，返回该请求的 URL 的一部分。</span><br><span class="line">24.	String getRequestedSessionId()</span><br><span class="line">返回由客户端指定的 session 会话 ID。</span><br><span class="line">25.	String getServletPath()</span><br><span class="line">返回调用 JSP 的请求的 URL 的一部分。</span><br><span class="line">26.	String[] getParameterValues(String name)</span><br><span class="line">返回一个字符串对象的数组，包含所有给定的请求参数的值，如果参数不存在则返回 null。</span><br><span class="line">27.	boolean isSecure()</span><br><span class="line">返.回一个布尔值，指示请求是否使用安全通道，如 HTTPS。</span><br><span class="line">28.	int getContentLength()</span><br><span class="line">以字节为单位返回请求主体的长度，并提供输入流，或者如果长度未知则返回 -1。</span><br><span class="line">29.	int getIntHeader(String name)</span><br><span class="line">返回指定的请求头的值为一个 int 值。</span><br><span class="line">30.	int getServerPort()</span><br><span class="line">返回接收到这个请求的端口号。</span><br><span class="line">31.	Map&lt;String, String[]&gt; getParameterMap() 将参数封装成 Map 类型。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[练习代码-----从 request 请求中获取 header](https://github.com/a627265026/Tim/blob/master/ServletForForm)</span><br><span class="line"></span><br><span class="line">#### Servlet 过滤器  </span><br><span class="line">&amp;emsp;&amp;emsp;作用: 动态拦截请求和响应, 以变换或使用包含在请求或相应中的信息.    </span><br><span class="line">&amp;emsp;&amp;emsp;可以将一个或多个 Servlet 过滤链 附加到一个或一组 Servlet.  </span><br><span class="line">&amp;emsp;&amp;emsp;通过 web.xml 中的 xml 标签来声明.  其执行顺序和 web.xml 中的配置顺序相同, 一般把 Filter 配置在所有的 Servlet 之前.  </span><br><span class="line">##### Filter 方法               </span><br><span class="line">序号|方法&amp;描述  </span><br><span class="line">:-:|:  </span><br><span class="line">1| public void doFilter(ServletRequest, ServletResponse, FilterChain) &lt;br&gt; 该方法完成实际的过滤操作, 当客户端请求方法与过滤器设置匹配的 URL 时, Servlet 容器将先调用过滤器的 doFilter 方法.</span><br><span class="line">2|public void init(FilterConfig filterConfig) &lt;br&gt;web 应用程序启动时, web 服务器将创建 Filter 的实例对象, 并调用其 init 方法, 可以通过 init 方法的参数, 可获得代表当前 filter 配置信息的 FilterConfig 对象  </span><br><span class="line">3| public void destroy() &lt;br&gt;释放 filter 对象占用的资源    </span><br><span class="line"></span><br><span class="line">##### FilterConfig 的使用  </span><br></pre></td></tr></table></figure>
  <filter>
      <filter-name> LogFilter </filter-name>
      <filter-class> com.runoob.test.LogFilter </filter-class>
      <init-param>
        <param-name>Site</param-name>
        <param-value>菜鸟教程</param-value>
      </init-param>
  </filter>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">###### web.xml 配置各节点应用说明  </span><br><span class="line">+ &amp;lt;filter&amp;gt; 指定一个过滤器</span><br><span class="line">  + &amp;lt;filter-name&amp;gt; 为过滤器提供一个名字</span><br><span class="line">  + &amp;lt;filter-class&amp;gt;</span><br><span class="line">  + &amp;lt;init-param&amp;gt; 为过滤器提供初始化参数, 可以用 filterConfig 对象访问</span><br><span class="line">+ &amp;lt;filter-mapping&amp;gt; 设置一个 Filter 所负责拦截的资源.可以指定 servlet 名称或资源路径</span><br><span class="line">  + &amp;lt;url-pattern&amp;gt; 设置拦截路径</span><br><span class="line">  + &amp;lt;servlet-name&amp;gt; 指定拦截的 servlet 名称</span><br><span class="line">  + &amp;lt;dispatcher&amp;gt; 指定拦截动作 REQUEST, INCLUDE, FORWARD 和 ERROR, 默认为 REQUEST　　</span><br><span class="line"></span><br><span class="line">#### 异常处理  </span><br><span class="line">&amp;emsp;&amp;emsp; 假设有一个　*ErrorHandler* 的 *Servlet* 在任何已定义的异常或错误出现时被调用, 以下将是在 web.xml 中创建的项.  </span><br></pre></td></tr></table></figure>
<!-- servlet 定义 --!>
<servlet>
  <servlet-name>ErrorHandler</servlet-name>
  <servlet-class>ErrorHandler</servlet-class>
</servlet>
<!-- servlet 映射 --!>
<servlet-mapping>
  <servlet-name>ErrorHandler</servlet-name>
  <url-pattern>/ErrorHandler</url-pattern>
</servlet-mapping>
<!-- error-code 相关的错误界面 -->
<error-page>
  <error-code>404</error-code>
  <location>/ErrorHandler</location>
</error-page>
<error-page>
  <exception-typejavax.servlet.ServletException< exception-type>
  <location>/ErrorHandler</location>
</exception-typejavax.servlet.ServletException<></error-page>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&amp;emsp;&amp;emsp;如果出现对应的错误代码或者抛出对应异常, 则会转向&lt;location&gt; 中的配置页面　　  </span><br><span class="line"></span><br><span class="line">##### 请求属性 - 错误/异常</span><br><span class="line">可以通过 requset.getAttribute() 方法获得  </span><br><span class="line"></span><br><span class="line">序号 | 属性 &amp; 描述</span><br><span class="line">:-: | :</span><br><span class="line">1|javax.servlet.error.status_code&amp;emsp;&amp;emsp;错误的状态码</span><br><span class="line">2|javax.servlet.error.exception_type&amp;emsp;&amp;emsp;exception 类型</span><br><span class="line">3|javax.servlet.error.message</span><br><span class="line">4|javax.servlet.error.request_rui&amp;emsp;&amp;emsp;给出有关 URL 调用 Servlet 的信息</span><br><span class="line">5|javax.servlet.error.exception</span><br><span class="line">6|javax.servlet.error.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### Cookie/Session 处理</span><br><span class="line">&gt; [理解 Cookie 和 Session](https://www.cnblogs.com/andy-zhou/p/5360107.html)  </span><br><span class="line"></span><br><span class="line">**Servlet Cookie 处理需要对中文进行编码与解码方法如下**</span><br></pre></td></tr></table></figure>
String str = java.net.URLEncoder.encode("中文", "UTF-8"); //编码
String str = java.net.URLDecoder.decode("编码后的字符串", "UTF-8"); //解码  
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">##### 设置 Cookie  </span><br><span class="line">+ 创建一个 Cookie 对象 : Cookie cookie = new Cookie(&quot;key&quot;, &quot;value&quot;)</span><br><span class="line">+ 设置最大生存周期: cookie.setMaxage(time in seconds)</span><br><span class="line">+ 发送 Cookie 到 HTTP 响应头　: response.addCookie(cookie)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##### 读取 Cookie  </span><br><span class="line">&amp;emsp;&amp;emsp;req.getCookies() 获取 Cookie 对象的数组,  getName() 和 getValue() 访问每个 Cookie 和关联的值</span><br><span class="line"></span><br><span class="line">##### 删除 Cookie</span><br><span class="line">+ 读取并找到该 cookie</span><br><span class="line">+ 设置该 cookie 的 maxAge 为零</span><br><span class="line">+ 添加回响应头</span><br><span class="line"></span><br><span class="line">##### HttpSession</span><br><span class="line">&amp;emsp;&amp;emsp;HttpSession 提供了一种跨多个页面请求或访问网站时识别用户以及存储有关用户信息的方式  </span><br><span class="line">`HttpSession session = request.getSession()`</span><br><span class="line"></span><br><span class="line">#### 一些应用</span><br><span class="line">[上传文件](file:///home/silence/文档/SomeDemo/ServletUploadFile.zip)  </span><br><span class="line">[发送邮件(java.sendMail.jar)](http://www.runoob.com/servlet/servlet-sending-email.html)</span><br><span class="line"># **jar 包不止导入到 Project 还要复制到 tomcat/lib 文件夹下 !!!!!!!!**</span><br><span class="line"></span><br><span class="line">##### 重定向  </span><br><span class="line">+ 调用 response.sendRedirect(String location) &lt;br&gt; 把响应连同状态码和新的网页位置发送给浏览器</span><br><span class="line">+ setStatus() + setHeader()</span><br></pre></td></tr></table></figure>
  String site = new String("http://www.runoob.com"); response.setStatus(response.SC_MOVED_TEMPORARILY);
  response.setHeader("Location", site);
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">##### 自动刷新</span><br><span class="line">&amp;emsp;&amp;emsp;在response 头中加上 &quot;Refresh&quot; : 5 `setIntHeader(&quot;Refresh&quot;, 5)`</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### Servlet 包</span><br><span class="line">&amp;emsp;&amp;emsp;Java web 应用标准目录结构</span><br></pre></td></tr></table></figure>
/myapp
  /images
  /WEB-INF
    /classes
    /lib
```
WEB-INF 子目录中包含应用程序的部署描述符, 名为 web.xml.  
所有的 HTML 文件都位于顶级目录 myapp 下.
WEB-INF 目录了包含了所有的 Servlet 类和其他类文件. 如一个完整合格的类名称 com.myorg.Myservlet 位于 /myapp/WEB-INF/classes/com/myorg/MyServlet.class

<h3 id="MVC-思想概述"><a href="#MVC-思想概述" class="headerlink" title="MVC 思想概述"></a>MVC 思想概述</h3><p>&emsp;&emsp;所有面向对象程序设计语言都应该遵守的规范.<br>&emsp;&emsp;将应用分成三个基本部分: Model(模型), View(视图), Controller(控制器) 三个部分之间以最少的耦合协同工作<br>&emsp;&emsp;一个模型对应多个视图</p>
]]></content>
      <categories>
        <category>notes</category>
      </categories>
  </entry>
  <entry>
    <title>Rxjava</title>
    <url>/notes/rxjava.html</url>
    <content><![CDATA[<h1 id="Rxjava-基础知识"><a href="#Rxjava-基础知识" class="headerlink" title="Rxjava 基础知识"></a>Rxjava 基础知识</h1><h2 id="Hot-Observable-和-Cold-Observable"><a href="#Hot-Observable-和-Cold-Observable" class="headerlink" title="Hot Observable 和 Cold Observable"></a>Hot Observable 和 Cold Observable</h2><ul>
<li>Hot Observable 无论有没有订阅观察者, 事件始终会发生, 且各观察者之间共享订阅信息  </li>
<li>Cold Observable 只有订阅观察者时, 才执行发送数据的代码, 各个观察者之间处理事件是独立的, just, create. range, fromXXX 等运算符均生成  Cold Observable 对象   </li>
</ul>
<h2 id="Cold-Observable-向-Hot-Observable-转换"><a href="#Cold-Observable-向-Hot-Observable-转换" class="headerlink" title="Cold Observable 向 Hot Observable 转换"></a>Cold Observable 向 Hot Observable 转换</h2><ol>
<li>调用 publish() 方法生成 ConnectableObservable 对象, 并调用 ConnectableObservable</li>
<li>使用 Subject/Processor (Processor 支持<a href="https://www.jianshu.com/p/2c4799fa91a4">背压</a>控制)</li>
</ol>
<p><strong>背压:在异步场景中, 被观察者发送事件速度远大于观察者处理事件的速度的情况下, 一种告诉上游的被观察者降低发送速度的策略</strong>  </p>
<h2 id="Hot-Observable-向-Cold-Observable-转换"><a href="#Hot-Observable-向-Cold-Observable-转换" class="headerlink" title="Hot Observable 向 Cold Observable 转换"></a>Hot Observable 向 Cold Observable 转换</h2><ol>
<li>ConnectableObservable 的 refCount 方法  </li>
<li>Observable 的 share 方法(封装了 publish().refCount() 调用)   </li>
</ol>
<h2 id="Flowable"><a href="#Flowable" class="headerlink" title="Flowable"></a>Flowable</h2><p>&emsp;&emsp;Rxjava 2.x 中新增加的被观察者, 强制支持背压, 可以看成 Observable 新的实现.</p>
<h2 id="Single-Completable-和-Maybe"><a href="#Single-Completable-和-Maybe" class="headerlink" title="Single, Completable 和 Maybe"></a>Single, Completable 和 Maybe</h2><p>Rxjava 2.x 中新增加的三种被观察者</p>
<ol>
<li><p><strong>Single</strong>: 只有 onSuccess 和 onError 事件  其中 onSuccess( ) 用于发射数据( 在 Observable/Flowable 中使用 onNext()) 且只能用一次, 后面即使在发射数据也不会做任何处理.<br>可以通过 toXXX() 方法转换成其他被观察者.</p>
</li>
<li><p><strong>Completable</strong>: 在创建后, 不会发射任何数据, 只有 onComplete( ) 和 onError( ) 事件, 没有 map, flatMap 等操作符,可以通过 fromXXX 操作符来创建一个 Completable. 经常和 andThen 操作符结合使用(Completable 执行完毕之后进行 andThen 里的操作);</p>
</li>
<li><p><strong>Maybe</strong>: 有数据发射-&gt; onSuccess, 无数据发射且无错误发生 -&gt; onComplete</p>
</li>
</ol>
<h2 id="Subject-和-Processor"><a href="#Subject-和-Processor" class="headerlink" title="Subject 和 Processor"></a>Subject 和 Processor</h2><h3 id="Subject"><a href="#Subject" class="headerlink" title="Subject"></a>Subject</h3><p>&emsp;&emsp;既可以是 Observable, 也可以是 Observer;</p>
<ol>
<li><strong>AsyncSubject</strong><br>&emsp;&emsp;Observer 会接收 作为 Observable 的 AsyncSubject onComplete() 之前最后一个数据 (必须调用subject.onComplete() 才会开始发送数据)</li>
<li><strong>BehaviorSubject</strong><br>&emsp;&emsp;发送订阅之前消息池中最后一条消息和订阅之后的所有消息</li>
<li><strong>ReplaySubject</strong><br>&emsp;&emsp;发送所有消息<br>&emsp;&emsp;将 create 改成 createWithSize(int) 可以修改订阅之前消息池的大小</li>
<li><strong>PublishSubject</strong><br>&emsp;&emsp;只发送订阅之后的消息  </li>
</ol>
<hr>
<h1 id="据说上面是基础知识"><a href="#据说上面是基础知识" class="headerlink" title="据说上面是基础知识"></a><del>据说上面是基础知识</del></h1><hr>
<h1 id="操作符-写作方法读作操作符"><a href="#操作符-写作方法读作操作符" class="headerlink" title="操作符(写作方法读作操作符)"></a>操作符(写作方法读作操作符)</h1><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><ol>
<li><strong>just()</strong>: 将一个或多个对象转换成发射这个或这些对象的 Observable</li>
<li><strong>from()</strong>: 将一个 Iterable, Futurue 或者一个数组转换成一个 Observable</li>
<li><strong>create()</strong>: 从头创建一个 Observable</li>
<li><strong>defer()</strong>: 只有订阅 Observer 时才创建 Observable, 为每个订阅创建一个新的 Observable</li>
<li><strong>range()</strong>: 创建一个发射指定范围的整数序列的 Observable</li>
<li><strong>interval()</strong>: 创建一个按照给定的事件间隔发射整数序列的 Observable, 按照固定的事件间隔发射一个无限递增的整数序列, 可通过 take(int) 限制上限, 接受一个表示时间间隔的参数和一个表示时间单位的参数, 默认在 computation 调度器上执行.</li>
<li><strong>timer()</strong>: 创建一个在给定的延时之后发射单个数据的 Observable, 参数列表同上, 延迟一段给定时间后发射一个简单的数字 0, 默认同在 computation 调度器上执行.</li>
<li><strong>empty()</strong>: 创建一个什么都不做直接 onComplete() 的Observable  </li>
<li><strong>error()</strong>: 同上, onError()</li>
<li><strong>never()</strong>: 创建一个不发射任何数据的 Observable  </li>
</ol>
<p>实例代码:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Observable.create(new ObservableOnSubscribe&lt;Integer&gt;()&#123;</span><br><span class="line">    /*</span><br><span class="line">     * @param emitter 中文翻译为发射器</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public void subscribe(ObservableEmitter&lt;Integer&gt; emitter) throws Exception&#123;</span><br><span class="line">      try&#123;</span><br><span class="line">        // RxJava 建议检测 isDiposed 状态,</span><br><span class="line">        // 以便没有观察者时, 让 Observable 停止发射数据, 防止运行昂贵的运算</span><br><span class="line">        if(!emitter.isDiposed())&#123;</span><br><span class="line">          for(int i=0;i&lt;10;i++)&#123;</span><br><span class="line">            emitter.onNext(i);</span><br><span class="line">          &#125;</span><br><span class="line">          // 一个形式正确的有限 Observable 必须尝试调用观察者的 onComplete()/onError() 一次</span><br><span class="line">          // 且此后不能再调用观察者的任何其他方法</span><br><span class="line">          emitter.onComplete();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;just 类似 from, 但是 from 会将数组或 Iterable 的数据取出然后逐个发射, 而 just 则是当做一个数据一次性发射(对每个参数而言).<br>&emsp;&emsp;just 可以接受一到十个参数, 返回一个按参数列表顺序发射这些数据的 Observable  </p>
<h2 id="repeat"><a href="#repeat" class="headerlink" title="repeat"></a>repeat</h2><p>&emsp;&emsp;创建一个发射特定数据重复多次的  Observable<br>&emsp;&emsp;收到 onComplete() 时触发重新订阅(另一个方法 retry() 是收到 onError() 时重新订阅)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Observable</span><br><span class="line">    .just(&quot;hello repeat&quot;)</span><br><span class="line">    .repeat(3)                //重复3次</span><br><span class="line">    .subscribe(System.out::println)</span><br></pre></td></tr></table></figure>
<p>执行结果  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hello repeat</span><br><span class="line">hello repeat</span><br><span class="line">hello repeat</span><br></pre></td></tr></table></figure>

<h3 id="repeatWhen"><a href="#repeatWhen" class="headerlink" title="repeatWhen"></a>repeatWhen</h3><p>&emsp;&emsp;有条件地重新订阅和重复发射数据  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Observable.range(0,9).repeatWhen(new Function&lt;Observable&lt;Object&gt;, ObservableSource&lt;?&gt;&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public ObservableSource&lt;?&gt; apply(Observable&lt;Object&gt; objectObservable) throws Exception &#123;</span><br><span class="line">                return Observable.timer(10, TimeUnit.SECONDS);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).subscribe(System.out::println);</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;上一个发射的 Observable 作为输入的参数, 返回的 Observable 触发了 onNext()  则重新订阅  </p>
<h3 id="repeatUntil"><a href="#repeatUntil" class="headerlink" title="repeatUntil"></a>repeatUntil</h3><p>&emsp;&emsp;直到某个条件时不再重复订阅  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Observable.interval(500, TimeUnit.MILLISECONDS)</span><br><span class="line">                .take(5)</span><br><span class="line">                .repeatUntil(()-&gt;(System.currentTimeMillis() - startTimeMillis &gt; 5000))</span><br><span class="line">                .subscribe(System.out::println);</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;需要传入 BooleanSupplier() 接口, 当接口方法返回 true 时终止重复订阅  </p>
<h1 id="Rxjava-的线程操作"><a href="#Rxjava-的线程操作" class="headerlink" title="Rxjava 的线程操作"></a>Rxjava 的线程操作</h1><h2 id="调度器-Scheduler-种类"><a href="#调度器-Scheduler-种类" class="headerlink" title="调度器(Scheduler) 种类"></a>调度器(Scheduler) 种类</h2><h3 id="RxJava-线程"><a href="#RxJava-线程" class="headerlink" title="RxJava 线程"></a>RxJava 线程</h3><p>&emsp;&emsp;在默认情况下, RxJava 只在当前线程中运行, 它是单线程的. 此时 Observable 用于发射数据流, Observer 用于接收和响应数据流, 各种操作符用于加工数据流.</p>
<h3 id="Scheduler"><a href="#Scheduler" class="headerlink" title="Scheduler"></a>Scheduler</h3><p>&emsp;&emsp;Scheduler 是 RxJava 对线程控制器的一个抽象.</p>
<table>
<thead>
<tr>
<th align="left">Scheduler</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="left">single</td>
<td align="left">使用定长为 1 的线程池, 重复利用同一个线程</td>
</tr>
<tr>
<td align="left">newThread</td>
<td align="left">每次都启用新线程, 并在新线程中执行操作</td>
</tr>
<tr>
<td align="left">computation</td>
<td align="left">使用固定的线程池(Fixed Scheduler Pool), 大小为 CPU 内核数, 适用于 CPU 密集型</td>
</tr>
<tr>
<td align="left">io</td>
<td align="left">适合 I/O 操作(读写文件, 读写数据库, 网络信息交互等)所使用的 Scheduler. 行为和 newThread() 差不多, 区别在于 io() 内部实现是用一个无数量上线的线程池, 可以重用空闲线程, 因此多数情况下, io() 比 newThread() 更有效率, 支持异步阻塞 I/O 操作</td>
</tr>
<tr>
<td align="left">trampoline</td>
<td align="left">直接在当前线程运行, 如果当前线程有其他任务正在执行, 则会先暂停其他任务</td>
</tr>
<tr>
<td align="left">Scheduler.from</td>
<td align="left">将 java.util.concurrent.Executor 转换成一个调度器实例, 即自定义调度器</td>
</tr>
</tbody></table>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Observable.just(&quot;hello&quot;)</span><br><span class="line">          .observeOn(Schedulers.newThread()) // 切换到 newThread</span><br><span class="line">          .subscribe(System.out::println);</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp; 使用 subscribeOn() 和 observeOn() 切换线程<br>&emsp;&emsp; subscribeOn() 接受一个 Scheduler 参数, 指定对数据的处理运行在特定的线程调度器上. 仅第一次切换有效<br>&emsp;&emsp; observeOn() 接收一个 Scheduler 参数, 用来指定下游操作运行在特定的线程调度器上. 可多次切换</p>
<h3 id="Scheduler-的测试-TestScheduler"><a href="#Scheduler-的测试-TestScheduler" class="headerlink" title="Scheduler 的测试(TestScheduler)"></a>Scheduler 的测试(TestScheduler)</h3><p>&emsp;&emsp;<strong>TestScheduler</strong> 专门用于测试的调度器, 只有被调用时时间才会继续, 非线程安全. 用于测试一些不引入真实并发性, 允许手动推进虚拟事件的调度器. <del>Rxjava1.x Scheduler.test()</del> Rxjava 2.x new TestScheduler  </p>
<ol>
<li><strong>advanceTimeTo(int time, int timeUnit)</strong>  将调度器的时钟移动到到固定的时刻.</li>
<li><strong>advanceTimeBy(int time, int timeUnit)</strong> 按指定的事件向前移动</li>
<li><strong>triggerActions()</strong>: 执行计划中的但是未启动的任务, 并不修改调度器时间<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TestScheduler scheduler = new TestScheduler();</span><br><span class="line">scheduler.createWorker().schedule(new Runnable()&#123;           </span><br><span class="line"></span><br><span class="line">       @Override</span><br><span class="line">       public void run() &#123;</span><br><span class="line">             System.out.println(&quot;immediate&quot;);</span><br><span class="line">       &#125;</span><br><span class="line">&#125;);</span><br><span class="line">scheduler.createWorker().schedule(new Runnable() &#123;</span><br><span class="line">       @Override</span><br><span class="line">       public void run() &#123;</span><br><span class="line">       System.out.println(&quot;20s&quot;);</span><br><span class="line">       &#125;</span><br><span class="line">&#125;,20, TimeUnit.SECONDS);</span><br><span class="line">System.out.println(&quot;virtual time:&quot; + scheduler.now(TimeUnit.SECONDS));</span><br><span class="line">scheduler.triggerActions();</span><br><span class="line">System.out.println(&quot;virtual time:&quot; + scheduler.now(TimeUnit.SECONDS));</span><br></pre></td></tr></table></figure>
结果  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">virtual time:0</span><br><span class="line">immediate</span><br><span class="line">virtual time:0</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="变换操作符和过滤操作符"><a href="#变换操作符和过滤操作符" class="headerlink" title="变换操作符和过滤操作符"></a>变换操作符和过滤操作符</h1><table>
<thead>
<tr>
<th align="left">变换操作符</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="left">map()</td>
<td align="left">对序列的每一项都用一个函数来变换 Observable 发射的数据序列</td>
</tr>
<tr>
<td align="left">flatMap(),<br>concatMap(),<br>flatMapIterable()</td>
<td align="left">将 Observable 发射的数据集合变换为 Observable 集合, 然后将这些 Observable 发射的数据平坦化地放进一个单独的 Observable 中</td>
</tr>
<tr>
<td align="left">switchMap()</td>
<td align="left">将 Observable 发射的数据集合变换为 Observable 集合. 然后只发射这些 Observable 最近发射过的数据</td>
</tr>
<tr>
<td align="left">scan()</td>
<td align="left">对 Observable 发射的每一项数据应用一个函数, 然后按顺序依次发射每一个值.</td>
</tr>
<tr>
<td align="left">groupBy()</td>
<td align="left">将 Observable 拆分为 Observable 结合, 将原始 Observable 发射的数据按  Key 分组, 每一个 Observable 发射一组不同的数据</td>
</tr>
<tr>
<td align="left">buffer()</td>
<td align="left">定期从 Observable 收集数据到一个集合, 然后将这些数据集合打包发射</td>
</tr>
<tr>
<td align="left">window()</td>
<td align="left">定期将来自 Observable 的数据拆分成一些 Observable 窗口, 然后发射这些窗口</td>
</tr>
<tr>
<td align="left">cast()</td>
<td align="left">在发射之前强制将 Observable 发射的所有数据转换为指定类型</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="left">过滤操作符</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="left">filter()</td>
<td align="left">过滤数据, 根据指定的谓词函数测试数据项, 只有通过测试(返回 true )的数据才会发射</td>
</tr>
<tr>
<td align="left">take()</td>
<td align="left">只发射开始的 N 项数据</td>
</tr>
<tr>
<td align="left">takeLast()</td>
<td align="left">只发射最后的 N 项数据</td>
</tr>
<tr>
<td align="left">last()</td>
<td align="left">只发射最后一项数据</td>
</tr>
<tr>
<td align="left">lastOrDefault()</td>
<td align="left">只发射最后一项数据, 如果 Observable 为空, 就发射默认值</td>
</tr>
<tr>
<td align="left">takeLastBuffer()</td>
<td align="left">将最后的 N 项数据当作单个数据发射</td>
</tr>
<tr>
<td align="left">skip()</td>
<td align="left">跳过开始的 N 项数据</td>
</tr>
<tr>
<td align="left">skipLast()</td>
<td align="left">跳过最后的 N 项数据</td>
</tr>
<tr>
<td align="left">first()</td>
<td align="left">发射第一条数据或者默认值</td>
</tr>
<tr>
<td align="left">firstOrError()</td>
<td align="left">发射第一条数据, 如果为空 则 onError()</td>
</tr>
<tr>
<td align="left">elementAt()</td>
<td align="left">发射第 N 项数据</td>
</tr>
<tr>
<td align="left">elementAtOrError()</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">sample()/throttleLast()</td>
<td align="left">定期发射最近的数据</td>
</tr>
<tr>
<td align="left">throttleFirst()</td>
<td align="left">定期发射第一项数据</td>
</tr>
<tr>
<td align="left">throttleWithTimeOut()/debounce()</td>
<td align="left">当 Observable 在指定的时间段后还没有发射数据时, 才发射一个数据</td>
</tr>
<tr>
<td align="left">timeout()</td>
<td align="left">如果在一个指定的时间段后还没有发射数据, 就发射一个异常</td>
</tr>
<tr>
<td align="left">distinct()</td>
<td align="left">过滤掉重复数据(可以接受一个Function 作为参数) 根据返回的 key 值去重</td>
</tr>
<tr>
<td align="left">distinctUntilChanged()</td>
<td align="left">过滤掉连续重复的数据</td>
</tr>
<tr>
<td align="left">ofType()</td>
<td align="left">只发射指定类型的数据</td>
</tr>
<tr>
<td align="left">ignoreElements()</td>
<td align="left">丢弃所有正常数据, 只发射错误或完成的通知</td>
</tr>
</tbody></table>
<h2 id="Map-和-flatMap"><a href="#Map-和-flatMap" class="headerlink" title="Map 和 flatMap"></a>Map 和 flatMap</h2><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p>&emsp;&emsp;对原始 Observable 发射的每一项数据应用一个函数, 默认不在任何特定的调度器上执行.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Observable</span><br><span class="line">  .just(&quot;HELLO&quot;)</span><br><span class="line">  .map(String::toLowerCase)</span><br><span class="line">  .map(s-&gt;s+&quot; world&quot;)</span><br><span class="line">  .subscribe(System.out::println);</span><br></pre></td></tr></table></figure>
<p>执行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hello world</span><br></pre></td></tr></table></figure>
<h3 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap"></a>flatMap</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Observable</span><br><span class="line">    .just(user)</span><br><span class="line">    .flatMap(new Function&lt;User, ObservableSource&lt;User.Address&gt;&gt;() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        ObservableSource&lt;User.Address&gt; apply(User user) throws Exception &#123;</span><br><span class="line">            return Observable.fromIterable(user.addresses);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .subscribe(new Consumer&lt;User.Address&gt;() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void accept(User.Address address) throws Exception &#123;</span><br><span class="line">            System.out.println(address.street);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<p>以上代码 与 map() 部分等价  </p>
<h4 id="map-与-flatMap-区别"><a href="#map-与-flatMap-区别" class="headerlink" title="map() 与 flatMap() 区别"></a>map() 与 flatMap() 区别</h4><p>&emsp;&emsp;map 只是对原 Observable 发射的内容进行修改, flatMap 返回一个新的 Observable    </p>
<h4 id="concatMap"><a href="#concatMap" class="headerlink" title="concatMap()"></a>concatMap()</h4><p>&emsp;&emsp;flatMap 对 Observable 发射的数据做的时合并操作, 并不保证次序, concatMap() 严格按照顺序发射数据   </p>
<h2 id="groupBy"><a href="#groupBy" class="headerlink" title="groupBy()"></a>groupBy()</h2><p>&emsp;&emsp;根据传递的函数参数给每一项指定一个 Key, 返回一个 GroupedObservable 对象,  key 相同的数据会被同一个 Observable 发射</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Observable</span><br><span class="line">  .range(0,9)</span><br><span class="line">  .groupBy(new Function&lt;Integer, Object&gt;() &#123;</span><br><span class="line">      @Override</span><br><span class="line">      public Object apply(Integer integer) throws Exception &#123;</span><br><span class="line">          return integer%2==0 ? &quot;1&quot;:&quot;2&quot;;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .subscribe(new Consumer&lt;GroupedObservable&lt;Object, Integer&gt;&gt;() &#123;</span><br><span class="line">      @Override</span><br><span class="line">      public void accept(GroupedObservable&lt;Object, Integer&gt; objectIntegerGroupedObservable) throws Exception &#123;</span><br><span class="line">          if (objectIntegerGroupedObservable.getKey().equals(&quot;1&quot;))</span><br><span class="line">              objectIntegerGroupedObservable.subscribe(System.out::println);</span><br><span class="line">          &#125;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<h2 id="buffer-和-window"><a href="#buffer-和-window" class="headerlink" title="buffer() 和 window()"></a>buffer() 和 window()</h2><h3 id="buffer"><a href="#buffer" class="headerlink" title="buffer()"></a>buffer()</h3><p>&emsp;&emsp;指定缓存大小 返回一个 Observable&lt;List<Object>&gt; 对象, 发送缓存的集合</Object></p>
<h4 id="buffer-count-skip"><a href="#buffer-count-skip" class="headerlink" title="buffer(count, skip)"></a>buffer(count, skip)</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Observable.range(0,9)</span><br><span class="line">        .buffer(5,1)</span><br><span class="line">        .subscribe(System.out::println);</span><br></pre></td></tr></table></figure>
<p>print:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[0, 1, 2, 3, 4]</span><br><span class="line">[1, 2, 3, 4, 5]</span><br><span class="line">[2, 3, 4, 5, 6]</span><br><span class="line">[3, 4, 5, 6, 7]</span><br><span class="line">[4, 5, 6, 7, 8]</span><br><span class="line">[5, 6, 7, 8]</span><br><span class="line">[6, 7, 8]</span><br><span class="line">[7, 8]</span><br><span class="line">[8]</span><br></pre></td></tr></table></figure>
<h3 id="window"><a href="#window" class="headerlink" title="window()"></a>window()</h3><p>&emsp;&emsp;定期将来自原始  Observable 的数据分解为多个窗口, 发射这些窗口, 而不是发射每一项数据.(并不发射原始数据包, 发射 Observables, 每一个都发射原始 Observable 数据的一个子集, 最后发射一个 onComplete() 通知 )  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Observable</span><br><span class="line">    .range(1,10)</span><br><span class="line">    .window(2)</span><br><span class="line">    .subscribe(integerObservable -&gt; &#123;</span><br><span class="line">        System.out.println(&quot;on next&quot;);</span><br><span class="line">        integerObservable.subscribe(System.out::println);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<p>print:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">on next</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">on next</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">on next</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">on next</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">on next</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td></tr></table></figure>
<h2 id="debounce"><a href="#debounce" class="headerlink" title="debounce"></a>debounce</h2><p>&emsp;&emsp;定期检测发送流, 当这段时间内有多个数据发送, 忽略, 只有一个数据发送则通过.  </p>
<h1 id="条件操作符和布尔操作符"><a href="#条件操作符和布尔操作符" class="headerlink" title="条件操作符和布尔操作符"></a>条件操作符和布尔操作符</h1><p>&emsp;&emsp;布尔操作符返回的结果全部为 布尔值, 而条件操作符则会根据条件进行数据发射或变换被观察者.</p>
<h2 id="all-contains-和-amb"><a href="#all-contains-和-amb" class="headerlink" title="all, contains 和 amb"></a>all, contains 和 amb</h2><h3 id="all"><a href="#all" class="headerlink" title="all"></a>all</h3><p>&emsp;&emsp;传递一个谓词函数作为参数, 返回一个只发射单个布尔值的  Observable, 默认不在任何特定的调度器上执行;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Observable</span><br><span class="line">    .just(1,2,3,4,5)</span><br><span class="line">    .all(integer -&gt; integer&lt;10)</span><br><span class="line">    .subscribe(System.out::print);</span><br></pre></td></tr></table></figure>
<p>print</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">true</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">### contains  </span><br><span class="line">&amp;emsp;&amp;emsp;传递一个特定的值, 判断 Observable 是否发送该特定值  </span><br><span class="line">### amb</span><br><span class="line">&amp;emsp;&amp;emsp;只发射首先发射的 Observable  </span><br></pre></td></tr></table></figure>
<p>Observable<br>  .ambArray(<br>        Observable.just(1,2,3).delay(1, TimeUnit.SECONDS),<br>        Observable.just(4,5,6)<br>        )<br>  .subscribe(System.out::println);</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print:</span><br></pre></td></tr></table></figure>
<p>4<br>5<br>6</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## defaultEmpty  </span><br><span class="line">&amp;emsp;&amp;emsp;发射来自原始 Observable 的数据, 如果原始 Observable 为空, 发射一个作为参数传入的默认值  </span><br><span class="line"></span><br><span class="line">## sequenceEqual  </span><br><span class="line">&amp;emsp;&amp;emsp;判断两个 Observable 是否发射相同的数据序列  </span><br><span class="line">&amp;emsp;&amp;emsp;可传入谓词函数作为判断依据  </span><br><span class="line"></span><br><span class="line">## skipUntil 和 skipWhile  </span><br><span class="line">### skipUntil( Observable&lt;? extends Object&gt; )  </span><br><span class="line">&amp;emsp;&amp;emsp;直到作为参数的 Observable 发射数据之前, 忽略所有原 Observable 发射的数据   </span><br><span class="line">### skipWhile( Function&lt;? extends Object&gt;)</span><br><span class="line">&amp;emsp;&amp;emsp;忽略所有数据, 直到参数函数返回第一个 false;</span><br><span class="line">## takeUntil 和 takeWhile  </span><br><span class="line">### takeUntil  </span><br><span class="line">&amp;emsp;&amp;emsp;发射原数据直到检测到第一个谓词函数返回真的数据, 忽略该数据之后的所有数据  </span><br><span class="line">### takeWhile  </span><br><span class="line">&amp;emsp;&amp;emsp;发射所有数据直到第一个谓词函数返回 false 的数据  </span><br><span class="line"></span><br><span class="line"># 合并与连接  </span><br><span class="line">## merge 和 zip  </span><br><span class="line">### merge(Observable&lt;? extends Object&gt;[])  </span><br><span class="line">&amp;emsp;&amp;emsp;合并至多四个 Observable, 按照时间线并行发射数据, 如果任何一个发射了 onError 通知, 则 merge 生成的 Observable 也会立即以 onError 通知终止, 如果想让它继续发射数据直到最后才报告错误, 可以使用 mergeDelayError  </span><br><span class="line">### zip(Observable&lt;? extends Object&gt;[], Function&lt;&gt;)  </span><br><span class="line">&amp;emsp;&amp;emsp;返回每次发射以 Function 压缩后的单个数据的 Observable  </span><br><span class="line"></span><br><span class="line">## combineLastest 和 join  </span><br><span class="line">### combineLastest(Observable&lt;? extends Object&gt;[], Function&lt;&gt;)</span><br><span class="line">&amp;emsp;&amp;emsp;与 zip 类似, zip 只有当每个 Observable 都发射一条数据之后再进行压缩处理, combineLastest 则有单个 Observable 发射数据时便进行合并处理( 采用当前发射的数据和其他参与压缩的 Observable 最近发射的数据)  </span><br><span class="line">### join</span><br></pre></td></tr></table></figure>
<p>@SchedulerSupport(SchedulerSupport.NONE)<br>    public final &lt;TRight, TLeftEnd, TRightEnd, R&gt; Observable<R> join(<br>            ObservableSource&lt;? extends TRight&gt; other,<br>            Function&lt;? super T, ? extends ObservableSource<TLeftEnd>&gt; leftEnd,<br>            Function&lt;? super TRight, ? extends ObservableSource<TRightEnd>&gt; rightEnd,<br>            BiFunction&lt;? super T, ? super TRight, ? extends R&gt; resultSelector<br>                    ) {<br>        return RxJavaPlugins.onAssembly(new ObservableJoin&lt;T, TRight, TLeftEnd, TRightEnd, R&gt;(<br>                this, other, leftEnd, rightEnd, resultSelector));<br>    }</TRightEnd></TLeftEnd></R></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line">Observable&lt;Long&gt; o1 = Observable.interval(1, TimeUnit.SECONDS);</span><br><span class="line">Observable&lt;Long&gt; o2 = Observable.interval(1, TimeUnit.SECONDS);</span><br><span class="line">o1.join(</span><br><span class="line">                o2,</span><br><span class="line">                along -&gt; Observable.timer(5, TimeUnit.SECONDS),</span><br><span class="line">                along -&gt; Observable.timer(10, TimeUnit.SECONDS),</span><br><span class="line">                (integer, integer2) -&gt; &quot;integer1 &quot; + integer + &quot;: integer2 &quot; + integer2</span><br><span class="line">        ).subscribe(s -&gt; System.out.println(&quot;onNext&quot; + s))</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;两个 Observable 按照预定顺序发射数据, 每次发射数据时找到另一个最近 t 时间内 ( 第二三参数返回的  Observable 生命周期时长) 发射过的数据, 根据 resultSelector 函数进行连接, 发射连接后的数据.  </p>
<h2 id="startWith"><a href="#startWith" class="headerlink" title="startWith"></a>startWith</h2><p>&emsp;&emsp;在开端插入几个序列<br>三种重载形式:</p>
<ol>
<li>startWith(T)</li>
<li>startWith(ObservableSource&lt;? extends T&gt;)</li>
<li>startWith(Iterable&lt;? extends T&gt;)  (同时存在 startWithArray(&lt;? extends T&gt;[])) 运算符  </li>
</ol>
<h2 id="connect-publish-和-refCount"><a href="#connect-publish-和-refCount" class="headerlink" title="connect, publish 和 refCount"></a>connect, publish 和 refCount</h2><p>&emsp;&emsp;均为与 ConnectableObservable 相关的操作符  </p>
<h3 id="ConnectableObservable"><a href="#ConnectableObservable" class="headerlink" title="ConnectableObservable"></a>ConnectableObservable</h3><p>&emsp;&emsp;只有对其使用 connect 操作符时才发射数据, 属于<strong>Hot Observable</strong></p>
<h3 id="connect"><a href="#connect" class="headerlink" title="connect"></a>connect</h3><p>&emsp;&emsp;触发 ConnectableObservable 发射数据, 可以等所有的 Observer 都订阅了再进行 connect 发射数据   </p>
<h3 id="publish"><a href="#publish" class="headerlink" title="publish"></a>publish</h3><p>&emsp;&emsp;将普通的 Observable 转换为 ConnectableObservable  </p>
<h3 id="refCount"><a href="#refCount" class="headerlink" title="refCount"></a>refCount</h3><p>&emsp;&emsp;将 ConnectableObservable 转换为较普通的 Observable, 当有 Observer 订阅时自动 connect 发射数据, 无订阅时停止数据流  </p>
<h2 id="replay"><a href="#replay" class="headerlink" title="replay"></a>replay</h2><p>&emsp;&emsp;返回一个保证所有的 Observer 无论何时订阅均收到相同的数据序列的 ConnectableObservable;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Observable&lt;Long&gt; obs = Observable.interval(1, TimeUnit.SECONDS).take(6);</span><br><span class="line">ConnectableObservable&lt;Long&gt; cob = obs.replay();</span><br><span class="line">cob.connect();</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;replay 有多个重载方法, 可以指定最大缓存数量, 调度器等<br>&emsp;&emsp;<strong>ConnectableObservable 切换调度器只能通过 replay 实现</strong></p>
<h1 id="RxJava-背压"><a href="#RxJava-背压" class="headerlink" title="RxJava 背压"></a>RxJava 背压</h1><h2 id="背压-Back-Pressure"><a href="#背压-Back-Pressure" class="headerlink" title="背压(Back Pressure)"></a>背压(Back Pressure)</h2><p>&emsp;&emsp;被观察者发送数据速度太快以至于它的操作符或者观察者来不及处理数据的场景.</p>
<blockquote>
<p>官方维基百科<br>&emsp;&emsp;In RxJava it is not difficult to get into a situation in which an Observable is emittting items more rapidly than an operatot or subscriber can consume them. This presents the problem of what to do with such a growing backlog of unconsumed items  </p>
</blockquote>
<ol>
<li>异步场景</li>
<li>Push 模型  </li>
</ol>
<p>&emsp;&emsp;** RxJava 中 Flowable 专门支持背压, 默认队列大小为 128, 且要求所有操作符强制支持背压**  </p>
<h2 id="Rxjava-2-X-的背压策略"><a href="#Rxjava-2-X-的背压策略" class="headerlink" title="Rxjava 2.X 的背压策略"></a>Rxjava 2.X 的背压策略</h2><p>** 见 <em>BackpressureStrategy</em> 源码**</p>
<h3 id="MISSSING"><a href="#MISSSING" class="headerlink" title="MISSSING"></a>MISSSING</h3><p>&emsp;&emsp;默认背压策略( 通过 create 方法创建的 Flowable 没有指定背压策略), 不会对通过 onNext 发射的数据做缓存或丢弃处理, 需要下游通过背压操作符(** onBackpressureBuffer() / onBackpressureDrop() / onBackpressureLatest() **) 指定背压策略  </p>
<h3 id="ERROR"><a href="#ERROR" class="headerlink" title="ERROR"></a>ERROR</h3><p>&emsp;&emsp;如果放入 Flowable 的异步缓存池中的数据超限了(默认大小 128), 则会抛出 <em><strong>MisssingBackpressureException</strong></em> 异常</p>
<h3 id="BUFFER"><a href="#BUFFER" class="headerlink" title="BUFFER"></a>BUFFER</h3><p>&emsp;&emsp;使缓存池大小无限制, 可能导致内存溢出 程序无响应</p>
<h3 id="DROP"><a href="#DROP" class="headerlink" title="DROP"></a>DROP</h3><p>&emsp;&emsp;如果缓存池满了, 丢弃将要进入缓存池中的数据</p>
<h3 id="LATEST"><a href="#LATEST" class="headerlink" title="LATEST"></a>LATEST</h3><p>&emsp;&emsp;丢弃将要进入缓存池中的数据, 但会强行将最后一个数据压入缓存池<br><br><br><br>Flowable 不仅可以通过 create 创建时指定背压策略. 还可以用其他操作符指定背压策略.( <strong>onBackpressureXXX()</strong>)  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Flowable</span><br><span class="line">  .interval(1,TimeUnit.SECONDS)</span><br><span class="line">  .onBackpressureBuffer()</span><br><span class="line">  .subscribe(System.out::println)</span><br></pre></td></tr></table></figure>

<h1 id="Disposed-和-Transformer-的使用"><a href="#Disposed-和-Transformer-的使用" class="headerlink" title="Disposed 和 Transformer 的使用"></a>Disposed 和 Transformer 的使用</h1><h2 id="Disposed"><a href="#Disposed" class="headerlink" title="Disposed"></a>Disposed</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public interface Disposable&#123;</span><br><span class="line">  void dispose();</span><br><span class="line">  boolean isDisposed();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;监听当前 Observable 是否被订阅</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Disposable disposable = Observable</span><br><span class="line">                          .just(&quot;Hello world!&quot;)</span><br><span class="line">                          .subscribe(System.out::println);</span><br><span class="line">disposable.dispose();// 解除订阅</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;CompositeDisposable 可以用来管理订阅<br>&emsp;&emsp;CompositeDisposable.add() 增加管理的 Disposable<br>&emsp;&emsp;CompositeDisposable.clear() 切断所有订阅  </p>
<h2 id="RxLifecycle-和-AutoDispose"><a href="#RxLifecycle-和-AutoDispose" class="headerlink" title="RxLifecycle 和 AutoDispose"></a>RxLifecycle 和 AutoDispose</h2><h3 id="RxLifecycle"><a href="#RxLifecycle" class="headerlink" title="RxLifecycle"></a>RxLifecycle</h3><blockquote>
<p>GitHub 地址 <a href="https://github.com/trello/RxLifecycle">https://github.com/trello/RxLifecycle</a><br>知乎版地址 <a href="https://github.com/zhihu/RxLifecycle">https://github.com/zhihu/RxLifecycle</a> (使用更加简单)</p>
</blockquote>
<p>添加依赖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">compile &#x27;com.trello.rxlifecycle2:rxlifecycle-components:2.1.0&#x27;</span><br><span class="line">compile &#x27;com.trello.rxlifecycle2:rxlifecycle-navi:2.1.0&#x27;</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;默认情况下, RxLifecycle 将在辅助生命周期事件中终止  Observable.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void onResume()&#123;</span><br><span class="line">    super.onResume();</span><br><span class="line">    myObservalbe</span><br><span class="line">      .compose(RxLifecycleAndroid.bindActivity(lifecycle))// lifecycle 继承自 RxAppCompatActivity</span><br><span class="line">      .subscribe();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;或者可以指定事件  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void onResume()&#123;</span><br><span class="line">    super.onResume();</span><br><span class="line">    myObservalbe</span><br><span class="line">      .compose(RxLifecycle.bindUntilEvent(llifecycle, ActivityEvent.DESTROY))//在 onDestory() 中终止 Observable 序列.</span><br><span class="line">      .subscribe();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="AutoDispose"><a href="#AutoDispose" class="headerlink" title="AutoDispose"></a>AutoDispose</h3><p>&emsp;&emsp;不仅可以在 Android 上使用, 还可以在 J2EE 上使用.</p>
<blockquote>
<p>GitHub 地址 : <a href="https://github.com/uber/AutoDispose">https://github.com/uber/AutoDispose</a>  </p>
</blockquote>
<h2 id="Transformer-在-RxJava-中的使用"><a href="#Transformer-在-RxJava-中的使用" class="headerlink" title="Transformer 在 RxJava 中的使用"></a>Transformer 在 RxJava 中的使用</h2><h3 id="Transformer-的用途"><a href="#Transformer-的用途" class="headerlink" title="Transformer 的用途"></a>Transformer 的用途</h3><p>&emsp;&emsp;根据参数转换 Observable/Flowable/Single/Completable/Maybe为另一个 被观察者</p>
<h3 id="与-compose-操作符结合使用"><a href="#与-compose-操作符结合使用" class="headerlink" title="与 compose 操作符结合使用"></a>与 compose 操作符结合使用</h3><p>&emsp;&emsp; compose() 能从数据流中拿到原始的被观察者.然后根据传入的 Transformer 参数转换 被观察者给下游  </p>
<h1 id="Rxjava-并行编程"><a href="#Rxjava-并行编程" class="headerlink" title="Rxjava 并行编程"></a>Rxjava 并行编程</h1><hr>
<h2 id="饿到先不看了"><a href="#饿到先不看了" class="headerlink" title="饿到先不看了"></a>饿到先不看了</h2><hr>
<h1 id="RxBinding"><a href="#RxBinding" class="headerlink" title="RxBinding"></a>RxBinding</h1><p>&emsp;&emsp;可以将 UI 控件转换为 Observable 对象, 把事件当做数据流处理<br>&emsp;&emsp;View 的 onClick 事件, RxView.clicks(view) 即可获取一个 Observable 对象, 每次点击 Observer 即可通过 onNext 回调知道用户点击了 View</p>
<h2 id="常用的库-kotlin-版依赖"><a href="#常用的库-kotlin-版依赖" class="headerlink" title="常用的库(kotlin 版依赖)"></a>常用的库(kotlin 版依赖)</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Android 平台 bindings</span><br><span class="line">implementation &#x27;com.jakewharton.rxbinding2:rxbinding-kotlin:2.0.0&#x27;</span><br><span class="line">// 对应包的 bindings</span><br><span class="line">implementation &#x27;com.jakewharton.rxbinding2:rxbinding-support-v4-kotlin:2.0.0&#x27;</span><br><span class="line">implementation &#x27;com.jakewharton.rxbinding2:rxbinding-appcompat-v7-kotlin:2.0.0&#x27;</span><br><span class="line">implementation &#x27;com.jakewharton.rxbinding2:rxbinding-design-kotlin:2.0.0&#x27;</span><br><span class="line">implementation &#x27;com.jakewharton.rxbinding2:rxbinding-recyclerview-v7-kotlin:2.0.0&#x27;</span><br><span class="line">implementation &#x27;com.jakewharton.rxbinding2:rxbinding-leanback-v17-kotlin:2.0.0&#x27;</span><br></pre></td></tr></table></figure>

<h2 id="RxBinding-常见使用场景"><a href="#RxBinding-常见使用场景" class="headerlink" title="RxBinding 常见使用场景"></a>RxBinding 常见使用场景</h2><h3 id="点击事件"><a href="#点击事件" class="headerlink" title="点击事件"></a>点击事件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">RxView.clicks(view)</span><br><span class="line">  .subscribe(new Consumer&lt;Object&gt;()&#123;</span><br><span class="line">      @Override</span><br><span class="line">      publiv void accept(@NonNull Object o) throws Exception&#123;</span><br><span class="line">        // doSomething</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 点击</span><br><span class="line">RxView.clicks(mainSingleClick)</span><br><span class="line">               .subscribe&#123; mainSingleClick.visibility = View.GONE &#125;</span><br><span class="line">// 长按</span><br><span class="line">RxView.longClicks(mainLongClick)</span><br><span class="line">               .subscribe&#123; mainLongClick.visibility = View.GONE &#125;</span><br><span class="line">// 避免重复点击</span><br><span class="line">RxView.clicks(mainAvoidclicks)</span><br><span class="line">               .throttleFirst(10, TimeUnit.SECONDS) // 只发射 10秒内第一个数据</span><br><span class="line">               .subscribe&#123;  Toast.makeText(this, &quot;click&quot;, Toast.LENGTH_LONG).show()&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// TextView 文字改变  </span><br><span class="line">Observable&lt;CharSequence&gt; Observable = RxTextView.textChanges(phone);</span><br></pre></td></tr></table></figure>
<h3 id="对-Recyclerview-的支持"><a href="#对-Recyclerview-的支持" class="headerlink" title="对 Recyclerview 的支持"></a>对 Recyclerview 的支持</h3><p>&emsp;&emsp; rxbinding-recycleview-v7<br>** 提供以下集中状态的观察 **  </p>
<ol>
<li><strong>scrollStateChanges</strong> 观察滚动状态</li>
<li><strong>scrollEvents</strong> 观察滚动事件</li>
<li><strong>childAttachStateChangeEvents</strong> 观察 child view 的 detached 状态, 当 LayoutManager<br>或者 RecyclerView 认为不再需要一个 child view 时, 就会调用这个方法, 如果 child view 占用<br>资源, 则应当释放资源  </li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">RxRecyclerView</span><br><span class="line">  .scrollStateChanges(recycleview)</span><br><span class="line">  .subscribe(new Consumer&lt;Integer&gt;()&#123;</span><br><span class="line">    publiv void accept(Integr scrollState) throws Exception&#123;</span><br><span class="line">      // do something</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">// scrollState</span><br><span class="line">public static final int SCROLL_STATE_IDLE = 0; // 当前没有滚动</span><br><span class="line">public static final int SCROLL_STATE_DRAGGING = 1 ; // 正在被拖动</span><br><span class="line">public static final int SCROLL_STATE_SETTLING = 2; // 手已经离开屏幕, 处在&quot;惯性&quot;移动中</span><br></pre></td></tr></table></figure>
<h3 id="多次监听"><a href="#多次监听" class="headerlink" title="多次监听"></a>多次监听</h3><p>&emsp;&emsp;使用 publish, share, replay 等转换为 hot Observable 订阅多个 Observer</p>
<h2 id="RxBinding-结合-RxPermissions"><a href="#RxBinding-结合-RxPermissions" class="headerlink" title="RxBinding 结合 RxPermissions"></a>RxBinding 结合 RxPermissions</h2><p>targetSdkVersion 23以上且运行在 Android 6.0 以上的设备时需要动态申请危险权限  </p>
<h3 id="RxPermissions"><a href="#RxPermissions" class="headerlink" title="RxPermissions"></a>RxPermissions</h3><p><code>implementation &#39;com.tbruyelle.rxpermissions2:rxpermissions:0.9.5@aar&#39;</code><br>** 使用**  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 先创建 rxPermissions 对象</span><br><span class="line">var rxPermissions = RxPermissions(avtivity:Activity)</span><br><span class="line">rxPermissions</span><br><span class="line">    .request(Manifest.permission.CAMERA</span><br><span class="line">            ,Manifest.permission.CALL_PHONE)//请求的权限, 接收 vararg 参数, 都授权才发射 true 否则 发射 false</span><br><span class="line">    .subscribe(Consumer&lt;Boolean&gt; &#123; &#125;)</span><br></pre></td></tr></table></figure>
<h2 id="结合-compose-链式调用"><a href="#结合-compose-链式调用" class="headerlink" title="结合 compose 链式调用"></a>结合 compose 链式调用</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">RxView</span><br><span class="line">  .clicks(view)</span><br><span class="line">  .compose(rxPermissions.ensure(Manifest.perm</span><br><span class="line">    .CALL_PHONE)) // 返回一个转换器并申请权限</span><br><span class="line">  .subscribe(Consumer&lt;Boolean&gt;&#123;&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="在-android-中使用-RxJava-致命缺陷"><a href="#在-android-中使用-RxJava-致命缺陷" class="headerlink" title="在 android 中使用 RxJava 致命缺陷"></a>在 android 中使用 RxJava 致命缺陷</h2><p>&emsp;&emsp;不完整的订阅会导致内存泄露, 当 Android 系统尝试销毁包含着正在运行 Observalbe 的 Activity/Fragment 时, 由于 Observable 正在运行, 其观察者仍然会持有该 Activity/Fragment 的引用, 因此系统无法对该 Activity/Fragment 进行垃圾回收.</p>
<h1 id="RxAndroid-和-Retrofit"><a href="#RxAndroid-和-Retrofit" class="headerlink" title="RxAndroid 和  Retrofit"></a>RxAndroid 和  Retrofit</h1><h2 id="RxAndroid"><a href="#RxAndroid" class="headerlink" title="RxAndroid"></a>RxAndroid</h2><p><strong>依赖于 RxJava 才能使用</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">implementation &#x27;io.reactivex.rxjava2:rxjava:2.0.2&#x27;</span><br><span class="line">implementation &#x27;io.reactivex.rxjava2:rxandroid:2.0.1&#x27;</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;提供了一个调度程序 AndroidSchedulers;  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AndroidSchedulers.mainThread();</span><br><span class="line">AndroidSchedulers.from(Looper looper);</span><br></pre></td></tr></table></figure>

<h2 id="Retrofit"><a href="#Retrofit" class="headerlink" title="Retrofit"></a>Retrofit</h2><blockquote>
<p>GitHub <a href="https://github.com/square/retrofit">https://github.com/square/retrofit</a></p>
</blockquote>
<p>底层依赖 OkHttp<br><strong>Retrofit 特点</strong>  </p>
<ol>
<li>Retrofit 可插拔的,允许不同的执行机制及其库用于执行 http 调用. 允许 API 请求, 与应用程序其余部分中任何现有线程模型和任务框架无缝结合. 提供常见适配器:</li>
</ol>
<ul>
<li> Rxjava1.x Observable &amp; Single (com.squareup.retrofit2:adapter-rxjava)</li>
<li>Rxjava2.x Observable, Flowable, Single, Completable &amp; Maybe (com.squareup.retrofit2:adapter-rxjava2)</li>
<li>Guava ListenableFuture</li>
<li>java8 CompletableFuture (com.squareup.retrofit2:adapter-java8)</li>
</ul>
<ol start="2">
<li>允许不同的序列化格式及其库, 用于将 Java 类型转换为其 http 表示形式, 并将 http 实体解析为 Java 类型</li>
</ol>
<ul>
<li>Gson (com.squareup.retrofit2:converter-gson)</li>
<li>Jackson</li>
<li>Moshi</li>
</ul>
<p><strong>Okhttp特点</strong>  </p>
<ol>
<li>支持 HTTP2/SPDY</li>
<li>socket 自动选择最优路线, 并支持自动重连</li>
<li>拥有自动维护的 socket 连接池, 减少握手次数</li>
<li>拥有队列线程池, 易于并发编程</li>
<li>拥有 Interceptors 处理请求与响应 (透明 GZIP 压缩, LOGGING 等)</li>
<li>基于 Headers 的缓存策略</li>
</ol>
<h2 id="Rxjava-与-Retrofit-的配合"><a href="#Rxjava-与-Retrofit-的配合" class="headerlink" title="Rxjava 与 Retrofit 的配合"></a>Rxjava 与 Retrofit 的配合</h2><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">implementation &#x27;com.squareup.retrofit2:retrofit:2.3.0&#x27;</span><br><span class="line">implementation &#x27;com.squareup.retrofit2:adapter-rxjava2:2.3.0&#x27;</span><br></pre></td></tr></table></figure>
<h3 id="创建-RetrofitManager"><a href="#创建-RetrofitManager" class="headerlink" title="创建 RetrofitManager"></a>创建 RetrofitManager</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.example.silence.rxstudy;</span><br><span class="line"></span><br><span class="line">import com.safframework.http.interceptor.LoggingInterceptor;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line">import okhttp3.Interceptor;</span><br><span class="line">import okhttp3.OkHttpClient;</span><br><span class="line">import okhttp3.Response;</span><br><span class="line">import retrofit2.Retrofit;</span><br><span class="line">import retrofit2.adapter.rxjava2.RxJava2CallAdapterFactory;</span><br><span class="line">import retrofit2.converter.fastjson.FastJsonConverterFactory;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by silence on 18-7-15.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">public class RetrofitManager &#123;</span><br><span class="line">    private static Retrofit retrofit;</span><br><span class="line"></span><br><span class="line">    public static Retrofit retrofit() &#123;</span><br><span class="line">        if (null == retrofit) &#123;</span><br><span class="line">            OkHttpClient.Builder builder = new OkHttpClient.Builder();</span><br><span class="line">            builder.writeTimeout(30 * 1000, TimeUnit.MILLISECONDS);</span><br><span class="line">            builder.readTimeout(20 * 1000, TimeUnit.MILLISECONDS);</span><br><span class="line">            builder.connectTimeout(15 * 1000, TimeUnit.MILLISECONDS);</span><br><span class="line">            LoggingInterceptor loggingInterceptor =</span><br><span class="line">                    new LoggingInterceptor</span><br><span class="line">                            .Builder()</span><br><span class="line">                            .loggable(true)</span><br><span class="line">                            .request()</span><br><span class="line">                            .requestTag(&quot;Resquest&quot;)</span><br><span class="line">                            .response()</span><br><span class="line">                            .responseTag(&quot;Response&quot;)</span><br><span class="line">                            .build();</span><br><span class="line">            // 设置拦截器</span><br><span class="line">            builder.addInterceptor(loggingInterceptor);</span><br><span class="line"></span><br><span class="line">            OkHttpClient okHttpClient = builder.build();</span><br><span class="line">            retrofit= new Retrofit</span><br><span class="line">                    .Builder()</span><br><span class="line">                    .baseUrl(APIService.API_BASE_SERVER_URL)</span><br><span class="line">                    .addConverterFactory(FastJsonConverterFactory.create())</span><br><span class="line">                    .addCallAdapterFactory(RxJava2CallAdapterFactory.create())</span><br><span class="line">                    .client(okHttpClient)</span><br><span class="line">                    .build();</span><br><span class="line">        &#125;</span><br><span class="line">        return retrofit;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="创建-APIService"><a href="#创建-APIService" class="headerlink" title="创建 APIService"></a>创建 APIService</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public interface APIService &#123;</span><br><span class="line">    String API_BASE_SERVER_URL = &quot;http://www.pm25.in/&quot;;</span><br><span class="line">    @GET(&quot;api/queryas/pm2.5.json&quot;)</span><br><span class="line">    Maybe&lt;List&lt;PM25Model&gt;&gt; pm25(@Query(&quot;city&quot;) String city, @Query(&quot;token&quot;) String token);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Retrofit各注解含义 <a href="https://blog.csdn.net/qiang_xi/article/details/53959437">https://blog.csdn.net/qiang_xi/article/details/53959437</a></p>
</blockquote>
<h3 id="使用-Retrofit"><a href="#使用-Retrofit" class="headerlink" title="使用 Retrofit"></a>使用 Retrofit</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">APIService apiService = RetrofitManager.retrofit().create(APIService.class);</span><br><span class="line">apiService</span><br><span class="line">    .pm25(Constant.CITY, Constant.TOKEN)</span><br><span class="line">    .compose( upstream -&gt; &#123;</span><br><span class="line">            upstream</span><br><span class="line">                .subscribOn(Schedulers.io())</span><br><span class="line">                .observeOn(AndroidSchedulers.mainThread))</span><br><span class="line">    ).subscribe(pm25Model -&gt;&#123; // do Something;&#125;);  </span><br></pre></td></tr></table></figure>
<h1 id="开发-EventBus"><a href="#开发-EventBus" class="headerlink" title="开发 EventBus"></a>开发 EventBus</h1><h2 id="传统的-EventBus"><a href="#传统的-EventBus" class="headerlink" title="传统的 EventBus"></a>传统的 EventBus</h2><p>&emsp;&emsp;EventBus 是事件总线框架, 是一种消息发布-订阅的模式, 工作机制类似<br>于观察者模式, 通过通知者去注册观察者, 最后由通知者向观察者发布消息.<br>&emsp;&emsp;在 Android 开发中, 使用 EventBus 能够解耦 AsyncTask, Handler,<br>Thread, Broadcast 等各种组件, 除此之外还可以实现跨越多个 Fragment 之间的通信    </p>
<blockquote>
<p>Greenrobot 的 EventBus 官网: <a href="https://greenrobot.org/eventbus/">https://greenrobot.org/eventbus/</a><br>GitHub : <a href="https://github.com/greenrobot/EventBus">https://github.com/greenrobot/EventBus</a>  </p>
</blockquote>
<p><strong>EventBus</strong> 的主要角色如下  </p>
<ol>
<li>Event: 传递的事件对象</li>
<li>Subscriber: 事件的订阅者</li>
<li>Pulisher: 事件的发布者</li>
<li>ThreadMode: 定义方法在何种线程中执行<ul>
<li>MainUI 主线程</li>
<li>Background 后台线程</li>
<li>Posting 和发布者处在同一个线程</li>
<li>Async 异步线程</li>
</ul>
</li>
</ol>
<p><strong>推荐使用 RxJava 和 RxAndroid 开发自己的 EventBus</strong><br>待百度</p>
<h1 id="以下应该是-RxJava-2-x-实战第十四章以及以后的内容-暂时先补完-ssm-之后再看"><a href="#以下应该是-RxJava-2-x-实战第十四章以及以后的内容-暂时先补完-ssm-之后再看" class="headerlink" title="以下应该是 RxJava 2.x 实战第十四章以及以后的内容. 暂时先补完 ssm 之后再看"></a>以下应该是 RxJava 2.x 实战第十四章以及以后的内容. 暂时先补完 ssm 之后再看</h1>]]></content>
      <categories>
        <category>notes</category>
      </categories>
  </entry>
  <entry>
    <title>VueJs项目开发实战</title>
    <url>/notes/%E3%80%8AVueJs%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%E3%80%8B.html</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g vue</span><br><span class="line">npm install -g vue-cli</span><br><span class="line">npm install --save-dev webpack</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="1-初探网页开发"><a href="#1-初探网页开发" class="headerlink" title="1 初探网页开发"></a>1 初探网页开发</h1><h2 id="MVC、MVP-和-MVVM-开发模式对比"><a href="#MVC、MVP-和-MVVM-开发模式对比" class="headerlink" title="MVC、MVP 和 MVVM 开发模式对比"></a>MVC、MVP 和 MVVM 开发模式对比</h2><ol>
<li>MVC(Model View Controller)模式<br>用户操作–&gt;View(负责接收用户的输入操作)–&gt;Controller(业务逻辑处理)–&gt;Model(数据持久化)–&gt;View(将结果反馈给 View)</li>
<li>MVP(Model View Presenter)模式<br>用 Presenter 代替 Controller，完全隔断 View 跟 Model 之间的联系，由 Presenter 充当桥梁</li>
<li>MVVM(Model View ViewModel)模式<br>将“数据模型数据双向绑定”的思想作为核心，因此在 View 和 Model 之间没有联系，而是通过 ViewModel 进行交互，而且 Model 和 ViewModel 之间的交互是双向的，因此<strong>视图数据的变化会同时修改数据源，而数据源的变化也会立即反应到 View 上</strong>。</li>
</ol>
<h2 id="单文件组件"><a href="#单文件组件" class="headerlink" title="单文件组件"></a>单文件组件</h2><p>为了更好地适应复杂的项目，Vue.js 支持以 .vue 为扩展名的文件来定义一个完整组件用以替代使用 Vue.component 注册组件的方式。</p>
<h1 id="2-开启-Vue-js-之旅的准备工作"><a href="#2-开启-Vue-js-之旅的准备工作" class="headerlink" title="2 开启 Vue.js 之旅的准备工作"></a>2 开启 Vue.js 之旅的准备工作</h1><h2 id="2-1-JavaScript-运行与开发环境"><a href="#2-1-JavaScript-运行与开发环境" class="headerlink" title="2.1 JavaScript 运行与开发环境"></a>2.1 JavaScript 运行与开发环境</h2><h3 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h3><p>依赖于 Node.js 的包管理器<br>如果一个项目中存在 package.json 文件，那么用户可以直接使用 npm install 命令安装和维护项目所需的所有模块。并可指定每个依赖项的版本范围。<br>可用 nrm 更换至淘宝源。</p>
<h3 id="Vue-js-的调试工具–vue-devtools"><a href="#Vue-js-的调试工具–vue-devtools" class="headerlink" title="Vue.js 的调试工具–vue-devtools"></a>Vue.js 的调试工具–vue-devtools</h3><h2 id="2-2-认识-ECMAScript-6-ES-6"><a href="#2-2-认识-ECMAScript-6-ES-6" class="headerlink" title="2.2 认识 ECMAScript 6(ES 6)"></a>2.2 认识 ECMAScript 6(ES 6)</h2><p>2016年6月更新的第六个 ECMAScript 标准版本。</p>
<h2 id="2-3-ES-6-的一些常用语法"><a href="#2-3-ES-6-的一些常用语法" class="headerlink" title="2.3 ES 6 的一些常用语法"></a>2.3 ES 6 的一些常用语法</h2><h3 id="2-3-1-Default-Parameters-默认参数"><a href="#2-3-1-Default-Parameters-默认参数" class="headerlink" title="2.3.1 Default Parameters(默认参数)"></a>2.3.1 Default Parameters(默认参数)</h3><p>在 ES 6中可以直接把默认值放在函数的声明里</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var link = function(height = 50, color = &#x27;red&#x27;, url=&#x27;http://baidu.com&#x27;)&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-3-2-Template-Literals-模板文本"><a href="#2-3-2-Template-Literals-模板文本" class="headerlink" title="2.3.2 Template Literals(模板文本)"></a>2.3.2 Template Literals(模板文本)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var name = &#x27;Your name is $&#123;first&#125; $&#123;last&#125;&#x27;</span><br></pre></td></tr></table></figure>

<h3 id="2-3-3-Multi-line-Strings-多行字符串"><a href="#2-3-3-Multi-line-Strings-多行字符串" class="headerlink" title="2.3.3 Multi-line Strings(多行字符串)"></a>2.3.3 Multi-line Strings(多行字符串)</h3><p>使用<strong>反引号</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var roadPoeeem = `江南好，风景旧曾谙熟。</span><br><span class="line">日出江花红胜火，</span><br><span class="line">春来江水绿如蓝。</span><br><span class="line">能不忆江南?`;</span><br></pre></td></tr></table></figure>

<h3 id="2-3-4-Destructing-Assignment-解构赋值"><a href="#2-3-4-Destructing-Assignment-解构赋值" class="headerlink" title="2.3.4 Destructing Assignment(解构赋值)"></a>2.3.4 Destructing Assignment(解构赋值)</h3><p>ES 5方式:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var data = $(&#x27;body&#x27;).data();</span><br><span class="line">var house = data.house;</span><br><span class="line">var mouse = data.mouse;</span><br></pre></td></tr></table></figure>
<p>ES 6方式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var &#123;house, mouse&#125; = $(&#x27;body&#x27;).data();</span><br></pre></td></tr></table></figure>

<h3 id="2-3-5-Enhanced-Object-Literals-增强对象文本"><a href="#2-3-5-Enhanced-Object-Literals-增强对象文本" class="headerlink" title="2.3.5 Enhanced Object Literals(增强对象文本)"></a>2.3.5 Enhanced Object Literals(增强对象文本)</h3><p>？？？</p>
<h3 id="2-3-6-Arrow-Functions-箭头函数"><a href="#2-3-6-Arrow-Functions-箭头函数" class="headerlink" title="2.3.6 Arrow Functions(箭头函数)"></a>2.3.6 Arrow Functions(箭头函数)</h3><p>身处箭头函数里面，this 还是原来的 this。<br>ES 5:  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var _this = this;</span><br><span class="line">$(&#x27;.btn&#x27;).click(</span><br><span class="line">  function(event)&#123;</span><br><span class="line">    _this.sendData();</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>ES 6:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&#x27;.btn&#x27;).click(</span><br><span class="line">  (event) =&gt; &#123;</span><br><span class="line">    this.sendData();</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>对于单个参数的函数，括号()是可以省略的，但是当参数超过一个时需要用括号。<br>若箭头函数的函数体只有一行，则将其视作表达式，返回值可隐式返回。  </p>
<h3 id="2-3-7-Promise-实现"><a href="#2-3-7-Promise-实现" class="headerlink" title="2.3.7 Promise 实现"></a>2.3.7 Promise 实现</h3><p>使用 setTimeout() 函数实现的一部延迟加载函数：<br>ES 5:  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">setTimeout(</span><br><span class="line">  function()&#123;</span><br><span class="line">    console.log(&#x27;Yay!&#x27;);</span><br><span class="line">  &#125;,</span><br><span class="line">  1000</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>ES 6:  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var wait1000 =</span><br><span class="line">new Promise(</span><br><span class="line">  (resolve, reject)=&gt;&#123;</span><br><span class="line">    setTimeout(resolve, 1000);  </span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line">.then(</span><br><span class="line">  ()=&gt;&#123;</span><br><span class="line">    console.log(&#x27;Yay!&#x27;);</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="2-3-8-块作用域构造-let"><a href="#2-3-8-块作用域构造-let" class="headerlink" title="2.3.8 块作用域构造 let"></a>2.3.8 块作用域构造 let</h3><p>允许用 let 关键字声明变量，其作用域位于块级。(var 限制于函数级)；  </p>
<h3 id="2-3-9-Classes-类"><a href="#2-3-9-Classes-类" class="headerlink" title="2.3.9 Classes(类)"></a>2.3.9 Classes(类)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class baseModel&#123;</span><br><span class="line">  // 构造方法</span><br><span class="line">  constructor(options, data)&#123;</span><br><span class="line">    this.name = &#x27;Base&#x27;;</span><br><span class="line">    this.url = &#x27;http://baidu.com/api&#x27;;</span><br><span class="line">    this.data = data;</span><br><span class="line">    this.options = options;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 类的方法</span><br><span class="line">  getName()&#123;</span><br><span class="line">    console.log(`Class name: $&#123;this.name&#125;`)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-3-10-Modules-模块"><a href="#2-3-10-Modules-模块" class="headerlink" title="2.3.10 Modules(模块)"></a>2.3.10 Modules(模块)</h3><p>使用 export 公布，import 导入。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// module.js</span><br><span class="line">export var port = 3000;</span><br><span class="line">export function getAccounts(url)&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// main.js</span><br><span class="line">import &#123;port, getAccounts&#125; from &#x27;module&#x27;;</span><br><span class="line">import * from &#x27;module&#x27;;</span><br></pre></td></tr></table></figure>

<h2 id="2-4-使用-Babel-进行-ES-6-的转化-将-ES-6-语法向前转换成-ES-5-语法"><a href="#2-4-使用-Babel-进行-ES-6-的转化-将-ES-6-语法向前转换成-ES-5-语法" class="headerlink" title="2.4 使用 Babel 进行 ES 6 的转化(将 ES 6 语法向前转换成 ES 5 语法)"></a>2.4 使用 Babel 进行 ES 6 的转化(将 ES 6 语法向前转换成 ES 5 语法)</h2><h2 id="2-5-精简压缩生产环境的-WebPack"><a href="#2-5-精简压缩生产环境的-WebPack" class="headerlink" title="2.5 精简压缩生产环境的 WebPack"></a>2.5 精简压缩生产环境的 WebPack</h2><p>WebPack 是一个开源的前端打包工具。<br>使用载入器将资源转化成模组，开发者可以自定义载入器的顺序、格式来适应各种需求。<br>一款模块加载器兼打包工具，能把各种资源(动态和静态)作为模块使用和处理。使得开发者可以方便地引入各个模块。</p>
<h1 id="3-从一个电影网站学习-Vue-js"><a href="#3-从一个电影网站学习-Vue-js" class="headerlink" title="3 从一个电影网站学习 Vue.js"></a>3 从一个电影网站学习 Vue.js</h1><h2 id="3-1-快速构建第一个-Vue-js-程序"><a href="#3-1-快速构建第一个-Vue-js-程序" class="headerlink" title="3.1 快速构建第一个 Vue.js 程序"></a>3.1 快速构建第一个 Vue.js 程序</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Vue init webpack movie_view</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root</span><br><span class="line">  |--build  针对打包命令 npm run build 或者其它命令中的打包配置和工具等</span><br><span class="line">  |--config 项目的基本配置、相关测试、生产环境的启动端口，不同的配置有自己不同的配置文件夹</span><br><span class="line">  |--node_modules 由命令 npm install 自动生成的 node 使用插件的所在地</span><br><span class="line">  |--src</span><br><span class="line">      |--assets 放置静态页面中的图片或其他静态资源</span><br><span class="line">      |--component 编写的组件代码</span><br><span class="line">      |--router 项目的路由</span><br><span class="line">      |--App.vue 入口页面</span><br><span class="line">      |--main.js         </span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm run dev 开发模式</span><br><span class="line">npm run build 生产模式</span><br></pre></td></tr></table></figure>

<h2 id="3-3-电影网站的技术选择"><a href="#3-3-电影网站的技术选择" class="headerlink" title="3.3 电影网站的技术选择"></a>3.3 电影网站的技术选择</h2><h3 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h3><p>非关系型数据库，采用类似 JSON 的 BSON 格式管理数据。</p>
<h3 id="Express-框架作服务器"><a href="#Express-框架作服务器" class="headerlink" title="Express 框架作服务器"></a>Express 框架作服务器</h3><h1 id="4-电影网站数据库的搭建"><a href="#4-电影网站数据库的搭建" class="headerlink" title="4 电影网站数据库的搭建"></a>4 电影网站数据库的搭建</h1><h2 id="4-2-MongoDB-基础"><a href="#4-2-MongoDB-基础" class="headerlink" title="4.2 MongoDB 基础"></a>4.2 MongoDB 基础</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mongod --dbpatch D:\db\MongoDB 指定数据库文件目录启动 MongoDB</span><br></pre></td></tr></table></figure>
<h3 id="4-2-4-可视化工具-studio-3t"><a href="#4-2-4-可视化工具-studio-3t" class="headerlink" title="4.2.4 可视化工具 studio 3t"></a>4.2.4 可视化工具 studio 3t</h3><h1 id="5-电影网站服务器端的设计"><a href="#5-电影网站服务器端的设计" class="headerlink" title="5 电影网站服务器端的设计"></a>5 电影网站服务器端的设计</h1><h2 id="5-4-Express-后台代码编写"><a href="#5-4-Express-后台代码编写" class="headerlink" title="5.4 Express 后台代码编写"></a>5.4 Express 后台代码编写</h2><h3 id="5-4-1-新建工程"><a href="#5-4-1-新建工程" class="headerlink" title="5.4.1 新建工程"></a>5.4.1 新建工程</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install express-generator -g // 使用 express-generator 生成 express 项目。index.js 默认监听   </span><br><span class="line">express book_service  </span><br><span class="line">cd book_service</span><br><span class="line">npm install</span><br><span class="line">set DEBUG= book_service</span><br><span class="line">npm start</span><br></pre></td></tr></table></figure>
<h3 id="5-4-2-连接数据库"><a href="#5-4-2-连接数据库" class="headerlink" title="5.4.2 连接数据库"></a>5.4.2 连接数据库</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install mongoose --save  </span><br><span class="line">npm install -g supervisor  //使用 supervisor 监视代码修改  </span><br><span class="line">supervisor bin/www</span><br></pre></td></tr></table></figure>

<h2 id="5-5-用户系统开发"><a href="#5-5-用户系统开发" class="headerlink" title="5.5 用户系统开发"></a>5.5 用户系统开发</h2><p>要建立新的路由代码文件，均需要在 app.js 代码文件中引用该文件，并定义新的路由地址。  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var users = require(&#x27;./routes/users&#x27;);</span><br><span class="line">app.use(&#x27;/users&#x27;, users);</span><br></pre></td></tr></table></figure>

<p>使用 statics 为对象添加方法：<code>obj.statics.method = function()&#123;&#125;;</code>  </p>
<h1 id="6-Vue-js-项目开发技术解析"><a href="#6-Vue-js-项目开发技术解析" class="headerlink" title="6 Vue.js 项目开发技术解析"></a>6 Vue.js 项目开发技术解析</h1><p>vue.js 前端路由: vue-router<br>请求后端资源所需包 <code>npm install vue-resource --save</code>  </p>
<h2 id="6-1-Vue-js-实例"><a href="#6-1-Vue-js-实例" class="headerlink" title="6.1 Vue.js 实例"></a>6.1 Vue.js 实例</h2><p>在一个 Vue.js 工程中，用于显示内容最基层的实例称之为根实例。通过该实例可以进行页面或组件<br>的更新和显示。对于项目本身而言，无论是什么样的页面，都要基于该根实例进行显示。</p>
<h3 id="6-1-1-何为构造器"><a href="#6-1-1-何为构造器" class="headerlink" title="6.1.1 何为构造器"></a>6.1.1 何为构造器</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 建立 Vue 实例</span><br><span class="line">var vm = new Vue(</span><br><span class="line">    &#123;</span><br><span class="line">      //选项</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>在实例化时需要传入一个选项对象，包含数据、模板、挂载元素、方法和生命周期函数等。<br>对于已经创建的相关构造器可扩展为其他构造器，从而复用组件构造器。  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var MyComponent = Vue.extend(</span><br><span class="line">    &#123;</span><br><span class="line">      //扩展选项</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line">var MyComponentInstance = new MyComponent();</span><br></pre></td></tr></table></figure>
<h3 id="6-1-2-实例的属性和方法"><a href="#6-1-2-实例的属性和方法" class="headerlink" title="6.1.2 实例的属性和方法"></a>6.1.2 实例的属性和方法</h3><p>每个 Vue.js 实例在被创建之前都要经历一系列初始化过程，在此过程中加入一些<strong>响应事件</strong>、<br><strong>数据属性</strong>等 data 属性。<br>data 中既定的值发生改变时，视图会同步响应并及时匹配值，产生响应的效果。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var data = &#123;a: 1&#125;;</span><br><span class="line">var vm = new Vue(</span><br><span class="line">  &#123;</span><br><span class="line">    data: data</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line">data.a === vm.a; // true</span><br><span class="line">vm.a = 2; // data.a =&gt; 2</span><br><span class="line">data.a = 3; // data.a =&gt; 3</span><br></pre></td></tr></table></figure>
<h3 id="6-1-3-生命周期"><a href="#6-1-3-生命周期" class="headerlink" title="6.1.3 生命周期"></a>6.1.3 生命周期</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">new Vue(</span><br><span class="line">  &#123;</span><br><span class="line">    data:</span><br><span class="line">    &#123;</span><br><span class="line">      a: 1</span><br><span class="line">    &#125;,</span><br><span class="line">    created: function()&#123;</span><br><span class="line">        //this 指向 vm 实例  </span><br><span class="line">        console.log(&#x27;a is: &#x27; + this.a);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h3 id="6-2-1-RESTful-模式的路由"><a href="#6-2-1-RESTful-模式的路由" class="headerlink" title="6.2.1 RESTful 模式的路由"></a>6.2.1 RESTful 模式的路由</h3><p>一种设计风格，每一个资源都有一个地址。资源本身都是方法调用的目标，方法列表对所有资源都是一样的。  </p>
<h2 id="6-5-电影网站项目路由设计"><a href="#6-5-电影网站项目路由设计" class="headerlink" title="6.5 电影网站项目路由设计"></a>6.5 电影网站项目路由设计</h2><p>跨域：指两个不在同一域名下的页面无法进行正常通信，或者无法获取其他域名下的数据。<br>Vue.js 和 Express 提供的两种支持跨域的方式：  </p>
<ol>
<li><p>Vue.js 使用 vue-resource 的 jsonp() 方法<br><code>this.$http.jsonp(&#39;/someUrl&#39;, [data], [options]).then(successCallback, errorCallback);</code><br>(Vue 示例暴露了一些额外的有用的对象和方法，均以 $ 开头)<br>(jsonp 只能发起 get 请求)  </p>
</li>
<li><p>Express 在 app.js 中进行全路由的配置  </p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//需要在所有的路由路径配置之前执行</span><br><span class="line">app.all(</span><br><span class="line">  &#x27;*&#x27;,</span><br><span class="line">  function(req, res, next)&#123;</span><br><span class="line">    res.header(&#x27;Access-Control-Allow-Origin&#x27;, &#x27;*&#x27;);</span><br><span class="line">    res.header(&#x27;Access-Control-Allow-Headers&#x27;, &#x27;Content-Type, Content-Length, Authorization, Accept, X-Requested-With, yourHeaderFeild&#x27;);</span><br><span class="line">    res.header(&#x27;Access-Control-Allow-Methods&#x27;, &#x27;PUT, POST, GET, DELETE, OPTIONS&#x27;);</span><br><span class="line">    if(req.method == &#x27;OPTIONS&#x27;)&#123;</span><br><span class="line">      res.send(200);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">      next();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="7-模板学习"><a href="#7-模板学习" class="headerlink" title="7 模板学习"></a>7 模板学习</h1><h2 id="7-1-Vue-js-模板"><a href="#7-1-Vue-js-模板" class="headerlink" title="7.1 Vue.js 模板"></a>7.1 Vue.js 模板</h2><p>模板从根本上规定了一个系统应当以怎样的交互形式和 UI 风格面向使用者，而遵循这套模板进行设计和完善功能，也是软件开发的基本模式。<br>严格的模板引擎的定义是，输入模板字符串+数据，得到渲染过的字符串（页面）。  </p>
<h2 id="7-2-模板语法"><a href="#7-2-模板语法" class="headerlink" title="7.2 模板语法"></a>7.2 模板语法</h2><h2 id="7-2-1-文本输出"><a href="#7-2-1-文本输出" class="headerlink" title="7.2.1 文本输出"></a>7.2.1 文本输出</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;span&gt; Message: &#123;&#123;msg&#125;&#125; &lt;/span&gt;  </span><br><span class="line">&lt;!-- 使用 v-once 指令进行一次性插值，此时文本不会跟随对象变化 --&gt;</span><br><span class="line">&lt;span v-once&gt; Once message: &#123;&#123;msg&#125;&#125; &lt;/span&gt;</span><br></pre></td></tr></table></figure>

<p>完整代码:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// src/components/ShowText.vue  </span><br><span class="line">&lt;!-- HTML 页面代码部分 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &#123;&#123;msg&#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">// 逻辑部分代码  </span><br><span class="line">export default&#123;</span><br><span class="line">  data()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">      msg: &#x27;HelloWorld&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// router/index.js  </span><br><span class="line">import ShowText from &#x27;@/components/ShowText&#x27;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  path:&#x27;/ShowText&#x27;</span><br><span class="line">  component: ShowText</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7-2-2-纯-HTML-输出"><a href="#7-2-2-纯-HTML-输出" class="headerlink" title="7.2.2 纯 HTML 输出"></a>7.2.2 纯 HTML 输出</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 使用 v-html 指令  </span><br><span class="line">&lt;div v-html=&quot;msg&quot;&gt;&lt;/div&gt;</span><br><span class="line">...</span><br><span class="line">msg = &#x27;&lt;div style=&quot;font-size: 30px; color:red&quot;&gt;HelloWorld&lt;/div&gt;&#x27;</span><br></pre></td></tr></table></figure>

<p>不能用 v-html 进行嵌套模板，因为 vue 的模板不是基于字符串的。</p>
<h3 id="7-2-3-JavaScript-表达式"><a href="#7-2-3-JavaScript-表达式" class="headerlink" title="7.2.3 JavaScript 表达式"></a>7.2.3 JavaScript 表达式</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;label&gt;数字1：&lt;/label&gt;</span><br><span class="line">    &lt;input v-model=&quot;int1&quot;/&gt;</span><br><span class="line">    &lt;br/&gt;&lt;br/&gt;</span><br><span class="line">    &lt;label&gt;数字2：&lt;/label&gt;</span><br><span class="line">    &lt;input v-model=&quot;int2&quot;/&gt;</span><br><span class="line">    &lt;labe&gt;和为：&lt;/label&gt;</span><br><span class="line">    &#123;&#123;parseInt(int1)+parseInt(int2)&#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">export default&#123;</span><br><span class="line">  data()&#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      int1: 0,</span><br><span class="line">      int2: 0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>每个绑定都只能包含单个表达式。  </p>
<h3 id="7-2-4-指令参数"><a href="#7-2-4-指令参数" class="headerlink" title="7.2.4 指令参数"></a>7.2.4 指令参数</h3><p>指令即带有 v-前缀的特殊属性。有些指令能接收一个“参数”，在指令名称之后以冒号表示。  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- v-if 根据 seen 表达式的真假来插入/移除元素 --&gt;</span><br><span class="line">&lt;p v-if=&quot;seen&quot;&gt;现在开发者看到我了&lt;/p&gt;</span><br><span class="line">&lt;!-- v-bind 指令用于响应式地更新 HTML 属性--&gt;</span><br><span class="line">&lt;a v-bind: href=&quot;url&quot;&gt;&lt;/a&gt;</span><br><span class="line">&lt;!-- 简写形式 --&gt;</span><br><span class="line">&lt;a :href = &quot;url&quot;&gt;&lt;/a&gt;</span><br><span class="line">&lt;!-- v-on 用于监听 DOM 事件 --&gt;</span><br><span class="line">&lt;a v-on:click = &quot;doSomething&quot;&gt;</span><br><span class="line">&lt;!-- 简写形式 --&gt;</span><br><span class="line">&lt;a @click=&quot;doSomething&quot;</span><br></pre></td></tr></table></figure>

<h2 id="7-3-计算属性和观察者属性"><a href="#7-3-计算属性和观察者属性" class="headerlink" title="7.3 计算属性和观察者属性"></a>7.3 计算属性和观察者属性</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;example&quot;&gt;</span><br><span class="line">  &lt;p&gt; Original message:&quot;&#123;&#123; message &#125;&#125;&quot;&lt;/p&gt;</span><br><span class="line">  &lt;p&gt; Computed reversed message: &quot;&#123;&#123; reversedMessage &#125;&#125; &quot;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  el: &#x27;#example&#x27;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: &#x27;Hello&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed:&#123;</span><br><span class="line">    reversedMessage: function()&#123;</span><br><span class="line">      return this.message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  watch:&#123;</span><br><span class="line">    reversedMessage: function()&#123;</span><br><span class="line">      return this.message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="导入模板"><a href="#导入模板" class="headerlink" title="导入模板"></a>导入模板</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;!-- 3.在template中就可以直接使用了 --&gt;</span><br><span class="line">        &lt;testComponent&gt;&lt;/testComponent&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    //1.先使用import导入你要在该组件中使用的子组件</span><br><span class="line">    import testComponent from &#x27;./testComponent.vue&#x27;</span><br><span class="line">    export default &#123;</span><br><span class="line">        //2.然后,在components中写入子组件</span><br><span class="line">        components: &#123;testComponent&#125;,</span><br><span class="line">        methods: &#123;&#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="8-让页面变成动态页面"><a href="#8-让页面变成动态页面" class="headerlink" title="8 让页面变成动态页面"></a>8 让页面变成动态页面</h1><h2 id="8-1-条件渲染"><a href="#8-1-条件渲染" class="headerlink" title="8.1 条件渲染"></a>8.1 条件渲染</h2><h3 id="8-1-1-v-if-应用"><a href="#8-1-1-v-if-应用" class="headerlink" title="8.1.1 v-if 应用"></a>8.1.1 v-if 应用</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;h1 v-if=&quot; type === &#x27;A&#x27; &quot;&gt;A&lt;/h1&gt;</span><br><span class="line">&lt;h1 v-else-if=&quot; type === &#x27;B&#x27; &quot;&gt;B&lt;/h1&gt;</span><br><span class="line">&lt;h1 v-else&gt;C&lt;/h1&gt;</span><br></pre></td></tr></table></figure>

<h3 id="8-1-2-v-show-应用"><a href="#8-1-2-v-show-应用" class="headerlink" title="8.1.2 v-show 应用"></a>8.1.2 v-show 应用</h3><p>与 v-if 相似，但带有 v-show 的元素始终会被渲染并保留在 DOM 中，只是简单地切换该元素的 CSS 属性 display。<br><code>&lt;h1 v-show=&quot;ok&quot;&gt;Hello!&lt;/h1&gt;</code><br>如果需要非常频繁地切换，则用 v-show 更好；若在运行时条件不会改变，则用 v-if 更好。  </p>
<h2 id="8-2-列表渲染"><a href="#8-2-列表渲染" class="headerlink" title="8.2 列表渲染"></a>8.2 列表渲染</h2><p>通过一个数组循环，可以极大地利用模板显示众多内容和相关的列表。  </p>
<h3 id="8-2-1-v-for-列表渲染"><a href="#8-2-1-v-for-列表渲染" class="headerlink" title="8.2.1 v-for 列表渲染"></a>8.2.1 v-for 列表渲染</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;ul id=&quot;example-2&quot;&gt;</span><br><span class="line">  &lt;li v-for=&quot;item in items&quot;&gt;</span><br><span class="line">  &lt;li v-for=&quot;(item, index) in items&quot;&gt;</span><br><span class="line">  &lt;li v-for=&quot;(key, value, index) in items&quot;</span><br><span class="line">    &lt;!-- v-for 对父作用域有完全访问权限 --&gt;</span><br><span class="line">    &#123;&#123; parentMessage &#125;&#125; - &#123;&#123; index &#125;&#125; - &#123;&#123; item &#125;&#125;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">var example2 = new Vue(&#123;</span><br><span class="line">  el: &#x27;#example2&#x27;,</span><br><span class="line">  data:&#123;</span><br><span class="line">    parentMessage: &#x27;Parent&#x27;,</span><br><span class="line">    items: [</span><br><span class="line">    &#123;message: &#x27;Foo&#x27;&#125;,</span><br><span class="line">    &#123;nessage: &#x27;Bar&#x27;&#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<h3 id="8-2-2-v-for-与-v-if-组合使用"><a href="#8-2-2-v-for-与-v-if-组合使用" class="headerlink" title="8.2.2 v-for 与 v-if 组合使用"></a>8.2.2 v-for 与 v-if 组合使用</h3><p>当 v-for 与 v-if 位于同一节点时，v-for 的优先级更高。  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;li v-for=&quot;todo in todos&quot; v-if=&quot;!todo.isComplete&quot;&gt;  </span><br><span class="line">  &#123;&#123; todo &#125;&#125;</span><br><span class="line">&lt;/li&gt;</span><br></pre></td></tr></table></figure>

<p>如果想有条件地跳过循环的执行，可以将 v-if 置于外层元素上。  </p>
<h3 id="8-2-3-key-关键字使用"><a href="#8-2-3-key-关键字使用" class="headerlink" title="8.2.3 key 关键字使用"></a>8.2.3 key 关键字使用</h3><p>为了让 Vue.js 追踪每个节点的身份，从而重用和重新排序现有元素，开发者需要为每项提供一个唯一的 key 属性。<br>这个属性需要用 v-bind 来绑定动态值  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div v-for=&quot;item in items&quot; :key=&quot;item.id&quot;&gt;</span><br><span class="line">&lt;!-- 内容 --&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>在组件中使用 v-for 时，key 关键字是必须的。  </p>
<h2 id="8-3-事件处理器-v-on"><a href="#8-3-事件处理器-v-on" class="headerlink" title="8.3 事件处理器 v-on"></a>8.3 事件处理器 v-on</h2><p>可以用 v-on 指令监听 DOM 事件来触发一些 JavaScript 代码，即在某个操作触发时执行特定的事件。  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- 当该 button 被点击时调用数据对象的 greet() 方法 --&gt;</span><br><span class="line">    &lt;button v-on:click=&quot;greet&quot;&gt;Greet&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  new Vue(</span><br><span class="line">    &#123;</span><br><span class="line">        el: &quot;#app&quot;,</span><br><span class="line">        data:&#123;</span><br><span class="line">          name: &#x27;Vue.js&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">          greet: function(event)&#123;</span><br><span class="line">            alert(&#x27;Hello&#x27; + this.name + &#x27;!&#x27;);</span><br><span class="line">            // event 是原生 DOM 事件  </span><br><span class="line">            if(event)&#123;</span><br><span class="line">              alert(event.target.tagName)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br></pre></td></tr></table></figure>

<p>若需要在处理器中访问原声 DOM 事件，可以用特殊变量 $event 指定内容， 传入需要执行的方法中。  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;button v-on:click=&quot;warn(&#x27;Form cannot be submitted yet&#x27;, $event)&quot;&gt;Submit&lt;/button&gt;</span><br></pre></td></tr></table></figure>

<h3 id="8-3-3-事件修饰符"><a href="#8-3-3-事件修饰符" class="headerlink" title="8.3.3 事件修饰符"></a>8.3.3 事件修饰符</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 阻止单击事件冒泡 --&gt;</span><br><span class="line">&lt;a @click.stop=&quot;doThis&quot;&gt;&lt;/a&gt;</span><br><span class="line">&lt;!-- 提交事件不再重载页面 --&gt;</span><br><span class="line">&lt;form v-on:submit.prevent=&quot;onSubmit&quot;&gt;&lt;/form&gt;</span><br><span class="line">&lt;!-- 修饰符可以串联 --&gt;</span><br><span class="line">&lt;a @click.stop.prevent=&quot;doThat&quot;&gt;&lt;/form&gt;</span><br><span class="line">&lt;!-- 只有修饰符 --&gt;</span><br><span class="line">&lt;form v-on:submit.prevent&gt;&lt;/form&gt;</span><br><span class="line">&lt;!-- 添加事件监听器时使用事件捕获模式 --&gt;</span><br><span class="line">&lt;div @click.capture=&quot;doThis&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;!-- 只当事件在该元素本身(而不是子元素或者其他)触发时触发回调 --&gt;</span><br><span class="line">&lt;div @click.self=&quot;doThat&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;!-- 点击事件将只会触发一次 --&gt;</span><br><span class="line">&lt;a @click.once=&quot;doThis&quot;&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<h3 id="8-3-4-键值修饰符"><a href="#8-3-4-键值修饰符" class="headerlink" title="8.3.4 键值修饰符"></a>8.3.4 键值修饰符</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input v-on:keyup.13=&quot;submit&quot;&gt;</span><br><span class="line">&lt;input v-on:keyup.enter=&quot;submit&quot;&gt;</span><br><span class="line">&lt;input @keyup.enter=&quot;submit&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>别名列表：  </p>
<ul>
<li>.enter  </li>
<li>.delete  </li>
<li>.esc</li>
<li>.space  </li>
<li>.up</li>
<li>.down</li>
<li>.left</li>
<li>.right</li>
<li>Ctrl</li>
<li>Alt</li>
<li>Shift</li>
<li>meta(mac的命令键或win的徽标键)</li>
</ul>
<p>鼠标的三个按键修饰符：  </p>
<ul>
<li>.left</li>
<li>.right</li>
<li>.middle</li>
</ul>
<h2 id="8-4-交互的灵魂——表单"><a href="#8-4-交互的灵魂——表单" class="headerlink" title="8.4 交互的灵魂——表单"></a>8.4 交互的灵魂——表单</h2><p>开发者可以用 v-model 指令在表单控件元素上创建双向数据绑定。<br>v-model 本质上就是语法糖，负责监听用户的输入事件以更新数据，并极端处理一些特别的例子。  </p>
<h3 id="8-4-1-文本输入"><a href="#8-4-1-文本输入" class="headerlink" title="8.4.1 文本输入"></a>8.4.1 文本输入</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;input v-model=&quot;message&quot; placeholder=&quot;编辑&quot;&gt;</span><br><span class="line">    &lt;p&gt;Message is: &#123;&#123; message &#125;&#125; &lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  new Vue(</span><br><span class="line">    data:&#123;</span><br><span class="line">      message:&#x27;&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="8-4-3-复选框"><a href="#8-4-3-复选框" class="headerlink" title="8.4.3 复选框"></a>8.4.3 复选框</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;checkbox&quot; id=&quot;checkbox&quot; v-model=&quot;checked&quot;&gt;</span><br><span class="line">&lt;label for=&quot;checkbox&quot;&gt;&#123;&#123; checked &#125;&#125; &lt;/label&gt;</span><br></pre></td></tr></table></figure>

<h3 id="8-4-4-单选按钮"><a href="#8-4-4-单选按钮" class="headerlink" title="8.4.4 单选按钮"></a>8.4.4 单选按钮</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;input type=&quot;radio&quot; id=&quot;one&quot; value=&quot;One&quot; v-model=&quot;picked&quot;&gt;</span><br><span class="line">    &lt;label for=&quot;one&quot;&gt;One&lt;/label&gt;</span><br><span class="line">    &lt;input type=&quot;radio&quot; id=&quot;two&quot; value=&quot;Two&quot; v-model=&quot;picked&quot;&gt;</span><br><span class="line">    &lt;label for=&quot;two&quot;&gt;Two&lt;/label&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    &lt;span&gt; 选择了：&#123;&#123; picked &#125;&#125; &lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="8-4-5-复选框"><a href="#8-4-5-复选框" class="headerlink" title="8.4.5 复选框"></a>8.4.5 复选框</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;select v-model=&quot;selected&quot;&gt;</span><br><span class="line">      &lt;option disabled value=&quot;&quot;&gt;请选择&lt;/option&gt;</span><br><span class="line">      &lt;option&gt;A&lt;/option&gt;</span><br><span class="line">      &lt;option&gt;B&lt;/option&gt;</span><br><span class="line">      &lt;option&gt;C&lt;/option&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    &lt;span&gt;Selected: &#123;&#123; selected &#125;&#125;&lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h2 id="8-5-值的绑定"><a href="#8-5-值的绑定" class="headerlink" title="8.5 值的绑定"></a>8.5 值的绑定</h2><p>将数值绑定在一个控件上，针对控件的操作而做出响应的反应或触发某个事件。</p>
<h3 id="checkbox"><a href="#checkbox" class="headerlink" title="checkbox"></a>checkbox</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;checkbox&quot; v-model=&quot;toggle&quot; v-bind: true-value=&quot;a&quot; v-bind: false-value=&quot;b&quot;&gt;</span><br><span class="line"></span><br><span class="line">// 选中时</span><br><span class="line">vm.toggle === vm.a</span><br><span class="line">// 没有选中时</span><br><span class="line">vm.toggle === vm.b</span><br></pre></td></tr></table></figure>

<h3 id="radio"><a href="#radio" class="headerlink" title="radio"></a>radio</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;radio&quot; v-model=&quot;pick&quot; v-bind: value=&quot;a&quot;&gt;</span><br><span class="line">// 选中时</span><br><span class="line">vm.pick === vm.a</span><br></pre></td></tr></table></figure>

<h3 id="select-列表的设置和值的绑定"><a href="#select-列表的设置和值的绑定" class="headerlink" title="select 列表的设置和值的绑定"></a>select 列表的设置和值的绑定</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;select v-model=&quot;selected&quot;&gt;</span><br><span class="line">  &lt;!-- 内联对象字面量 --&gt;</span><br><span class="line">  &lt;option v-bind:value=&quot;&#123;number: 123&#125;&quot;&gt;123&lt;/option&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line"></span><br><span class="line">// 当选中该值时</span><br><span class="line">tpyeof vm.selected // =&gt; &#x27;object&#x27;</span><br><span class="line">vm.selected.number // =&gt; 123</span><br></pre></td></tr></table></figure>


<h2 id="8-6-修饰符"><a href="#8-6-修饰符" class="headerlink" title="8.6 修饰符"></a>8.6 修饰符</h2><p>在一个控件中使用修饰符，可对控件或操作做出一定的改变或者约束。  </p>
<h3 id="8-6-1-lazy"><a href="#8-6-1-lazy" class="headerlink" title="8.6.1 .lazy"></a>8.6.1 .lazy</h3><p>在默认情况下，v-model 在 input 事件中同步输入框的值与数据，但可以使用 .lazy 修饰符，从而转变为在 change 事件中同步  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 在 &quot;change&quot; 而不是 &quot;input&quot; 事件中更新 msg 的值 --&gt;</span><br><span class="line">&lt;input v-model.lazy=&quot;msg&quot;&gt;</span><br></pre></td></tr></table></figure>

<h3 id="8-6-2-number"><a href="#8-6-2-number" class="headerlink" title="8.6.2 .number"></a>8.6.2 .number</h3><p>自动将用户的输入值转换为 Number 类型，若转换结果为 NaN 则使用原值。  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input v-model.number=&quot;age&quot; tpye=&quot;number&quot;&gt;</span><br></pre></td></tr></table></figure>

<h3 id="8-6-3-trim"><a href="#8-6-3-trim" class="headerlink" title="8.6.3 .trim"></a>8.6.3 .trim</h3><p>自动过滤用户输入的首尾空格。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input v-model.trim=&quot;msg&quot;&gt;</span><br></pre></td></tr></table></figure>


<h1 id="9-让界面变得更加美丽"><a href="#9-让界面变得更加美丽" class="headerlink" title="9 让界面变得更加美丽"></a>9 让界面变得更加美丽</h1><h2 id="9-1-使用-CSS-美化-Vue-js"><a href="#9-1-使用-CSS-美化-Vue-js" class="headerlink" title="9.1 使用 CSS 美化 Vue.js"></a>9.1 使用 CSS 美化 Vue.js</h2><h2 id="9-2-动态绑定-class"><a href="#9-2-动态绑定-class" class="headerlink" title="9.2 动态绑定 class"></a>9.2 动态绑定 class</h2><h3 id="9-2-1-绑定对象语法"><a href="#9-2-1-绑定对象语法" class="headerlink" title="9.2.1 绑定对象语法"></a>9.2.1 绑定对象语法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div v-bind:class=&quot;&#123;active: isActive&#125;&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;!-- active 这个 class 存在与否取决于数据属性 isActive 是否为真值 --&gt;</span><br><span class="line">&lt;div class=&quot;static&quot; v-bind:class=&quot;&#123; active: isActive, text-danger: hasError&#125;&quot;</span><br><span class="line">data:&#123;</span><br><span class="line">  isActive: true,</span><br><span class="line">  hasError: false</span><br><span class="line">&#125;</span><br><span class="line">&lt;div class=&quot;classObject&quot;&gt;&lt;/div&gt;</span><br><span class="line">data:&#123;</span><br><span class="line">  classObject:&#123;</span><br><span class="line">    active: true,</span><br><span class="line">    text-danger: false</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="9-2-2-绑定数组语法"><a href="#9-2-2-绑定数组语法" class="headerlink" title="9.2.2 绑定数组语法"></a>9.2.2 绑定数组语法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div v-bind:class=&quot;[activeClass, errorClass]&quot;&gt;&lt;/div&gt;</span><br><span class="line">data:&#123;</span><br><span class="line">  avtiveClass: &#x27;active&#x27;,</span><br><span class="line">  errorClass: &#x27;text-danger&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过 style 进行绑定：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div v-bind:style=&quot;&#123;color:activeColor, fontSize: fontSize+&quot;px&quot;&#125;&quot;&gt;&lt;/div&gt;</span><br><span class="line">data:&#123;</span><br><span class="line">  activeColor: &#x27;red&#x27;,</span><br><span class="line">  fontSize: 30</span><br><span class="line">&#125;</span><br><span class="line">&lt;!-- 当对style 中的一个属性绑定多个值时， 指挥徐娜然数组中最后一个被浏览器支持的值 --&gt;</span><br><span class="line">&lt;div v-bind:style=&quot;&#123;display::[&#x27;-webkit-box&#x27;, &#x27;-ms-flexbox&#x27;, &#x27;flex&#x27;]&#125;&quot;</span><br></pre></td></tr></table></figure>

<h2 id="9-3-常用的-UI-框架"><a href="#9-3-常用的-UI-框架" class="headerlink" title="9.3 常用的 UI 框架"></a>9.3 常用的 UI 框架</h2><ol>
<li><a href="https://element-cn.eleme.io/#/zh-CN">Element 组件库</a>  </li>
</ol>
<ul>
<li>饿了么平台前端推出的基于 Vue.js 2.0的后台组件库。</li>
<li>业务驱动的 UI 库</li>
</ul>
<ol start="2">
<li><a href="https://www.iviewui.com/">iView 组件库</a></li>
<li><a href="https://vuetifyjs.com/zh-Hans/">Vuetify 组件库</a></li>
</ol>
<ul>
<li>Material Design 风格</li>
</ul>
]]></content>
      <categories>
        <category>notes</category>
      </categories>
  </entry>
</search>
